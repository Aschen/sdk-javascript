{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///kuzzle.js","webpack:///webpack/bootstrap 659a17fc7bf3f3b37d4a","webpack:///./src/kuzzle.js","webpack:///./src/security/kuzzleSecurityDocument.js","webpack:///./src/security/kuzzleUser.js","webpack:///./~/node-uuid/uuid.js","webpack:///./src/kuzzleDataCollection.js","webpack:///./src/kuzzleDataMapping.js","webpack:///./src/kuzzleDocument.js","webpack:///./src/kuzzleMemoryStorage.js","webpack:///./src/kuzzleRoom.js","webpack:///./src/networkWrapper/index.js","webpack:///./src/networkWrapper/wrappers/socketio.js","webpack:///./src/networkWrapper/wrappers/wsbrowsers.js","webpack:///./src/security/kuzzleProfile.js","webpack:///./src/security/kuzzleRole.js","webpack:///./src/security/kuzzleSecurity.js"],"names":["root","factory","exports","module","define","amd","a","i","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","cleanQueue","self","now","Date","lastDocumentIndex","queueTTL","offlineQueue","forEach","query","index","ts","splice","droppedRequest","emitEvent","queueMaxSize","length","cleanHistory","requestHistory","Object","keys","key","setTimeout","emitRequest","request","cb","undefined","jwtToken","network","once","requestId","response","error","action","message","Error","assign","status","send","dequeue","additionalQueue","uniqueQueue","dequeuingProcess","shift","Math","max","replayInterval","queuing","offlineQueueLoader","Array","isArray","concat","filter","controller","hasOwnProperty","renewAllSubscriptions","subscriptions","roomId","subscriptionId","subscription","renew","callback","uuid","KuzzleDataCollection","KuzzleSecurity","KuzzleMemoryStorage","KuzzleUser","networkWrapper","Kuzzle","host","options","defineProperties","collections","value","writable","connectCB","eventListeners","connected","lastEmitted","listeners","disconnected","reconnected","jwtTokenExpired","loginAttempt","offlineQueuePush","offlineQueuePop","eventTimeout","state","pending","autoReconnect","enumerable","defaultIndex","reconnectionDelay","wsPort","ioPort","sslConnection","autoQueue","autoReplay","autoResubscribe","headers","metadata","queueFilter","opt","getOwnPropertyDescriptor","offlineMode","defineProperty","header","errorMessagePrefix","event","args","prototype","slice","arguments","eventProperties","listener","process","nextTick","fn","apply","connect","bluebird","promisifyAll","suffix","name","func","target","passes","whitelist","indexOf","onConnect","onConnectError","connectionError","internal","onDisconnect","disconnect","onReconnect","reconnect","checkToken","err","res","valid","setJwtToken","token","success","result","jwt","JSON","stringify","getJwtToken","login","strategy","credentials","expiresIn","body","queuable","logout","v4","callbackRequired","whoAmI","security","_id","_source","getMyRights","hits","updateSelf","content","data","queryArgs","addListener","listenerId","knownEvents","listenerType","isValid","toString","push","getAllStatistics","getStatistics","timestamp","queryCB","startTime","dataCollectionFactory","collection","flushQueue","listCollections","collectionType","arg","type","listIndexes","indexes","close","getServerInfo","serverInfo","refreshIndex","getAutoRefresh","setAutoRefresh","autoRefresh","attr","object","meta","addHeaders","authorization","removeAllListeners","eventName","removeListener","replayQueue","setDefaultIndex","setHeaders","replace","startQueuing","stopQueuing","KuzzleSecurityDocument","kuzzleSecurity","kuzzle","setContent","serialize","buildQueryArgs","deleteActionName","update","updateActionName","create","constructor","setProfiles","profileIds","addProfile","profileId","save","getProfiles","_window","setupBrowser","_crypto","crypto","msCrypto","_rng","getRandomValues","_rnds8","Uint8Array","_whatwgRNG","e","_rnds","_mathRNG","r","random","console","warn","setupNode","require","_rb","randomBytes","_nodeRNG","parse","s","buf","offset","ii","toLowerCase","oct","_hexToByte","unparse","bth","_byteToHex","v1","b","clockseq","_clockseq","msecs","getTime","nsecs","_lastNSecs","dt","_lastMSecs","tl","tmh","node","_nodeId","n","BufferClass","rnds","rng","_previousRoot","Buffer","substr","_seedBytes","noConflict","window","blacklist","KuzzleDocument","KuzzleDataMapping","KuzzleRoom","advancedSearch","filters","documents","doc","newDocument","version","_version","total","count","createDocument","document","updateIfExist","deleteDocument","ids","fetchDocument","documentId","fetchAllDocuments","from","size","getMapping","kuzzleMapping","refresh","publishMessage","replaceDocument","subscribe","room","truncate","updateDocument","documentFactory","roomFactory","dataMappingFactory","mapping","kuzzleDataCollection","properties","mappings","set","field","dataCollection","publish","values","bind","keyVal","idOrKeys","commands","append","bgrewriteaof","bgsave","bitcount","bitop","bitpos","__opts__","blpop","brpoplpush","dbsize","decrby","del","discard","exec","exists","expire","expireat","flushdb","getbit","getrange","hdel","hexists","hincrby","hmset","hset","info","lastsave","lindex","linsert","lpush","lrange","lrem","lset","ltrim","mset","multi","pexpire","pexpireat","pfadd","pfmerge","ping","psetex","randomkey","rename","renamenx","restore","rpoplpush","sadd","sdiffstore","setbit","setex","setrange","sinterstore","sismember","smove","sort","spop","srem","sunionstore","unwatch","wait","zadd","zcount","zincrby","zinterstore","zlexcount","zrange","zrangebylex","zrangebyscore","zrem","zremrangebylex","zremrangebyscore","zrevrangebylex","zrevrangebyscore","zrevrank","decr","get","dump","hgetall","hkeys","hlen","hstrlen","hvals","incr","llen","lpop","persist","pttl","rpop","scard","smembers","strlen","ttl","zcard","getset","lpushx","mget","pfcount","sdiff","sinter","sunion","watch","incrby","incrbyfloat","brpop","hget","hmget","hsetnx","msetnx","rpush","hincrbyfloat","srandmember","zrevrange","zscore","command","pop","v","channel","lastRenewal","notifier","queue","renewalDelay","scope","subscribing","users","subscribeToSelf","notificationCallback","element","isReady","subscribeQuery","unsubscribe","on","interval","off","setInterval","clearInterval","WebSocket","io","code","SocketIO","port","ssl","socket","reconnection","forceNew","payload","emit","WSBrowsers","client","retrying","onopen","poke","onclose","onClientError","onerror","onmessage","keep","findIndex","readyState","OPEN","KuzzleProfile","policies","addPolicy","policy","roleId","setPolicies","map","getPolicies","KuzzleRole","getRole","searchRoles","roles","createRole","replaceIfExist","updateRole","deleteRole","roleFactory","getProfile","searchProfiles","profiles","createProfile","updateProfile","updatedContent","property","deleteProfile","profileFactory","getUser","searchUsers","createUser","updateUser","deleteUser","userFactory","isActionAllowed","rights","filteredRights","right","some","item","getUserRights","userId"],"mappings":"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","file":"kuzzle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar\n\t  uuid = __webpack_require__(3),\n\t  KuzzleDataCollection = __webpack_require__(4),\n\t  KuzzleSecurity = __webpack_require__(14),\n\t  KuzzleMemoryStorage = __webpack_require__(7),\n\t  KuzzleUser = __webpack_require__(2),\n\t  networkWrapper = __webpack_require__(9);\n\t\n\t/**\n\t * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n\t *\n\t * @callback responseCallback\n\t * @param {Object} err - Error object, NULL if the query is successful\n\t * @param {Object} [data] - The content of the query response\n\t */\n\t\n\t/**\n\t * Kuzzle object constructor.\n\t *\n\t * @constructor\n\t * @param host - Server name or IP Address to the Kuzzle instance\n\t * @param [options] - Connection options\n\t * @param {responseCallback} [cb] - Handles connection response\n\t * @constructor\n\t */\n\tmodule.exports = Kuzzle = function (host, options, cb) {\n\t  var self = this;\n\t\n\t  if (!(this instanceof Kuzzle)) {\n\t    return new Kuzzle(host, options, cb);\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  if (!host || host === '') {\n\t    throw new Error('host argument missing');\n\t  }\n\t\n\t  Object.defineProperties(this, {\n\t    // 'private' properties\n\t    collections: {\n\t      value: {},\n\t      writable: true\n\t    },\n\t    connectCB: {\n\t      value: cb\n\t    },\n\t    eventListeners: {\n\t      value: {\n\t        connected: {lastEmitted: null, listeners: []},\n\t        error: {lastEmitted: null, listeners: []},\n\t        disconnected: {lastEmitted: null, listeners: []},\n\t        reconnected: {lastEmitted: null, listeners: []},\n\t        jwtTokenExpired: {lastEmitted: null, listeners: []},\n\t        loginAttempt: {lastEmitted: null, listeners: []},\n\t        offlineQueuePush: {listeners: []},\n\t        offlineQueuePop: {listeners: []}\n\t      }\n\t    },\n\t    eventTimeout: {\n\t      value: 200\n\t    },\n\t    queuing: {\n\t      value: false,\n\t      writable: true\n\t    },\n\t    requestHistory: {\n\t      value: {},\n\t      writable: true\n\t    },\n\t    state: {\n\t      value: 'initializing',\n\t      writable: true\n\t    },\n\t    subscriptions: {\n\t      /*\n\t       Contains the centralized subscription list in the following format:\n\t          pending: <number of pending subscriptions>\n\t          'roomId': {\n\t            kuzzleRoomID_1: kuzzleRoomInstance_1,\n\t            kuzzleRoomID_2: kuzzleRoomInstance_2,\n\t            kuzzleRoomID_...: kuzzleRoomInstance_...\n\t          }\n\t\n\t       This was made to allow multiple subscriptions on the same set of filters, something that Kuzzle does not permit.\n\t       This structure also allows renewing subscriptions after a connection loss\n\t       */\n\t      value: {\n\t        pending: {}\n\t      },\n\t      writable: true\n\t    },\n\t    // read-only properties\n\t    autoReconnect: {\n\t      value: (options && typeof options.autoReconnect === 'boolean') ? options.autoReconnect : true,\n\t      enumerable: true\n\t    },\n\t    defaultIndex: {\n\t      value: (options && typeof options.defaultIndex === 'string') ? options.defaultIndex : undefined,\n\t      writable: true,\n\t      enumerable: true\n\t    },\n\t    reconnectionDelay: {\n\t      value: (options && typeof options.reconnectionDelay === 'number') ? options.reconnectionDelay : 1000,\n\t      enumerable: true\n\t    },\n\t    host: {\n\t      value: host,\n\t      enumerable: true\n\t    },\n\t    wsPort: {\n\t      value: (options && typeof options.wsPort === 'number') ? options.wsPort : 7513,\n\t      enumerable: true\n\t    },\n\t    ioPort: {\n\t      value: (options && typeof options.ioPort === 'number') ? options.ioPort : 7512,\n\t      enumerable: true\n\t    },\n\t    sslConnection: {\n\t      value: (options && typeof options.sslConnection === 'boolean') ? options.sslConnection : false,\n\t      enumerable: true\n\t    },\n\t    autoQueue: {\n\t      value: false,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    autoReplay: {\n\t      value: false,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    autoResubscribe: {\n\t      value: true,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    headers: {\n\t      value: {},\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    metadata: {\n\t      value: {},\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    /*\n\t      Offline queue use the following format:\n\t            [\n\t              {\n\t                ts: <query timestamp>,\n\t                query: 'query',\n\t                cb: callbackFunction\n\t              }\n\t            ]\n\t     */\n\t    offlineQueue: {\n\t      value: [],\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    queueFilter: {\n\t      value: null,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    queueMaxSize: {\n\t      value: 500,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    queueTTL: {\n\t      value: 120000,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    replayInterval: {\n\t      value: 10,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    jwtToken: {\n\t      value: undefined,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    offlineQueueLoader: {\n\t      value: null,\n\t      enumerable: true,\n\t      writable: true\n\t    }\n\t  });\n\t\n\t  if (options) {\n\t    Object.keys(options).forEach(function (opt) {\n\t      if (self.hasOwnProperty(opt) && Object.getOwnPropertyDescriptor(self, opt).writable) {\n\t        self[opt] = options[opt];\n\t      }\n\t    });\n\t\n\t    if (options.offlineMode === 'auto' && this.autoReconnect) {\n\t      this.autoQueue = this.autoReplay = this.autoResubscribe = true;\n\t    }\n\t  }\n\t\n\t  // Helper function ensuring that this Kuzzle object is still valid before performing a query\n\t  Object.defineProperty(this, 'isValid', {\n\t    value: function () {\n\t      if (self.state === 'disconnected') {\n\t        throw new Error('This Kuzzle object has been invalidated. Did you try to access it after a disconnect call?');\n\t      }\n\t    }\n\t  });\n\t\n\t  // Helper function copying headers to the query data\n\t  Object.defineProperty(this, 'addHeaders', {\n\t    value: function (query, headers) {\n\t      Object.keys(headers).forEach(function (header) {\n\t        if (!query[header]) {\n\t          query[header] = headers[header];\n\t        }\n\t      });\n\t\n\t      return query;\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Some methods (mainly read queries) require a callback function. This function exists to avoid repetition of code,\n\t   * and is called by these methods\n\t   */\n\t  Object.defineProperty(this, 'callbackRequired', {\n\t    value: function (errorMessagePrefix, callback) {\n\t      if (!callback || typeof callback !== 'function') {\n\t        throw new Error(errorMessagePrefix + ': a callback argument is required for read queries');\n\t      }\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Create an attribute security that embed all methods to manage Role, Profile and User\n\t   */\n\t  Object.defineProperty(this, 'security', {\n\t    value: new KuzzleSecurity(this),\n\t    enumerable: true\n\t  });\n\t\n\t  /**\n\t   * Emit an event to all registered listeners\n\t   * An event cannot be emitted multiple times before a timeout has been reached.\n\t   */\n\t  Object.defineProperty(this, 'emitEvent', {\n\t    value: function emitEvent(event) {\n\t      var\n\t        now = Date.now(),\n\t        args = Array.prototype.slice.call(arguments, 1),\n\t        eventProperties = this.eventListeners[event];\n\t\n\t      if (eventProperties.lastEmitted && eventProperties.lastEmitted >= now - this.eventTimeout) {\n\t        return false;\n\t      }\n\t\n\t      eventProperties.listeners.forEach(function (listener) {\n\t        process.nextTick(function () {\n\t          listener.fn.apply(undefined, args);\n\t        });\n\t      });\n\t\n\t      // Events without the 'lastEmitted' property can be emitted without minimum time between emissions\n\t      if (eventProperties.lastEmitted !== undefined) {\n\t        eventProperties.lastEmitted = now;\n\t      }\n\t    }\n\t  });\n\t\n\t  Object.defineProperty(this, 'memoryStorage', {\n\t    value: new KuzzleMemoryStorage(this),\n\t    enumerable: true\n\t  });\n\t\n\t\n\t  if (!options || !options.connect || options.connect === 'auto') {\n\t    this.connect();\n\t  } else {\n\t    this.state = 'ready';\n\t  }\n\t\n\t  cleanHistory(this.requestHistory);\n\t\n\t  if (this.bluebird) {\n\t    return this.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var whitelist = ['getAllStatistics', 'getServerInfo', 'getStatistics',\n\t          'listCollections', 'listIndexes', 'login', 'logout', 'now', 'query',\n\t          'checkToken', 'whoAmI', 'updateSelf', 'getMyRights',\n\t          'refreshIndex', 'getAutoRefresh', 'setAutoRefresh'\n\t        ];\n\t\n\t        return passes && whitelist.indexOf(name) !== -1;\n\t      }\n\t    });\n\t  }\n\t};\n\t\n\t/**\n\t * Connects to a Kuzzle instance using the provided host name.\n\t * @returns {Object} this\n\t */\n\tKuzzle.prototype.connect = function () {\n\t  var self = this;\n\t\n\t  if (!self.network) {\n\t    self.network = networkWrapper(self.host, self.wsPort, self.ioPort, self.sslConnection);\n\t  }\n\t\n\t  if (['initializing', 'ready', 'disconnected', 'error', 'offline'].indexOf(this.state) === -1) {\n\t    if (self.connectCB) {\n\t      self.connectCB(null, self);\n\t    }\n\t    return self;\n\t  }\n\t\n\t  self.state = 'connecting';\n\t  self.network.connect(self.autoReconnect, self.reconnectionDelay);\n\t\n\t  self.network.onConnect(function () {\n\t    self.state = 'connected';\n\t    renewAllSubscriptions.call(self);\n\t    dequeue.call(self);\n\t    self.emitEvent('connected');\n\t\n\t    if (self.connectCB) {\n\t      self.connectCB(null, self);\n\t    }\n\t  });\n\t\n\t  self.network.onConnectError(function (error) {\n\t    var connectionError = new Error('Unable to connect to kuzzle proxy server at \"' + self.host + '\"');\n\t\n\t    connectionError.internal = error;\n\t    self.state = 'error';\n\t    self.emitEvent('error', connectionError);\n\t\n\t    if (self.connectCB) {\n\t      self.connectCB(connectionError);\n\t    }\n\t  });\n\t\n\t  self.network.onDisconnect(function () {\n\t    self.state = 'offline';\n\t\n\t    if (!self.autoReconnect) {\n\t      self.disconnect();\n\t    }\n\t\n\t    if (self.autoQueue) {\n\t      self.queuing = true;\n\t    }\n\t\n\t    self.emitEvent('disconnected');\n\t  });\n\t\n\t  self.network.onReconnect(function () {\n\t    var reconnect = function () {\n\t      // renew subscriptions\n\t      if (self.autoResubscribe) {\n\t        renewAllSubscriptions.call(self);\n\t      }\n\t\n\t      // replay queued requests\n\t      if (self.autoReplay) {\n\t        cleanQueue.call(self);\n\t        dequeue.call(self);\n\t      }\n\t\n\t      // alert listeners\n\t      self.emitEvent('reconnected');\n\t    };\n\t\n\t    self.state = 'connected';\n\t\n\t    if (self.jwtToken) {\n\t      self.checkToken(self.jwtToken, function (err, res) {\n\t        // shouldn't obtain an error but let's invalidate the token anyway\n\t        if (err || !res.valid) {\n\t          self.jwtToken = undefined;\n\t          self.emitEvent('jwtTokenExpired');\n\t        }\n\t\n\t        reconnect();\n\t      });\n\t    } else {\n\t      reconnect();\n\t    }\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Set the jwtToken used to query kuzzle\n\t * @param token\n\t * @returns {Kuzzle}\n\t */\n\tKuzzle.prototype.setJwtToken = function(token) {\n\t  if (typeof token === 'string') {\n\t    this.jwtToken = token;\n\t  } else if (typeof token === 'object') {\n\t    if (token.result && token.result.jwt && typeof token.result.jwt === 'string') {\n\t      this.jwtToken = token.result.jwt;\n\t    } else {\n\t      this.emitEvent('loginAttempt', {\n\t        success: false,\n\t        error: 'Cannot find a valid JWT token in the following object: ' + JSON.stringify(token)\n\t      });\n\t\n\t      return this;\n\t    }\n\t  } else {\n\t    this.emitEvent('loginAttempt', {success: false, error: 'Invalid token argument: ' + token});\n\t    return this;\n\t  }\n\t\n\t  renewAllSubscriptions.call(this);\n\t  this.emitEvent('loginAttempt', {success: true});\n\t  return this;\n\t};\n\t\n\t/**\n\t * Get the jwtToken used by kuzzle\n\t * @returns {Kuzzle}\n\t */\n\tKuzzle.prototype.getJwtToken = function() {\n\t  return this.jwtToken;\n\t};\n\t\n\t/**\n\t * Send login request to kuzzle with credentials\n\t * If login success, store the jwtToken into kuzzle object\n\t *\n\t * @param strategy\n\t * @param credentials\n\t * @param expiresIn\n\t * @param cb\n\t */\n\tKuzzle.prototype.login = function (strategy) {\n\t  var\n\t    self = this,\n\t    request = {\n\t      strategy: strategy\n\t    },\n\t    credentials,\n\t    cb = null;\n\t\n\t  // Handle arguments (credentials, expiresIn, cb)\n\t  if (arguments[1]) {\n\t    if (typeof arguments[1] === 'object') {\n\t      credentials = arguments[1];\n\t    } else if (typeof arguments[1] === 'number' || typeof arguments[1] === 'string') {\n\t      request.expiresIn = arguments[1];\n\t    } else if (typeof arguments[1] === 'function') {\n\t      cb = arguments[1];\n\t    }\n\t  }\n\t  if (arguments[2]) {\n\t    if (typeof arguments[2] === 'number' || typeof arguments[2] === 'string') {\n\t      request.expiresIn = arguments[2];\n\t    } else if (typeof arguments[2] === 'function') {\n\t      cb = arguments[2];\n\t    }\n\t  }\n\t  if (arguments[3] && typeof arguments[3] === 'function') {\n\t    cb = arguments[3];\n\t  }\n\t\n\t  if (typeof credentials === 'object') {\n\t    Object.keys(credentials).forEach(function (key) {\n\t      request[key] = credentials[key];\n\t    });\n\t  }\n\t\n\t  this.query({controller: 'auth', action: 'login'}, {body: request}, {queuable: false}, function(error, response) {\n\t    if (!error) {\n\t      if (response.result.jwt) {\n\t        self.setJwtToken(response.result.jwt);\n\t      }\n\t\n\t      cb && cb(null, response.result);\n\t    }\n\t    else {\n\t      cb && cb(error);\n\t      self.emitEvent('loginAttempt', {success: false, error: error.message});\n\t    }\n\t  });\n\t};\n\t\n\t/**\n\t * Send logout request to kuzzle with jwtToken.\n\t *\n\t * @param cb\n\t * @returns {Kuzzle}\n\t */\n\tKuzzle.prototype.logout = function (cb) {\n\t  var\n\t    self = this,\n\t    request = {\n\t      action: 'logout',\n\t      controller: 'auth',\n\t      requestId: uuid.v4(),\n\t      body: {}\n\t    };\n\t\n\t  this.query({controller: 'auth', action: 'logout'}, request, {queuable: false}, typeof cb !== 'function' ? null : function(error) {\n\t    if (error === null) {\n\t      self.jwtToken = undefined;\n\t      cb(null, self);\n\t    }\n\t    else {\n\t      cb(error);\n\t    }\n\t  });\n\t\n\t  return self;\n\t};\n\t\n\t/**\n\t * Checks whether a given jwt token still represents a valid session in Kuzzle.\n\t *\n\t * @param  {string}   token     The jwt token to check\n\t * @param  {function} callback  The callback to be called when the response is\n\t *                              available. The signature is `function(error, response)`.\n\t */\n\tKuzzle.prototype.checkToken = function (token, callback) {\n\t  var\n\t    request = {\n\t      body: {\n\t        token: token\n\t      }\n\t    };\n\t\n\t  this.callbackRequired('Kuzzle.checkToken', callback);\n\t\n\t  this.query({controller: 'auth', action: 'checkToken'}, request, {queuable: false}, function (err, response) {\n\t    if (err) {\n\t      return callback(err);\n\t    }\n\t\n\t    callback(null, response.result);\n\t  });\n\t};\n\t\n\t/**\n\t * Fetches the current user.\n\t *\n\t * @param  {function} callback  The callback to be called when the response is\n\t *                              available. The signature is `function(error, response)`.\n\t */\n\tKuzzle.prototype.whoAmI = function (callback) {\n\t  var self = this;\n\t\n\t  self.callbackRequired('Kuzzle.whoAmI', callback);\n\t\n\t  self.query({controller: 'auth', action: 'getCurrentUser'}, {}, {}, function (err, response) {\n\t    if (err) {\n\t      return callback(err);\n\t    }\n\t\n\t    callback(null, new KuzzleUser(self.security, response.result._id, response.result._source));\n\t  });\n\t};\n\t\n\t/**\n\t * Gets the rights array of the currently logged user.\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param  {function} cb The callback containing the normalized array of rights.\n\t */\n\tKuzzle.prototype.getMyRights = function (options, cb) {\n\t  var self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.callbackRequired('Kuzzle.getMyRights', cb);\n\t\n\t  self.query({controller: 'auth', action:'getMyRights'}, {}, options, function (err, res) {\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    cb(null, res.result.hits);\n\t  });\n\t};\n\t\n\t/**\n\t * Update current user in Kuzzle.\n\t *\n\t * @param {object} content - a plain javascript object representing the user's modification\n\t * @param {object} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - (optional) Handles the query response\n\t * @returns {Kuzzle} this object\n\t */\n\tKuzzle.prototype.updateSelf = function (content, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {},\n\t    queryArgs = {controller: 'auth', action: 'updateSelf'};\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data.body = content;\n\t\n\t  self.query(queryArgs, data, options, cb && function (err, res) {\n\t    cb(err, err ? undefined : res.result);\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Clean up the queue, ensuring the queryTTL and queryMaxSize properties are respected\n\t */\n\tfunction cleanQueue () {\n\t  var\n\t    self = this,\n\t    now = Date.now(),\n\t    lastDocumentIndex = -1;\n\t\n\t  if (self.queueTTL > 0) {\n\t    self.offlineQueue.forEach(function (query, index) {\n\t      if (query.ts < now - self.queueTTL) {\n\t        lastDocumentIndex = index;\n\t      }\n\t    });\n\t\n\t    if (lastDocumentIndex !== -1) {\n\t      self.offlineQueue\n\t        .splice(0, lastDocumentIndex + 1)\n\t        .forEach(function (droppedRequest) {\n\t          self.emitEvent('offlineQueuePop', droppedRequest.query);\n\t        });\n\t    }\n\t  }\n\t\n\t  if (self.queueMaxSize > 0 && self.offlineQueue.length > self.queueMaxSize) {\n\t    self.offlineQueue\n\t      .splice(0, self.offlineQueue.length - self.queueMaxSize)\n\t      .forEach(function (droppedRequest) {\n\t        self.emitEvent('offlineQueuePop', droppedRequest.query);\n\t      });\n\t  }\n\t}\n\t\n\t\n\t/**\n\t * Clean history from requests made more than 10s ago\n\t */\n\tfunction cleanHistory (requestHistory) {\n\t  var\n\t    now = Date.now();\n\t\n\t  Object.keys(requestHistory).forEach(function (key) {\n\t    if (requestHistory[key] < now - 10000) {\n\t      delete requestHistory[key];\n\t    }\n\t  });\n\t\n\t  setTimeout(function () {\n\t    cleanHistory(requestHistory);\n\t  }, 1000);\n\t}\n\t\n\t/**\n\t * Emit a request to Kuzzle\n\t *\n\t * @param {object} request\n\t * @param {responseCallback} [cb]\n\t */\n\tfunction emitRequest (request, cb) {\n\t  var\n\t    self = this;\n\t\n\t  if (self.jwtToken !== undefined || cb) {\n\t    self.network.once(request.requestId, function (response) {\n\t      var error = null;\n\t\n\t      if (request.action !== 'logout' && response.error && response.error.message === 'Token expired') {\n\t        self.jwtToken = undefined;\n\t        self.emitEvent('jwtTokenExpired', request, cb);\n\t      }\n\t\n\t      if (cb) {\n\t        if (response.error) {\n\t          error = new Error(response.error.message);\n\t          Object.assign(error, response.error);\n\t          error.status = response.status;\n\t        }\n\t        \n\t        cb(error, response);\n\t      }\n\t    });\n\t  }\n\t\n\t  this.network.send(request);\n\t\n\t  // Track requests made to allow KuzzleRoom.subscribeToSelf to work\n\t  self.requestHistory[request.requestId] = Date.now();\n\t}\n\t\n\t/**\n\t * Play all queued requests, in order.\n\t */\n\tfunction dequeue () {\n\t  var\n\t    self = this,\n\t    additionalQueue,\n\t    uniqueQueue = {},\n\t    dequeuingProcess = function () {\n\t      if (self.offlineQueue.length > 0) {\n\t        emitRequest.call(self, self.offlineQueue[0].query, self.offlineQueue[0].cb);\n\t        self.emitEvent('offlineQueuePop', self.offlineQueue.shift());\n\t\n\t        setTimeout(function () {\n\t          dequeuingProcess();\n\t        }, Math.max(0, self.replayInterval));\n\t      } else {\n\t        self.queuing = false;\n\t      }\n\t    };\n\t\n\t  if (self.offlineQueueLoader) {\n\t    if (typeof self.offlineQueueLoader !== 'function') {\n\t      throw new Error('Invalid value for offlineQueueLoader property. Expected: function. Got: ' + typeof self.offlineQueueLoader);\n\t    }\n\t\n\t    additionalQueue = self.offlineQueueLoader();\n\t    if (Array.isArray(additionalQueue)) {\n\t      self.offlineQueue = additionalQueue\n\t        .concat(self.offlineQueue)\n\t        .filter(function (request) {\n\t          // throws if the query object does not contain required attributes\n\t          if (!request.query || request.query.requestId === undefined || !request.query.action || !request.query.controller) {\n\t            throw new Error('Invalid offline queue request. One or more missing properties: requestId, action, controller.');\n\t          }\n\t\n\t          return uniqueQueue.hasOwnProperty(request.query.requestId) ? false : (uniqueQueue[request.query.requestId] = true);\n\t        });\n\t    } else {\n\t      throw new Error('Invalid value returned by the offlineQueueLoader function. Expected: array. Got: ' + typeof additionalQueue);\n\t    }\n\t  }\n\t\n\t  dequeuingProcess();\n\t}\n\t\n\t/**\n\t * Renew all registered subscriptions. Triggered either by a successful connection/reconnection or by a\n\t * successful login attempt\n\t */\n\tfunction renewAllSubscriptions() {\n\t  var self = this;\n\t\n\t  Object.keys(self.subscriptions).forEach(function (roomId) {\n\t    Object.keys(self.subscriptions[roomId]).forEach(function (subscriptionId) {\n\t      var subscription = self.subscriptions[roomId][subscriptionId];\n\t      subscription.renew(subscription.callback);\n\t    });\n\t  });\n\t}\n\t\n\t/**\n\t * Adds a listener to a Kuzzle global event. When an event is fired, listeners are called in the order of their\n\t * insertion.\n\t *\n\t * The ID returned by this function is required to remove this listener at a later time.\n\t *\n\t * @param {string} event - name of the global event to subscribe to (see the 'eventListeners' object property)\n\t * @param {function} listener - callback to invoke each time an event is fired\n\t * @returns {string} Unique listener ID\n\t */\n\tKuzzle.prototype.addListener = function(event, listener) {\n\t  var\n\t    knownEvents = Object.keys(this.eventListeners),\n\t    listenerType = typeof listener,\n\t    listenerId;\n\t\n\t  this.isValid();\n\t\n\t  if (knownEvents.indexOf(event) === -1) {\n\t    throw new Error('[' + event + '] is not a known event. Known events: ' + knownEvents.toString());\n\t  }\n\t\n\t  if (listenerType !== 'function') {\n\t    throw new Error('Invalid listener type: expected a function, got a ' + listenerType);\n\t  }\n\t\n\t  listenerId = uuid.v4();\n\t  this.eventListeners[event].listeners.push({id: listenerId, fn: listener});\n\t  return listenerId;\n\t};\n\t\n\t\n\t/**\n\t * Kuzzle monitors active connections, and ongoing/completed/failed requests.\n\t * This method returns all available statistics from Kuzzle.\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzle.prototype.getAllStatistics = function (options, cb) {\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.callbackRequired('Kuzzle.getAllStatistics', cb);\n\t\n\t  this.query({controller:'admin', action: 'getAllStats'}, {}, options, function (err, res) {\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    cb(null, res.result.hits);\n\t  });\n\t};\n\t\n\t/**\n\t * Kuzzle monitors active connections, and ongoing/completed/failed requests.\n\t * This method allows getting either the last statistics frame, or a set of frames starting from a provided timestamp.\n\t *\n\t * @param {number} timestamp -  Epoch time. Starting time from which the frames are to be retrieved\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzle.prototype.getStatistics = function (timestamp, options, cb) {\n\t  var\n\t    queryCB,\n\t    body;\n\t\n\t  if (!cb) {\n\t    if (arguments.length === 1) {\n\t      cb = arguments[0];\n\t      options = null;\n\t      timestamp = null;\n\t    } else {\n\t      cb = arguments[1];\n\t      if (typeof arguments[0] === 'object') {\n\t        options = arguments[0];\n\t        timestamp = null;\n\t      } else {\n\t        timestamp = arguments[0];\n\t        options = null;\n\t      }\n\t    }\n\t  }\n\t\n\t  queryCB = function (err, res) {\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    cb(null, timestamp ? res.result.hits : [res.result]);\n\t  };\n\t\n\t  this.callbackRequired('Kuzzle.getStatistics', cb);\n\t\n\t  body = timestamp ? {body: {startTime: timestamp}} : {};\n\t  this.query({controller: 'admin', action: timestamp ? 'getStats' : 'getLastStats'}, body, options, queryCB);\n\t};\n\t\n\t/**\n\t * Create a new instance of a KuzzleDataCollection object.\n\t * If no index is specified, takes the default index.\n\t *\n\t * @param {string} collection - The name of the data collection you want to manipulate\n\t * @param {string} [index] - The name of the data index containing the data collection\n\t * @returns {object} A KuzzleDataCollection instance\n\t */\n\tKuzzle.prototype.dataCollectionFactory = function(collection, index) {\n\t  this.isValid();\n\t\n\t  if (!index) {\n\t    if (!this.defaultIndex) {\n\t      throw new Error('Unable to create a new data collection object: no index specified');\n\t    }\n\t\n\t    index = this.defaultIndex;\n\t  }\n\t\n\t  if (typeof index !== 'string' || typeof collection !== 'string') {\n\t    throw new Error('Invalid index or collection argument: string expected');\n\t  }\n\t\n\t  if (!this.collections[index]) {\n\t    this.collections[index] = {};\n\t  }\n\t\n\t  if (!this.collections[index][collection]) {\n\t    this.collections[index][collection] = new KuzzleDataCollection(this, collection, index);\n\t  }\n\t\n\t  return this.collections[index][collection];\n\t};\n\t\n\t/**\n\t * Empties the offline queue without replaying it.\n\t *\n\t * @returns {Kuzzle}\n\t */\n\tKuzzle.prototype.flushQueue = function () {\n\t  this.offlineQueue = [];\n\t  return this;\n\t};\n\t\n\t/**\n\t * Returns the list of known persisted data collections.\n\t *\n\t * @param {string} [index] - Index containing collections to be listed\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzle.prototype.listCollections = function () {\n\t  var\n\t    collectionType = 'all',\n\t    index,\n\t    options,\n\t    cb,\n\t    args = Array.prototype.slice.call(arguments);\n\t\n\t  args.forEach(function(arg) {\n\t    switch (typeof arg) {\n\t      case 'string':\n\t        index = arg;\n\t        break;\n\t      case 'object':\n\t        options = arg;\n\t        break;\n\t      case 'function':\n\t        cb = arg;\n\t        break;\n\t    }\n\t  });\n\t\n\t  if (!index) {\n\t    if (!this.defaultIndex) {\n\t      throw new Error('Kuzzle.listCollections: index required');\n\t    }\n\t\n\t    index = this.defaultIndex;\n\t  }\n\t\n\t  this.callbackRequired('Kuzzle.listCollections', cb);\n\t\n\t  if (options && options.type) {\n\t    collectionType = options.type;\n\t  }\n\t\n\t  this.query({index: index, controller: 'read', action: 'listCollections'}, {body: {type: collectionType}}, options, function (err, res) {\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    cb(null, res.result.collections);\n\t  });\n\t};\n\t\n\t/**\n\t * Returns the list of existing indexes in Kuzzle\n\t *\n\t * @param {object} [options] - Optional arguments\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzle.prototype.listIndexes = function (options, cb) {\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.callbackRequired('Kuzzle.listIndexes', cb);\n\t\n\t  this.query({controller: 'read', action: 'listIndexes'}, {}, options, function (err, res) {\n\t    cb(err, err ? undefined : res.result.indexes);\n\t  });\n\t};\n\t\n\t/**\n\t * Disconnects from Kuzzle and invalidate this instance.\n\t */\n\tKuzzle.prototype.disconnect = function () {\n\t  var collection;\n\t\n\t  this.logout();\n\t\n\t  this.state = 'disconnected';\n\t  this.network.close();\n\t\n\t  for (collection in this.collections) {\n\t    if (this.collections.hasOwnProperty(collection)) {\n\t      delete this.collections[collection];\n\t    }\n\t  }\n\t};\n\t\n\t/**\n\t * Returns the server informations\n\t *\n\t * @param {object} [options] - Optional arguments\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzle.prototype.getServerInfo = function (options, cb) {\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.callbackRequired('Kuzzle.getServerInfo', cb);\n\t\n\t  this.query({controller: 'read', action: 'serverInfo'}, {}, options, function (err, res) {\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    cb(null, res.result.serverInfo);\n\t  });\n\t};\n\t\n\t/**\n\t * Forces an index refresh\n\t *\n\t * @param {string} index - The index to refresh. Defaults to Kuzzle.defaultIndex\n\t * @param {object} options - Optional arguments\n\t * @param {responseCallback} cb - Handles the query response\n\t * @returns {Kuzzle}\n\t */\n\tKuzzle.prototype.refreshIndex = function () {\n\t  var\n\t    index,\n\t    options,\n\t    cb;\n\t\n\t  Array.prototype.slice.call(arguments).forEach(function(arg) {\n\t    switch (typeof arg) {\n\t      case 'string':\n\t        index = arg;\n\t        break;\n\t      case 'object':\n\t        options = arg;\n\t        break;\n\t      case 'function':\n\t        cb = arg;\n\t        break;\n\t    }\n\t  });\n\t\n\t  if (!index) {\n\t    if (!this.defaultIndex) {\n\t      throw new Error('Kuzzle.refreshIndex: index required');\n\t    }\n\t    index = this.defaultIndex;\n\t  }\n\t\n\t  this.query({ index: index, controller: 'admin', action: 'refreshIndex'}, {}, options, cb);\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Returns de current autoRefresh status for the given index\n\t *\n\t * @param {string} index - The index to get the status from. Defaults to Kuzzle.defaultIndex\n\t * @param {object} options - Optinal arguments\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzle.prototype.getAutoRefresh = function () {\n\t  var\n\t    index,\n\t    options,\n\t    cb;\n\t\n\t  Array.prototype.slice.call(arguments).forEach(function (arg) {\n\t    switch (typeof arg) {\n\t      case 'string':\n\t        index = arg;\n\t        break;\n\t      case 'object':\n\t        options = arg;\n\t        break;\n\t      case 'function':\n\t        cb = arg;\n\t        break;\n\t    }\n\t  });\n\t\n\t  if (!index) {\n\t    if (!this.defaultIndex) {\n\t      throw new Error('Kuzzle.getAutoRefresh: index required');\n\t    }\n\t    index = this.defaultIndex;\n\t  }\n\t\n\t  this.callbackRequired('Kuzzle.getAutoRefresh', cb);\n\t  this.query({ index: index, controller: 'admin', action: 'getAutoRefresh'}, {}, options, cb);\n\t};\n\t\n\t/**\n\t * (Un)Sets the autoRefresh flag on the given index\n\t *\n\t * @param {string} index - the index to modify. Defaults to Kuzzle.defaultIndex\n\t * @param {boolean} autoRefresh - The autoRefresh value to set\n\t * @param {object} options - Optional arguments\n\t * @param {responseCallback} cb - Handles the query result\n\t * @returns {object} this\n\t */\n\tKuzzle.prototype.setAutoRefresh = function () {\n\t  var\n\t    index,\n\t    autoRefresh,\n\t    options,\n\t    cb;\n\t\n\t  Array.prototype.slice.call(arguments).forEach(function (arg) {\n\t    switch (typeof arg) {\n\t      case 'string':\n\t        index = arg;\n\t        break;\n\t      case 'boolean':\n\t        autoRefresh = arg;\n\t        break;\n\t      case 'object':\n\t        options = arg;\n\t        break;\n\t      case 'function':\n\t        cb = arg;\n\t        break;\n\t    }\n\t  });\n\t\n\t  if (!index) {\n\t    if (!this.defaultIndex) {\n\t      throw new Error('Kuzzle.setAutoRefresh: index required');\n\t    }\n\t    index = this.defaultIndex;\n\t  }\n\t\n\t  if (autoRefresh === undefined) {\n\t    throw new Error('Kuzzle.setAutoRefresh: autoRefresh value is required');\n\t  }\n\t\n\t  this.query({ index: index, controller: 'admin', action: 'setAutoRefresh'}, { body: { autoRefresh: autoRefresh }}, options, cb);\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Return the current Kuzzle's UTC Epoch time, in milliseconds\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzle.prototype.now = function (options, cb) {\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.callbackRequired('Kuzzle.now', cb);\n\t\n\t  this.query({controller: 'read', action: 'now'}, {}, options, function (err, res) {\n\t    cb(err, res && res.result.now);\n\t  });\n\t};\n\t\n\t/**\n\t * This is a low-level method, exposed to allow advanced SDK users to bypass high-level methods.\n\t * Base method used to send read queries to Kuzzle\n\t *\n\t * Takes an optional argument object with the following properties:\n\t *    - metadata (object, default: null):\n\t *        Additional information passed to notifications to other users\n\t *\n\t * @param {object} queryArgs - Query configuration\n\t * @param {object} query - The query data\n\t * @param {object} [options] - Optional arguments\n\t * @param {responseCallback} [cb] - Handles the query response\n\t */\n\tKuzzle.prototype.query = function (queryArgs, query, options, cb) {\n\t  var\n\t    attr,\n\t    object = {\n\t      action: queryArgs.action,\n\t      controller: queryArgs.controller,\n\t      metadata: this.metadata\n\t    },\n\t    self = this;\n\t\n\t  this.isValid();\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  if (options) {\n\t    if (options.metadata) {\n\t      Object.keys(options.metadata).forEach(function (meta) {\n\t        object.metadata[meta] = options.metadata[meta];\n\t      });\n\t    }\n\t\n\t    if (options.queuable === false && self.state === 'offline') {\n\t      return self;\n\t    }\n\t  }\n\t\n\t  if (!query || typeof query !== 'object' || Array.isArray(query)) {\n\t    throw new Error('Invalid query parameter: ' + query);\n\t  }\n\t\n\t  if (query.metadata) {\n\t    Object.keys(query.metadata).forEach(function (meta) {\n\t      object.metadata[meta] = query.metadata[meta];\n\t    });\n\t  }\n\t\n\t  for (attr in query) {\n\t    if (attr !== 'metadata' && query.hasOwnProperty(attr)) {\n\t      object[attr] = query[attr];\n\t    }\n\t  }\n\t\n\t  object = self.addHeaders(object, this.headers);\n\t\n\t  /*\n\t   * Do not add the token for the checkToken route, to avoid getting a token error when\n\t   * a developer simply wish to verify his token\n\t   */\n\t  if (self.jwtToken !== undefined && !(object.controller === 'auth' && object.action === 'checkToken')) {\n\t    object.headers = object.headers || {};\n\t    object.headers.authorization = 'Bearer ' + self.jwtToken;\n\t  }\n\t\n\t  if (queryArgs.collection) {\n\t    object.collection = queryArgs.collection;\n\t  }\n\t\n\t  if (queryArgs.index) {\n\t    object.index = queryArgs.index;\n\t  }\n\t\n\t  if (!object.requestId) {\n\t    object.requestId = uuid.v4();\n\t  }\n\t\n\t  if (self.state === 'connected' || (options && options.queuable === false)) {\n\t    if (self.state === 'connected') {\n\t      emitRequest.call(this, object, cb);\n\t    } else if (cb) {\n\t      cb(new Error('Unable to execute request: not connected to a Kuzzle server.\\nDiscarded request: ' + JSON.stringify(object)));\n\t    }\n\t  } else if (self.queuing || ['initializing', 'connecting'].indexOf(self.state) !== -1) {\n\t    cleanQueue.call(this, object, cb);\n\t\n\t    if (!self.queueFilter || self.queueFilter(object)) {\n\t      self.offlineQueue.push({ts: Date.now(), query: object, cb: cb});\n\t      self.emitEvent('offlineQueuePush', {query: object, cb: cb});\n\t    }\n\t  }\n\t\n\t  return self;\n\t};\n\t\n\t/**\n\t * Removes all listeners, either from a specific event or from all events\n\t *\n\t * @param {string} event - One of the event described in the Event Handling section of this documentation\n\t * @returns {Kuzzle} this object\n\t */\n\tKuzzle.prototype.removeAllListeners = function (event) {\n\t  var\n\t    knownEvents = Object.keys(this.eventListeners),\n\t    self = this;\n\t\n\t  if (event) {\n\t    if (knownEvents.indexOf(event) === -1) {\n\t      throw new Error('[' + event + '] is not a known event. Known events: ' + knownEvents.toString());\n\t    }\n\t\n\t    this.eventListeners[event].listeners = [];\n\t  } else {\n\t    knownEvents.forEach(function (eventName) {\n\t      self.eventListeners[eventName].listeners = [];\n\t    });\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Removes a listener from an event.\n\t *\n\t * @param {string} event - One of the event described in the Event Handling section of this documentation\n\t * @param {string} listenerId - The ID returned by addListener\n\t * @returns {Kuzzle} this object\n\t */\n\tKuzzle.prototype.removeListener = function (event, listenerId) {\n\t  var\n\t    knownEvents = Object.keys(this.eventListeners),\n\t    self = this;\n\t\n\t  if (knownEvents.indexOf(event) === -1) {\n\t    throw new Error('[' + event + '] is not a known event. Known events: ' + knownEvents.toString());\n\t  }\n\t\n\t  this.eventListeners[event].listeners.forEach(function (listener, index) {\n\t    if (listener.id === listenerId) {\n\t      self.eventListeners[event].listeners.splice(index, 1);\n\t    }\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Replays the requests queued during offline mode.\n\t * Works only if the SDK is not in a disconnected state, and if the autoReplay option is set to false.\n\t */\n\tKuzzle.prototype.replayQueue = function () {\n\t  if (this.state !== 'offline' && !this.autoReplay) {\n\t    cleanQueue.call(this);\n\t    dequeue.call(this);\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Sets the default Kuzzle index\n\t *\n\t * @param index\n\t * @returns this\n\t */\n\tKuzzle.prototype.setDefaultIndex = function (index) {\n\t  if (typeof index !== 'string') {\n\t    throw new Error('Invalid default index: [' + index + '] (an index name is expected)');\n\t  }\n\t\n\t  if (index.length === 0) {\n\t    throw new Error('Cannot set an empty index as the default index');\n\t  }\n\t\n\t  this.defaultIndex = index;\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Helper function allowing to set headers while chaining calls.\n\t *\n\t * If the replace argument is set to true, replace the current headers with the provided content.\n\t * Otherwise, it appends the content to the current headers, only replacing already existing values\n\t *\n\t * @param content - new headers content\n\t * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n\t */\n\tKuzzle.prototype.setHeaders = function (content, replace) {\n\t  var self = this;\n\t\n\t  if (typeof content !== 'object' || Array.isArray(content)) {\n\t    throw new Error('Expected a content object, received a ' + typeof content);\n\t  }\n\t\n\t  if (replace) {\n\t    self.headers = content;\n\t  } else {\n\t    Object.keys(content).forEach(function (key) {\n\t      self.headers[key] = content[key];\n\t    });\n\t  }\n\t\n\t  return self;\n\t};\n\t\n\t/**\n\t * Starts the requests queuing. Works only during offline mode, and if the autoQueue option is set to false.\n\t */\n\tKuzzle.prototype.startQueuing = function () {\n\t  if (this.state === 'offline' && !this.autoQueue) {\n\t    this.queuing = true;\n\t  }\n\t  return this;\n\t};\n\t\n\t/**\n\t * Stops the requests queuing. Works only during offline mode, and if the autoQueue option is set to false.\n\t */\n\tKuzzle.prototype.stopQueuing = function () {\n\t  if (this.state === 'offline' && !this.autoQueue) {\n\t    this.queuing = false;\n\t  }\n\t\n\t  return this;\n\t};\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tfunction KuzzleSecurityDocument(kuzzleSecurity, id, content) {\n\t\n\t  if (!id) {\n\t    throw new Error('A security document must have an id');\n\t  }\n\t\n\t  // Define properties\n\t  Object.defineProperties(this, {\n\t    // private properties\n\t    kuzzle: {\n\t      value: kuzzleSecurity.kuzzle\n\t    },\n\t    kuzzleSecurity: {\n\t      value: kuzzleSecurity\n\t    },\n\t    // read-only properties\n\t    // writable properties\n\t    id: {\n\t      value: id,\n\t      enumerable: true\n\t    },\n\t    content: {\n\t      value: {},\n\t      writable: true,\n\t      enumerable: true\n\t    }\n\t  });\n\t\n\t  if (content) {\n\t    this.setContent(content, true);\n\t  }\n\t\n\t  // promisifying\n\t  if (kuzzleSecurity.kuzzle.bluebird) {\n\t    return kuzzleSecurity.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var whitelist = ['delete', 'update'];\n\t\n\t        return passes && whitelist.indexOf(name) !== -1;\n\t      }\n\t    });\n\t  }\n\t}\n\t\n\t/**\n\t * Replaces the current content with new data.\n\t * Changes made by this function won’t be applied until the save method is called.\n\t *\n\t * @param {Object} data - New securityDocument content\n\t * @return {KuzzleSecurityDocument} this\n\t */\n\tKuzzleSecurityDocument.prototype.setContent = function (data) {\n\t  this.content = data;\n\t  return this;\n\t};\n\t\n\t/**\n\t * Serialize this object into a pojo\n\t *\n\t * @return {object} pojo representing this securityDocument\n\t */\n\tKuzzleSecurityDocument.prototype.serialize = function () {\n\t  var\n\t    data = {};\n\t\n\t  if (this.id) {\n\t    data._id = this.id;\n\t  }\n\t\n\t  data.body = this.content;\n\t\n\t  return data;\n\t};\n\t\n\t/**\n\t * Delete the current KuzzleSecurityDocument into Kuzzle.\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t */\n\tKuzzleSecurityDocument.prototype.delete = function (options, cb) {\n\t  var\n\t    self = this;\n\t\n\t  if (options && cb === undefined && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.query(this.kuzzleSecurity.buildQueryArgs(this.deleteActionName), {_id: this.id}, options, function (error, res) {\n\t    if (error) {\n\t      return cb ? cb(error) : false;\n\t    }\n\t\n\t    if (cb) {\n\t      cb(null, res.result._id);\n\t    }\n\t  });\n\t};\n\t\n\t/**\n\t * Update the current KuzzleSecurityDocument into Kuzzle.\n\t *\n\t * @param {object} content - Content to add to KuzzleSecurityDocument\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {KuzzleSecurityDocument} this\n\t */\n\tKuzzleSecurityDocument.prototype.update = function (content, options, cb) {\n\t  var\n\t    data = {},\n\t    self = this;\n\t\n\t  if (typeof content !== 'object') {\n\t    throw new Error('Parameter \"content\" must be a object');\n\t  }\n\t\n\t  if (options && cb === undefined && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data._id = self.id;\n\t  data.body = content;\n\t\n\t  self.kuzzle.query(this.kuzzleSecurity.buildQueryArgs(this.updateActionName), data, options, function (error, response) {\n\t    if (error) {\n\t      return cb ? cb(error) : false;\n\t    }\n\t\n\t    self.setContent(response.result._source);\n\t\n\t    if (cb) {\n\t      cb(null, self);\n\t    }\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\tmodule.exports = KuzzleSecurityDocument;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar\n\t  KuzzleSecurityDocument = __webpack_require__(1);\n\t\n\tfunction KuzzleUser(kuzzleSecurity, id, content) {\n\t\n\t  KuzzleSecurityDocument.call(this, kuzzleSecurity, id, content);\n\t\n\t  // Define properties\n\t  Object.defineProperties(this, {\n\t    // private properties\n\t    deleteActionName: {\n\t      value: 'deleteUser'\n\t    },\n\t    updateActionName: {\n\t      value: 'updateUser'\n\t    }\n\t  });\n\t\n\t  // promisifying\n\t  if (kuzzleSecurity.kuzzle.bluebird) {\n\t    return kuzzleSecurity.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var whitelist = ['save'];\n\t\n\t        return passes && whitelist.indexOf(name) !== -1;\n\t      }\n\t    });\n\t  }\n\t}\n\t\n\tKuzzleUser.prototype = Object.create(KuzzleSecurityDocument.prototype, {\n\t  constructor: {\n\t    value: KuzzleUser\n\t  }\n\t});\n\t\n\t/**\n\t * Set profiles in content\n\t * @param {array} profile - an array of profiles ids string\n\t *\n\t * @returns {KuzzleUser} this\n\t */\n\tKuzzleUser.prototype.setProfiles = function (profileIds) {\n\t  if (!Array.isArray(profileIds) || typeof profileIds[0] !== 'string') {\n\t    throw new Error('Parameter \"profileIds\" must be an array of strings');\n\t  }\n\t\n\t  this.content.profileIds = profileIds;\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Add a profile\n\t * @param {string} profile - a profile ids string\n\t *\n\t * @returns {KuzzleUser} this\n\t */\n\tKuzzleUser.prototype.addProfile = function (profileId) {\n\t  if (typeof profileId !== 'string') {\n\t    throw new Error('Parameter \"profileId\" must be a string');\n\t  }\n\t\n\t  if (!this.content.profileIds) {\n\t    this.content.profileIds = [];\n\t  }\n\t\n\t  if (this.content.profileIds.indexOf(profileId) === -1) {\n\t    this.content.profileIds.push(profileId);\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Saves this user into Kuzzle.\n\t *\n\t * If this is a new user, this function will create it in Kuzzle.\n\t * Otherwise, this method will replace the latest version of this user in Kuzzle by the current content\n\t * of this object.\n\t *\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @param {object} [options] - Optional parameters\n\t * @returns {KuzzleUser} this\n\t */\n\tKuzzleUser.prototype.save = function (options, cb) {\n\t  var\n\t    data = this.serialize(),\n\t    self = this;\n\t\n\t  if (options && cb === undefined && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.query(this.kuzzleSecurity.buildQueryArgs('createOrReplaceUser'), data, options, cb && function (error) {\n\t    cb(error, error ? undefined : self);\n\t  });\n\t\n\t  return self;\n\t};\n\t\n\t/**\n\t * Serialize this object into a JSON object\n\t *\n\t * @return {object} JSON object representing this User\n\t */\n\tKuzzleUser.prototype.serialize = function () {\n\t  return {_id: this.id, body: this.content};\n\t};\n\t\n\t/**\n\t * Return the associated profiles IDs\n\t *\n\t * @return {array} the associated profiles IDs\n\t */\n\tKuzzleUser.prototype.getProfiles = function () {\n\t  return this.content.profileIds;\n\t};\n\t\n\tmodule.exports = KuzzleUser;\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t//     uuid.js\n\t//\n\t//     Copyright (c) 2010-2012 Robert Kieffer\n\t//     MIT License - http://opensource.org/licenses/mit-license.php\n\t\n\t/*global window, require, define */\n\t(function(_window) {\n\t  'use strict';\n\t\n\t  // Unique ID creation requires a high quality random # generator.  We feature\n\t  // detect to determine the best RNG source, normalizing to a function that\n\t  // returns 128-bits of randomness, since that's what's usually required\n\t  var _rng, _mathRNG, _nodeRNG, _whatwgRNG, _previousRoot;\n\t\n\t  function setupBrowser() {\n\t    // Allow for MSIE11 msCrypto\n\t    var _crypto = _window.crypto || _window.msCrypto;\n\t\n\t    if (!_rng && _crypto && _crypto.getRandomValues) {\n\t      // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto\n\t      //\n\t      // Moderately fast, high quality\n\t      try {\n\t        var _rnds8 = new Uint8Array(16);\n\t        _whatwgRNG = _rng = function whatwgRNG() {\n\t          _crypto.getRandomValues(_rnds8);\n\t          return _rnds8;\n\t        };\n\t        _rng();\n\t      } catch(e) {}\n\t    }\n\t\n\t    if (!_rng) {\n\t      // Math.random()-based (RNG)\n\t      //\n\t      // If all else fails, use Math.random().  It's fast, but is of unspecified\n\t      // quality.\n\t      var  _rnds = new Array(16);\n\t      _mathRNG = _rng = function() {\n\t        for (var i = 0, r; i < 16; i++) {\n\t          if ((i & 0x03) === 0) { r = Math.random() * 0x100000000; }\n\t          _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n\t        }\n\t\n\t        return _rnds;\n\t      };\n\t      if ('undefined' !== typeof console && console.warn) {\n\t        console.warn(\"[SECURITY] node-uuid: crypto not usable, falling back to insecure Math.random()\");\n\t      }\n\t    }\n\t  }\n\t\n\t  function setupNode() {\n\t    // Node.js crypto-based RNG - http://nodejs.org/docs/v0.6.2/api/crypto.html\n\t    //\n\t    // Moderately fast, high quality\n\t    if ('function' === typeof require) {\n\t      try {\n\t        var _rb = require('crypto').randomBytes;\n\t        _nodeRNG = _rng = _rb && function() {return _rb(16);};\n\t        _rng();\n\t      } catch(e) {}\n\t    }\n\t  }\n\t\n\t  if (_window) {\n\t    setupBrowser();\n\t  } else {\n\t    setupNode();\n\t  }\n\t\n\t  // Buffer class to use\n\t  var BufferClass = ('function' === typeof Buffer) ? Buffer : Array;\n\t\n\t  // Maps for number <-> hex string conversion\n\t  var _byteToHex = [];\n\t  var _hexToByte = {};\n\t  for (var i = 0; i < 256; i++) {\n\t    _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n\t    _hexToByte[_byteToHex[i]] = i;\n\t  }\n\t\n\t  // **`parse()` - Parse a UUID into it's component bytes**\n\t  function parse(s, buf, offset) {\n\t    var i = (buf && offset) || 0, ii = 0;\n\t\n\t    buf = buf || [];\n\t    s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {\n\t      if (ii < 16) { // Don't overflow!\n\t        buf[i + ii++] = _hexToByte[oct];\n\t      }\n\t    });\n\t\n\t    // Zero out remaining bytes if string was short\n\t    while (ii < 16) {\n\t      buf[i + ii++] = 0;\n\t    }\n\t\n\t    return buf;\n\t  }\n\t\n\t  // **`unparse()` - Convert UUID byte array (ala parse()) into a string**\n\t  function unparse(buf, offset) {\n\t    var i = offset || 0, bth = _byteToHex;\n\t    return  bth[buf[i++]] + bth[buf[i++]] +\n\t            bth[buf[i++]] + bth[buf[i++]] + '-' +\n\t            bth[buf[i++]] + bth[buf[i++]] + '-' +\n\t            bth[buf[i++]] + bth[buf[i++]] + '-' +\n\t            bth[buf[i++]] + bth[buf[i++]] + '-' +\n\t            bth[buf[i++]] + bth[buf[i++]] +\n\t            bth[buf[i++]] + bth[buf[i++]] +\n\t            bth[buf[i++]] + bth[buf[i++]];\n\t  }\n\t\n\t  // **`v1()` - Generate time-based UUID**\n\t  //\n\t  // Inspired by https://github.com/LiosK/UUID.js\n\t  // and http://docs.python.org/library/uuid.html\n\t\n\t  // random #'s we need to init node and clockseq\n\t  var _seedBytes = _rng();\n\t\n\t  // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n\t  var _nodeId = [\n\t    _seedBytes[0] | 0x01,\n\t    _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]\n\t  ];\n\t\n\t  // Per 4.2.2, randomize (14 bit) clockseq\n\t  var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;\n\t\n\t  // Previous uuid creation time\n\t  var _lastMSecs = 0, _lastNSecs = 0;\n\t\n\t  // See https://github.com/broofa/node-uuid for API details\n\t  function v1(options, buf, offset) {\n\t    var i = buf && offset || 0;\n\t    var b = buf || [];\n\t\n\t    options = options || {};\n\t\n\t    var clockseq = (options.clockseq != null) ? options.clockseq : _clockseq;\n\t\n\t    // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n\t    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n\t    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n\t    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\t    var msecs = (options.msecs != null) ? options.msecs : new Date().getTime();\n\t\n\t    // Per 4.2.1.2, use count of uuid's generated during the current clock\n\t    // cycle to simulate higher resolution clock\n\t    var nsecs = (options.nsecs != null) ? options.nsecs : _lastNSecs + 1;\n\t\n\t    // Time since last uuid creation (in msecs)\n\t    var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\t\n\t    // Per 4.2.1.2, Bump clockseq on clock regression\n\t    if (dt < 0 && options.clockseq == null) {\n\t      clockseq = clockseq + 1 & 0x3fff;\n\t    }\n\t\n\t    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n\t    // time interval\n\t    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs == null) {\n\t      nsecs = 0;\n\t    }\n\t\n\t    // Per 4.2.1.2 Throw error if too many uuids are requested\n\t    if (nsecs >= 10000) {\n\t      throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n\t    }\n\t\n\t    _lastMSecs = msecs;\n\t    _lastNSecs = nsecs;\n\t    _clockseq = clockseq;\n\t\n\t    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\t    msecs += 12219292800000;\n\t\n\t    // `time_low`\n\t    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n\t    b[i++] = tl >>> 24 & 0xff;\n\t    b[i++] = tl >>> 16 & 0xff;\n\t    b[i++] = tl >>> 8 & 0xff;\n\t    b[i++] = tl & 0xff;\n\t\n\t    // `time_mid`\n\t    var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n\t    b[i++] = tmh >>> 8 & 0xff;\n\t    b[i++] = tmh & 0xff;\n\t\n\t    // `time_high_and_version`\n\t    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\t    b[i++] = tmh >>> 16 & 0xff;\n\t\n\t    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\t    b[i++] = clockseq >>> 8 | 0x80;\n\t\n\t    // `clock_seq_low`\n\t    b[i++] = clockseq & 0xff;\n\t\n\t    // `node`\n\t    var node = options.node || _nodeId;\n\t    for (var n = 0; n < 6; n++) {\n\t      b[i + n] = node[n];\n\t    }\n\t\n\t    return buf ? buf : unparse(b);\n\t  }\n\t\n\t  // **`v4()` - Generate random UUID**\n\t\n\t  // See https://github.com/broofa/node-uuid for API details\n\t  function v4(options, buf, offset) {\n\t    // Deprecated - 'format' argument, as supported in v1.2\n\t    var i = buf && offset || 0;\n\t\n\t    if (typeof(options) === 'string') {\n\t      buf = (options === 'binary') ? new BufferClass(16) : null;\n\t      options = null;\n\t    }\n\t    options = options || {};\n\t\n\t    var rnds = options.random || (options.rng || _rng)();\n\t\n\t    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\t    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n\t    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\t\n\t    // Copy bytes to buffer, if provided\n\t    if (buf) {\n\t      for (var ii = 0; ii < 16; ii++) {\n\t        buf[i + ii] = rnds[ii];\n\t      }\n\t    }\n\t\n\t    return buf || unparse(rnds);\n\t  }\n\t\n\t  // Export public API\n\t  var uuid = v4;\n\t  uuid.v1 = v1;\n\t  uuid.v4 = v4;\n\t  uuid.parse = parse;\n\t  uuid.unparse = unparse;\n\t  uuid.BufferClass = BufferClass;\n\t  uuid._rng = _rng;\n\t  uuid._mathRNG = _mathRNG;\n\t  uuid._nodeRNG = _nodeRNG;\n\t  uuid._whatwgRNG = _whatwgRNG;\n\t\n\t  if (('undefined' !== typeof module) && module.exports) {\n\t    // Publish as node.js module\n\t    module.exports = uuid;\n\t  } else if (typeof define === 'function' && define.amd) {\n\t    // Publish as AMD module\n\t    define(function() {return uuid;});\n\t\n\t\n\t  } else {\n\t    // Publish as global (in browsers)\n\t    _previousRoot = _window.uuid;\n\t\n\t    // **`noConflict()` - (browser only) to reset global 'uuid' var**\n\t    uuid.noConflict = function() {\n\t      _window.uuid = _previousRoot;\n\t      return uuid;\n\t    };\n\t\n\t    _window.uuid = uuid;\n\t  }\n\t})('undefined' !== typeof window ? window : null);\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar\n\t  KuzzleDocument = __webpack_require__(6),\n\t  KuzzleDataMapping = __webpack_require__(5),\n\t  KuzzleRoom = __webpack_require__(8);\n\t\n\t/**\n\t * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n\t *\n\t * @callback responseCallback\n\t * @param {Object} err - Error object, NULL if the query is successful\n\t * @param {Object} [data] - The content of the query response\n\t */\n\t\n\t/**\n\t * A data collection is a set of data managed by Kuzzle. It acts like a data table for persistent documents,\n\t * or like a room for pub/sub messages.\n\t * @param {object} kuzzle - Kuzzle instance to inherit from\n\t * @param {string} collection - name of the data collection to handle\n\t * @param {string} index - Index containing the data collection\n\t * @constructor\n\t */\n\tfunction KuzzleDataCollection(kuzzle, collection, index) {\n\t  if (!index || !collection) {\n\t    throw new Error('The KuzzleDataCollection object constructor needs an index and a collection arguments');\n\t  }\n\t\n\t  Object.defineProperties(this, {\n\t    // read-only properties\n\t    collection: {\n\t      value: collection,\n\t      enumerable: true\n\t    },\n\t    index: {\n\t      value: index,\n\t      enumerable: true\n\t    },\n\t    kuzzle: {\n\t      value: kuzzle,\n\t      enumerable: true\n\t    },\n\t    // writable properties\n\t    headers: {\n\t      value: JSON.parse(JSON.stringify(kuzzle.headers)),\n\t      enumerable: true,\n\t      writable: true\n\t    }\n\t  });\n\t\n\t  Object.defineProperty(this, 'buildQueryArgs', {\n\t    value: function (controller, action) {\n\t      return {\n\t        controller: controller,\n\t        action: action,\n\t        collection: this.collection,\n\t        index: this.index\n\t      };\n\t    }\n\t  });\n\t\n\t  if (this.kuzzle.bluebird) {\n\t    return this.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var blacklist = ['publishMessage', 'setHeaders', 'subscribe'];\n\t\n\t        return passes && blacklist.indexOf(name) === -1;\n\t      }\n\t    });\n\t  }\n\t\n\t  return this;\n\t}\n\t\n\t/**\n\t * Executes an advanced search on the data collection.\n\t *\n\t * /!\\ There is a small delay between documents creation and their existence in our advanced search layer,\n\t * usually a couple of seconds.\n\t * That means that a document that was just been created won’t be returned by this function.\n\t *\n\t * @param {object} filters - Filters in Elasticsearch Query DSL format\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzleDataCollection.prototype.advancedSearch = function (filters, options, cb) {\n\t  var\n\t    query,\n\t    self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.callbackRequired('KuzzleDataCollection.advancedSearch', cb);\n\t\n\t  query = self.kuzzle.addHeaders({body: filters}, this.headers);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('read', 'search'), query, options, function (error, result) {\n\t    var documents = [];\n\t\n\t    if (error) {\n\t      return cb(error);\n\t    }\n\t\n\t    result.result.hits.forEach(function (doc) {\n\t      var newDocument = new KuzzleDocument(self, doc._id, doc._source);\n\t\n\t      newDocument.version = doc._version;\n\t\n\t      documents.push(newDocument);\n\t    });\n\t\n\t    cb(null, { total: result.result.total, documents: documents });\n\t  });\n\t};\n\t\n\t/**\n\t * Returns the number of documents matching the provided set of filters.\n\t *\n\t * There is a small delay between documents creation and their existence in our advanced search layer,\n\t * usually a couple of seconds.\n\t * That means that a document that was just been created won’t be returned by this function\n\t *\n\t * @param {object} filters - Filters in Elasticsearch Query DSL format\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzleDataCollection.prototype.count = function (filters, options, cb) {\n\t  var\n\t    query;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.kuzzle.callbackRequired('KuzzleDataCollection.count', cb);\n\t\n\t  query = this.kuzzle.addHeaders({body: filters}, this.headers);\n\t\n\t  this.kuzzle.query(this.buildQueryArgs('read', 'count'), query, options, function (error, result) {\n\t    cb(error, result && result.result.count);\n\t  });\n\t};\n\t\n\t/**\n\t * Create a new empty data collection, with no associated mapping.\n\t * Kuzzle automatically creates data collections when storing documents, but there are cases where we\n\t * want to create and prepare data collections before storing documents in it.\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - returns Kuzzle's response\n\t * @returns {*} this\n\t */\n\tKuzzleDataCollection.prototype.create = function (options, cb) {\n\t  var data = {};\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data = this.kuzzle.addHeaders(data, this.headers);\n\t  this.kuzzle.query(this.buildQueryArgs('write', 'createCollection'), data, options, cb);\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Create a new document in Kuzzle.\n\t *\n\t * Takes an optional argument object with the following properties:\n\t *    - metadata (object, default: null):\n\t *        Additional information passed to notifications to other users\n\t *    - updateIfExist (boolean, default: false):\n\t *        If the same document already exists: throw an error if sets to false.\n\t *        Update the existing document otherwise\n\t *\n\t * @param {string} [id] - (optional) document identifier\n\t * @param {object} document - either an instance of a KuzzleDocument object, or a document\n\t * @param {object} [options] - optional arguments\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {Object} this\n\t */\n\tKuzzleDataCollection.prototype.createDocument = function (id, document, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {},\n\t    action = 'create';\n\t\n\t  if (id && typeof id !== 'string') {\n\t    cb = options;\n\t    options = document;\n\t    document = id;\n\t    id = null;\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  if (document instanceof KuzzleDocument) {\n\t    data = document.serialize();\n\t  } else {\n\t    data.body = document;\n\t  }\n\t\n\t  if (options) {\n\t    action = options.updateIfExist ? 'createOrReplace' : 'create';\n\t  }\n\t\n\t  if (id) {\n\t    data._id = id;\n\t  }\n\t\n\t  data = self.kuzzle.addHeaders(data, self.headers);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('write', action), data, options, cb && function (err, res) {\n\t    var doc;\n\t\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    doc = new KuzzleDocument(self, res.result._id, res.result._source);\n\t    doc.version = res.result._version;\n\t    cb(null, doc);\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Delete persistent documents.\n\t *\n\t * There is a small delay between documents creation and their existence in our advanced search layer,\n\t * usually a couple of seconds.\n\t * That means that a document that was just been created won’t be returned by this function\n\t *\n\t * Takes an optional argument object with the following properties:\n\t *    - metadata (object, default: null):\n\t *        Additional information passed to notifications to other users\n\t *\n\t * @param {string|object} arg - Either a document ID (will delete only this particular document), or a set of filters\n\t * @param {object} [options] - optional arguments\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {KuzzleDataCollection} this\n\t */\n\tKuzzleDataCollection.prototype.deleteDocument = function (arg, options, cb) {\n\t  var\n\t    action,\n\t    data = {};\n\t\n\t  if (typeof arg === 'string') {\n\t    data._id = arg;\n\t    action = 'delete';\n\t  } else {\n\t    data.body = arg;\n\t    action = 'deleteByQuery';\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data = this.kuzzle.addHeaders(data, this.headers);\n\t\n\t  this.kuzzle.query(this.buildQueryArgs('write', action), data, options, cb && function (err, res) {\n\t    if (err) {\n\t      cb(err);\n\t    }\n\t    else {\n\t      cb(null, (action === 'delete' ? [res.result._id] : res.result.ids));\n\t    }\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Retrieve a single stored document using its unique document ID.\n\t *\n\t * @param {string} documentId - Unique document identifier\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzleDataCollection.prototype.fetchDocument = function (documentId, options, cb) {\n\t  var\n\t    data = {_id: documentId},\n\t    self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.callbackRequired('KuzzleDataCollection.fetch', cb);\n\t  data = self.kuzzle.addHeaders(data, this.headers);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('read', 'get'), data, options, function (err, res) {\n\t    var document;\n\t\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    document = new KuzzleDocument(self, res.result._id, res.result._source);\n\t    document.version = res.result._version;\n\t    cb(null, document);\n\t  });\n\t};\n\t\n\t/**\n\t * Retrieves all documents stored in this data collection\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzleDataCollection.prototype.fetchAllDocuments = function (options, cb) {\n\t  var filters = {};\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  // copying pagination options to the search filter\n\t  if (options) {\n\t    if (options.from) {\n\t      filters.from = options.from;\n\t    }\n\t\n\t    if (options.size) {\n\t      filters.size = options.size;\n\t    }\n\t  }\n\t\n\t  this.kuzzle.callbackRequired('KuzzleDataCollection.fetchAll', cb);\n\t\n\t  this.advancedSearch(filters, options, cb);\n\t};\n\t\n\t\n\t/**\n\t * Instantiates a KuzzleDataMapping object containing the current mapping of this collection.\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} cb - Returns an instantiated KuzzleDataMapping object\n\t */\n\tKuzzleDataCollection.prototype.getMapping = function (options, cb) {\n\t  var kuzzleMapping;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.kuzzle.callbackRequired('KuzzleDataCollection.getMapping', cb);\n\t\n\t  kuzzleMapping = new KuzzleDataMapping(this);\n\t  kuzzleMapping.refresh(options, cb);\n\t};\n\t\n\t/**\n\t * Publish a realtime message\n\t *\n\t * Takes an optional argument object with the following properties:\n\t *    - metadata (object, default: null):\n\t *        Additional information passed to notifications to other users\n\t *\n\t * @param {object} document - either a KuzzleDocument instance or a JSON object\n\t * @param {object} [options] - optional arguments\n\t * @param {responseCallback} [cb] - Returns a raw Kuzzle response\n\t * @returns {*} this\n\t */\n\tKuzzleDataCollection.prototype.publishMessage = function (document, options, cb) {\n\t  var data = {};\n\t\n\t  if (document instanceof KuzzleDocument) {\n\t    data = document.serialize();\n\t  } else {\n\t    data.body = document;\n\t  }\n\t\n\t  data = this.kuzzle.addHeaders(data, this.headers);\n\t  this.kuzzle.query(this.buildQueryArgs('write', 'publish'), data, options, cb);\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Replace an existing document with a new one.\n\t *\n\t * Takes an optional argument object with the following properties:\n\t *    - metadata (object, default: null):\n\t *        Additional information passed to notifications to other users\n\t *\n\t * @param {string} documentId - Unique document identifier of the document to replace\n\t * @param {object} content - JSON object representing the new document version\n\t * @param {object} [options] - additional arguments\n\t * @param {responseCallback} [cb] - Returns an instantiated KuzzleDocument object\n\t * @return {object} this\n\t */\n\tKuzzleDataCollection.prototype.replaceDocument = function (documentId, content, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {\n\t      _id: documentId,\n\t      body: content\n\t    };\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data = self.kuzzle.addHeaders(data, this.headers);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('write', 'createOrReplace'), data, options, cb && function (err, res) {\n\t    var document;\n\t\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    document = new KuzzleDocument(self, res.result._id, res.result._source);\n\t    document.version = res.result._version;\n\t    cb(null, document);\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Subscribes to this data collection with a set of filters.\n\t * To subscribe to the entire data collection, simply provide an empty filter.\n\t *\n\t * @param {object} filters - Filters in Kuzzle DSL format\n\t * @param {object} [options] - subscriptions options\n\t * @param {responseCallback} cb - called for each new notification\n\t * @returns {*} KuzzleRoom object\n\t */\n\tKuzzleDataCollection.prototype.subscribe = function (filters, options, cb) {\n\t  var room;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.kuzzle.callbackRequired('KuzzleDataCollection.subscribe', cb);\n\t\n\t  room = new KuzzleRoom(this, options);\n\t  room.renew(filters, cb);\n\t\n\t  return room;\n\t};\n\t\n\t/**\n\t * Truncate the data collection, removing all stored documents but keeping all associated mappings.\n\t * This method is a lot faster than removing all documents using a query.\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - returns Kuzzle's response\n\t * @returns {*} this\n\t */\n\tKuzzleDataCollection.prototype.truncate = function (options, cb) {\n\t  var data = {};\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data = this.kuzzle.addHeaders(data, this.headers);\n\t  this.kuzzle.query(this.buildQueryArgs('admin', 'truncateCollection'), data, options, cb);\n\t\n\t  return this;\n\t};\n\t\n\t\n\t/**\n\t * Update parts of a document\n\t *\n\t * Takes an optional argument object with the following properties:\n\t *    - metadata (object, default: null):\n\t *        Additional information passed to notifications to other users\n\t *\n\t * @param {string} documentId - Unique document identifier of the document to update\n\t * @param {object} content - JSON object containing changes to perform on the document\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Returns an instantiated KuzzleDocument object\n\t * @return {object} this\n\t */\n\tKuzzleDataCollection.prototype.updateDocument = function (documentId, content, options, cb) {\n\t  var\n\t    data = {\n\t      _id: documentId,\n\t      body: content\n\t    },\n\t    self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data = self.kuzzle.addHeaders(data, this.headers);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('write', 'update'), data, options, cb && function (err, res) {\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    (new KuzzleDocument(self, res.result._id)).refresh(cb);\n\t  });\n\t\n\t  return self;\n\t};\n\t\n\t\n\t/**\n\t * Instantiate a new KuzzleDocument object. Workaround to the module.exports limitation, preventing multiple\n\t * constructors to be exposed without having to use a factory or a composed object.\n\t *\n\t * @param {string} id - document id\n\t * @param {object} content - document content\n\t * @constructor\n\t */\n\tKuzzleDataCollection.prototype.documentFactory = function (id, content) {\n\t  return new KuzzleDocument(this, id, content);\n\t};\n\t\n\t/**\n\t * Instantiate a new KuzzleRoom object. Workaround to the module.exports limitation, preventing multiple\n\t * constructors to be exposed without having to use a factory or a composed object.\n\t *\n\t * @param {object} [options] - subscription configuration\n\t * @constructor\n\t */\n\tKuzzleDataCollection.prototype.roomFactory = function (options) {\n\t  return new KuzzleRoom(this, options);\n\t};\n\t\n\t/**\n\t * Instantiate a new KuzzleDataMapping object. Workaround to the module.exports limitation, preventing multiple\n\t * constructors to be exposed without having to use a factory or a composed object.\n\t *\n\t * @param {object} [mapping] - mapping to instantiate the KuzzleDataMapping object with\n\t * @constructor\n\t */\n\tKuzzleDataCollection.prototype.dataMappingFactory = function (mapping) {\n\t  return new KuzzleDataMapping(this, mapping);\n\t};\n\t\n\t/**\n\t * Helper function allowing to set headers while chaining calls.\n\t *\n\t * If the replace argument is set to true, replace the current headers with the provided content.\n\t * Otherwise, it appends the content to the current headers, only replacing already existing values\n\t *\n\t * @param content - new headers content\n\t * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n\t */\n\tKuzzleDataCollection.prototype.setHeaders = function (content, replace) {\n\t  this.kuzzle.setHeaders.call(this, content, replace);\n\t  return this;\n\t};\n\t\n\tmodule.exports = KuzzleDataCollection;\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t/**\n\t * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n\t *\n\t * @callback responseCallback\n\t * @param {Object} err - Error object, NULL if the query is successful\n\t * @param {Object} [data] - The content of the query response\n\t */\n\t\n\t\n\t/**\n\t *  When creating a new data collection in the persistent data storage layer, Kuzzle uses a default mapping.\n\t *  It means that, by default, you won’t be able to exploit the full capabilities of our persistent data storage layer\n\t *  (currently handled by ElasticSearch), and your searches may suffer from below-average performances, depending on\n\t *  the amount of data you stored in a collection and the complexity of your database.\n\t *\n\t *  The KuzzleDataMapping object allow to get the current mapping of a data collection and to modify it if needed.\n\t *\n\t * @param {object} kuzzleDataCollection - Instance of the inherited KuzzleDataCollection object\n\t * @param {object} mapping - mappings\n\t * @constructor\n\t */\n\tfunction KuzzleDataMapping(kuzzleDataCollection, mapping) {\n\t  Object.defineProperties(this, {\n\t    //read-only properties\n\t    collection: {\n\t      value: kuzzleDataCollection,\n\t      enumerable: true\n\t    },\n\t    kuzzle: {\n\t      value: kuzzleDataCollection.kuzzle,\n\t      enumerable: true\n\t    },\n\t    // writable properties\n\t    headers: {\n\t      value: JSON.parse(JSON.stringify(kuzzleDataCollection.headers)),\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    mapping: {\n\t      value: mapping || {},\n\t      enumerable: true,\n\t      writable: true\n\t    }\n\t  });\n\t\n\t  if (this.kuzzle.bluebird) {\n\t    return this.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var blacklist = ['set', 'setHeaders'];\n\t\n\t        return passes && blacklist.indexOf(name) === -1;\n\t      }\n\t    });\n\t  }\n\t\n\t  return this;\n\t}\n\t\n\t/**\n\t * Applies the new mapping to the data collection.\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t */\n\tKuzzleDataMapping.prototype.apply = function (options, cb) {\n\t  var\n\t    self = this,\n\t    data = this.kuzzle.addHeaders({body: {properties: this.mapping}}, this.headers);\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.query(this.collection.buildQueryArgs('admin', 'updateMapping'), data, options, function (err) {\n\t    if (err) {\n\t      return cb && cb(err);\n\t    }\n\t\n\t    self.refresh(options, cb);\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Replaces the current content with the mapping stored in Kuzzle\n\t *\n\t * Calling this function will discard any uncommited changes. You can commit changes by calling the “apply” function\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {*} this\n\t */\n\tKuzzleDataMapping.prototype.refresh = function (options, cb) {\n\t  var\n\t    self = this,\n\t    data = this.kuzzle.addHeaders({}, this.headers);\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.kuzzle.query(this.collection.buildQueryArgs('admin', 'getMapping'), data, options, function (err, res) {\n\t    if (err) {\n\t      return cb ? cb(err) : false;\n\t    }\n\t\n\t    if (res.result[self.collection.index]) {\n\t      if (res.result[self.collection.index].mappings[self.collection.collection]) {\n\t        self.mapping = res.result[self.collection.index].mappings[self.collection.collection].properties;\n\t\n\t        // Mappings can be empty. The mapping property should never be \"undefined\"\n\t        if (self.mapping === undefined) {\n\t          self.mapping = {};\n\t        }\n\t      } else {\n\t        return cb && cb(new Error('No mapping found for collection ' + self.collection.collection));\n\t      }\n\t    } else {\n\t      return cb && cb(new Error('No mapping found for index ' + self.collection.index));\n\t    }\n\t\n\t    if (cb) {\n\t      cb(null, self);\n\t    }\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t\n\t/**\n\t * Adds or updates a field mapping.\n\t *\n\t * Changes made by this function won’t be applied until you call the apply method\n\t *\n\t * @param {string} field - Name of the field from which the mapping is to be added or updated\n\t * @param {object} mapping - corresponding field mapping\n\t * @returns {KuzzleDataMapping}\n\t */\n\tKuzzleDataMapping.prototype.set = function (field, mapping) {\n\t  this.mapping[field] = mapping;\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Helper function allowing to set headers while chaining calls.\n\t *\n\t * If the replace argument is set to true, replace the current headers with the provided content.\n\t * Otherwise, it appends the content to the current headers, only replacing already existing values\n\t *\n\t * @param content - new headers content\n\t * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n\t */\n\tKuzzleDataMapping.prototype.setHeaders = function (content, replace) {\n\t  this.kuzzle.setHeaders.call(this, content, replace);\n\t  return this;\n\t};\n\t\n\tmodule.exports = KuzzleDataMapping;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t/**\n\t * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n\t *\n\t * @callback responseCallback\n\t * @param {Object} err - Error object, NULL if the query is successful\n\t * @param {Object} [data] - The content of the query response\n\t */\n\t\n\t/**\n\t * Kuzzle handles documents either as realtime messages or as stored documents.\n\t * KuzzleDocument is the object representation of one of these documents.\n\t *\n\t * Notes:\n\t *   - this constructor may be called either with a documentId, a content, neither or both.\n\t *   - providing a documentID to the constructor will automatically call refresh, unless a content is also provided\n\t *\n\t *\n\t * @param {object} kuzzleDataCollection - an instanciated KuzzleDataCollection object\n\t * @param {string} [documentId] - ID of an existing document\n\t * @param {object} [content] - Initializes this document with the provided content\n\t * @constructor\n\t */\n\tfunction KuzzleDocument(kuzzleDataCollection, documentId, content) {\n\t  Object.defineProperties(this, {\n\t    // read-only properties\n\t    collection: {\n\t      value: kuzzleDataCollection.collection,\n\t      enumerable: true\n\t    },\n\t    dataCollection: {\n\t      value: kuzzleDataCollection,\n\t      enumerable: true\n\t    },\n\t    kuzzle: {\n\t      value: kuzzleDataCollection.kuzzle,\n\t      enumerable: true\n\t    },\n\t    // writable properties\n\t    id: {\n\t      value: undefined,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    content: {\n\t      value: {},\n\t      writable: true,\n\t      enumerable: true\n\t    },\n\t    headers: {\n\t      value: JSON.parse(JSON.stringify(kuzzleDataCollection.headers)),\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    version: {\n\t      value: undefined,\n\t      enumerable: true,\n\t      writable: true\n\t    }\n\t  });\n\t\n\t  // handling provided arguments\n\t  if (!content && documentId && typeof documentId === 'object') {\n\t    content = documentId;\n\t    documentId = null;\n\t  }\n\t\n\t  if (content) {\n\t    if (content._version) {\n\t      this.version = content._version;\n\t      delete content._version;\n\t    }\n\t    this.setContent(content, true);\n\t  }\n\t\n\t  if (documentId) {\n\t    Object.defineProperty(this, 'id', {\n\t      value: documentId,\n\t      enumerable: true\n\t    });\n\t  }\n\t\n\t  // promisifying\n\t  if (this.kuzzle.bluebird) {\n\t    return this.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var whitelist = ['delete', 'refresh', 'save'];\n\t\n\t        return passes && whitelist.indexOf(name) !== -1;\n\t      }\n\t    });\n\t  }\n\t\n\t  return this;\n\t}\n\t\n\t/**\n\t * Serialize this object into a JSON object\n\t *\n\t * @return {object} JSON object representing this document\n\t */\n\tKuzzleDocument.prototype.serialize = function () {\n\t  var\n\t    data = {};\n\t\n\t  if (this.id) {\n\t    data._id = this.id;\n\t  }\n\t\n\t  data.body = this.content;\n\t  data._version = this.version;\n\t  data = this.kuzzle.addHeaders(data, this.headers);\n\t\n\t  return data;\n\t};\n\t\n\t/**\n\t * Overrides the toString() method in order to return a serialized version of the document\n\t *\n\t * @return {string} serialized version of this object\n\t */\n\tKuzzleDocument.prototype.toString = function () {\n\t  return JSON.stringify(this.serialize());\n\t};\n\t\n\t/**\n\t * Deletes this document in Kuzzle.\n\t *\n\t * Takes an optional argument object with the following properties:\n\t *    - metadata (object, default: null):\n\t *        Additional information passed to notifications to other users\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {*} this\n\t */\n\tKuzzleDocument.prototype.delete = function (options, cb) {\n\t  var self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  if (!self.id) {\n\t    throw new Error('KuzzleDocument.delete: cannot delete a document without a document ID');\n\t  }\n\t\n\t  this.kuzzle.query(this.dataCollection.buildQueryArgs('write', 'delete'), this.serialize(), options, cb && function (err) {\n\t    cb(err, err ? undefined : self.id);\n\t  });\n\t};\n\t\n\t/**\n\t * Replaces the current content with the last version of this document stored in Kuzzle.\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {*} this\n\t */\n\tKuzzleDocument.prototype.refresh = function (options, cb) {\n\t  var self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  if (!self.id) {\n\t    throw new Error('KuzzleDocument.refresh: cannot retrieve a document if no ID has been provided');\n\t  }\n\t\n\t  this.kuzzle.callbackRequired('KuzzleDocument.refresh', cb);\n\t\n\t  self.kuzzle.query(self.dataCollection.buildQueryArgs('read', 'get'), {_id: self.id}, options, function (error, res) {\n\t    var newDocument;\n\t\n\t    if (error) {\n\t      return cb(error);\n\t    }\n\t\n\t    newDocument = new KuzzleDocument(self.dataCollection, self.id, res.result._source);\n\t    newDocument.version = res.result._version;\n\t\n\t    cb(null, newDocument);\n\t  });\n\t};\n\t\n\t/**\n\t * Saves this document into Kuzzle.\n\t *\n\t * If this is a new document, this function will create it in Kuzzle and the id property will be made available.\n\t * Otherwise, this method will replace the latest version of this document in Kuzzle by the current content\n\t * of this object.\n\t *\n\t * Takes an optional argument object with the following properties:\n\t *    - metadata (object, default: null):\n\t *        Additional information passed to notifications to other users\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {*} this\n\t */\n\tKuzzleDocument.prototype.save = function (options, cb) {\n\t  var\n\t    data = this.serialize(),\n\t    self = this;\n\t\n\t  if (options && cb === undefined && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.query(this.dataCollection.buildQueryArgs('write', 'createOrReplace'), data, options, function (error, res) {\n\t    if (error) {\n\t      return cb && cb(error);\n\t    }\n\t\n\t    self.id = res.result._id;\n\t    self.version = res.result._version;\n\t\n\t    if (cb) {\n\t      cb(null, self);\n\t    }\n\t  });\n\t\n\t  return self;\n\t};\n\t\n\t/**\n\t * Sends the content of this document as a realtime message.\n\t *\n\t * Takes an optional argument object with the following properties:\n\t *    - metadata (object, default: null):\n\t *        Additional information passed to notifications to other users\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @returns {*} this\n\t */\n\tKuzzleDocument.prototype.publish = function (options) {\n\t  var data = this.serialize();\n\t\n\t  this.kuzzle.query(this.dataCollection.buildQueryArgs('write', 'publish'), data, options);\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Replaces the current content with new data.\n\t * Changes made by this function won’t be applied until the save method is called.\n\t *\n\t * @param {object} data - New content\n\t * @param {boolean} replace - if true: replace this document content with the provided data\n\t */\n\tKuzzleDocument.prototype.setContent = function (data, replace) {\n\t  var self = this;\n\t\n\t  if (replace) {\n\t    this.content = data;\n\t  }\n\t  else {\n\t    Object.keys(data).forEach(function (key) {\n\t      self.content[key] = data[key];\n\t    });\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Listens to events concerning this document. Has no effect if the document does not have an ID\n\t * (i.e. if the document has not yet been created as a persisted document).\n\t *\n\t * @param {object} [options] - subscription options\n\t * @param {responseCallback} cb - callback that will be called each time a change has been detected on this document\n\t */\n\tKuzzleDocument.prototype.subscribe = function (options, cb) {\n\t  var filters;\n\t\n\t  if (options && !cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.kuzzle.callbackRequired('KuzzleDocument.subscribe', cb);\n\t\n\t  if (!this.id) {\n\t    throw new Error('KuzzleDocument.subscribe: cannot subscribe to a document if no ID has been provided');\n\t  }\n\t\n\t  filters = { ids: { values: [this.id] } };\n\t\n\t  return this.dataCollection.subscribe(filters, options, cb);\n\t};\n\t\n\t/**\n\t * Helper function allowing to set headers while chaining calls.\n\t *\n\t * If the replace argument is set to true, replace the current headers with the provided content.\n\t * Otherwise, it appends the content to the current headers, only replacing already existing values\n\t *\n\t * @param content - new headers content\n\t * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n\t */\n\tKuzzleDocument.prototype.setHeaders = function (content, replace) {\n\t  this.kuzzle.setHeaders.call(this, content, replace);\n\t  return this;\n\t};\n\t\n\t\n\tmodule.exports = KuzzleDocument;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t/**\n\t * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n\t *\n\t * @callback responseCallback\n\t * @param {Object} err - Error object, NULL if the query is successful\n\t * @param {Object} [data] - The content of the query response\n\t */\n\t\n\t\n\t/**\n\t * Kuzzle's memory storage is a separate data store from the database layer.\n\t * It is internaly based on Redis. You can access most of Redis functions (all\n\t * lowercased), excepting:\n\t *   * all cluster based functions\n\t *   * all script based functions\n\t *   * all cursors functions\n\t *\n\t * For instance:\n\t *     kuzzle.memoryStorage\n\t *      .set('myKey', 'myValue')\n\t *      .get('myKey', function (err, response) {\n\t *        console.log(response.result);\n\t *\n\t *        // { _id: 'foo', body: { value: 'myValue' }}\n\t *      });\n\t *\n\t *\n\t * @param {object} kuzzle - Kuzzle instance to inherit from\n\t * @constructor\n\t */\n\tfunction KuzzleMemoryStorage(kuzzle) {\n\t  Object.defineProperties(this, {\n\t    // read-only properties\n\t    kuzzle: {\n\t      value: kuzzle,\n\t      enumerable: true\n\t    },\n\t    // writable properties\n\t    headers: {\n\t      value: JSON.parse(JSON.stringify(kuzzle.headers)),\n\t      enumerable: true,\n\t      writable: true\n\t    }\n\t  });\n\t\n\t  this.setHeaders = kuzzle.setHeaders.bind(this);\n\t\n\t  if (this.kuzzle.bluebird) {\n\t    return this.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var blacklist = ['setHeaders'];\n\t\n\t        return passes && blacklist.indexOf(name) === -1;\n\t      }\n\t    });\n\t  }\n\t\n\t  return this;\n\t}\n\t\n\t\n\t/**\n\t * constructs the memoryStorage functions.\n\t */\n\t(function() {\n\t\n\t  var\n\t    keyVal = ['id', 'value'],\n\t    idOrKeys = ['id', 'keys'],\n\t    commands = {\n\t      append: keyVal,\n\t      bgrewriteaof: [],\n\t      bgsave: [],\n\t      bitcount: ['id', 'start', 'end'],\n\t      bitop: ['operation', 'destkey', idOrKeys],\n\t      bitpos: ['id', 'bit', { __opts__: ['start', 'end']}],\n\t      blpop: [idOrKeys, 'timeout'],\n\t      brpoplpush: ['source', 'destination'],\n\t      dbsize: [],\n\t      decrby: keyVal,\n\t      del: [idOrKeys],\n\t      discard: [],\n\t      exec: [],\n\t      exists: [idOrKeys],\n\t      expire: ['id', 'seconds'],\n\t      expireat: ['id', 'timestamp'],\n\t      flushdb: [],\n\t      // @todo: implement geolocation methods once available in Redis stable release\n\t      getbit: ['id', 'offset'],\n\t      getrange: ['id', 'start', 'end'],\n\t      hdel: ['id', ['field', 'fields']],\n\t      hexists: ['id', 'field'],\n\t      hincrby: ['id', 'field', 'value'],\n\t      hmset: ['id', 'values'],\n\t      hset: ['id', 'field', 'value'],\n\t      info: ['section'],\n\t      keys: [ 'pattern' ],\n\t      lastsave: [],\n\t      lindex: ['id', 'idx'],\n\t      linsert: ['id', 'position', 'pivot', 'value'],\n\t      lpush: ['id', ['value', 'values']],\n\t      lrange: ['id', 'start', 'stop'],\n\t      lrem: ['id', 'count', 'value'],\n\t      lset: ['id', 'idx', 'value'],\n\t      ltrim: ['id', 'start', 'stop'],\n\t      mset: ['values'],\n\t      multi: [],\n\t      object: ['subcommand', 'args'],\n\t      pexpire: ['id', 'milliseconds'],\n\t      pexpireat: ['id', 'timestamp'],\n\t      pfadd: ['id', ['element', 'elements']],\n\t      pfmerge: ['destkey', ['sourcekey', 'sourcekeys']],\n\t      ping: [],\n\t      psetex: ['id', 'milliseconds', 'value'],\n\t      publish: ['channel', 'message'],\n\t      randomkey: [],\n\t      rename: ['id', 'newkey'],\n\t      renamenx: ['id', 'newkey'],\n\t      restore: ['id', 'ttl', 'content'],\n\t      rpoplpush: ['source', 'destination'],\n\t      sadd: ['id', ['member', 'members']],\n\t      save: [],\n\t      set: ['id', 'value', {__opts__:['ex', 'px', 'nx', 'xx']}],\n\t      sdiffstore: ['destination', idOrKeys],\n\t      setbit: ['id', 'offset', 'value'],\n\t      setex: ['id', 'seconds', 'value'],\n\t      setrange: ['id', 'offset', 'value'],\n\t      sinterstore: ['destination', idOrKeys],\n\t      sismember: ['id', 'member'],\n\t      smove: ['id', 'destination', 'member'],\n\t      sort: ['id', {__opts__:['by', 'offset', 'count', 'get', 'direction', 'alpha', 'store']}],\n\t      spop: ['id', 'count'],\n\t      srem: ['id', ['member', 'members']],\n\t      sunionstore: ['destination', idOrKeys],\n\t      unwatch: [],\n\t      wait: ['numslaves', 'timeout'],\n\t      zadd: ['id', {__opts__: ['nx', 'xx', 'ch', 'incr', 'score', 'member', 'members']}],\n\t      zcount: ['id', 'min', 'max'],\n\t      zincrby: ['id', 'value', 'member'],\n\t      zinterstore: ['destination', idOrKeys, {__opts__: ['weight', 'weights', 'aggregate']}],\n\t      zlexcount: ['id', 'min', 'max'],\n\t      zrange: ['id', 'start', 'stop', {__opts__: ['withscores']}],\n\t      zrangebylex: ['id', 'min', 'max', {__opts__: ['offset', 'count']}],\n\t      zrangebyscore: ['id', 'min', 'max', {__opts__: ['withscores', 'offset', 'count']}],\n\t      zrem: ['id', 'member'],\n\t      zremrangebylex: ['id', 'min', 'max'],\n\t      zremrangebyscore: ['id', 'min', 'max'],\n\t      zrevrangebylex: ['id', 'max', 'min', {__opts__: ['offset', 'count']}],\n\t      zrevrangebyscore: ['id', 'max', 'min', {__opts__: ['withscores', 'offset', 'count']}],\n\t      zrevrank: ['id', 'member']\n\t    };\n\t\n\t  // unique argument key\n\t  commands.decr = commands.get = commands.dump = commands.hgetall = commands.hkeys = commands.hlen = commands.hstrlen = commands.hvals = commands.incr = commands.llen = commands.lpop = commands.persist = commands.pttl = commands.rpop = commands.scard = commands.smembers = commands.strlen = commands.ttl = commands.type = commands.zcard = ['id'];\n\t\n\t  // key value\n\t  commands.getset = commands.lpushx = keyVal;\n\t\n\t  // key key...\n\t  commands.del = commands.exists = commands.mget = commands.pfcount = commands.sdiff = commands.sinter = commands.sunion = commands.watch = [idOrKeys];\n\t\n\t  commands.incrby = commands.incrbyfloat = commands.decrby;\n\t  commands.brpop = commands.blpop;\n\t  commands.hget = commands.hexists;\n\t  commands.hmget = commands.hdel;\n\t  commands.hsetnx = commands.hset;\n\t  commands.msetnx = commands.mset;\n\t  commands.rpush = commands.lpush;\n\t  commands.hincrbyfloat = commands.hincrby;\n\t  commands.srandmember = commands.spop;\n\t  commands.zrevrange = commands.zrange;\n\t  commands.zscore = commands.zrevrank;\n\t\n\t  Object.keys(commands).forEach(function (command) {\n\t    KuzzleMemoryStorage.prototype[command] = function () {\n\t      var\n\t        args = Array.prototype.slice.call(arguments),\n\t        options = null,\n\t        cb,\n\t        query = {\n\t          controller: 'ms',\n\t          action: command\n\t        },\n\t        data = {};\n\t\n\t      if (typeof args[args.length - 1] === 'function') {\n\t        cb = args.pop();\n\t      }\n\t\n\t      if (args.length && typeof args[args.length - 1] === 'object' && Object.keys(args[args.length - 1]).length === 1 && args[args.length - 1].queuable !== undefined) {\n\t        options = args.pop();\n\t      }\n\t\n\t      commands[command].forEach(function (v, i) {\n\t        if (args[i] === undefined) {\n\t          return;\n\t        }\n\t\n\t        if (Array.isArray(v)) {\n\t          v = Array.isArray(args[i]) ? v[1] : v[0];\n\t        }\n\t\n\t        if (v === 'id') {\n\t          data._id = args[i];\n\t        }\n\t        else {\n\t          if (!data.body) {\n\t            data.body = {};\n\t          }\n\t\n\t          if (typeof v === 'object' && v.__opts__ !== undefined) {\n\t            v.__opts__.forEach(function (arg) {\n\t              if (args[i][arg] !== undefined) {\n\t                data.body[arg] = args[i][arg];\n\t              }\n\t            });\n\t          }\n\t          else {\n\t            data.body[v] = args[i];\n\t          }\n\t        }\n\t      });\n\t\n\t      this.kuzzle.query(query, data, options, cb);\n\t\n\t      return this;\n\t\n\t    };\n\t  });\n\t\n\t})();\n\t\n\tmodule.exports = KuzzleMemoryStorage;\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar\n\t  uuid = __webpack_require__(3);\n\t\n\t/**\n\t * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n\t *\n\t * @callback responseCallback\n\t * @param {Object} err - Error object, NULL if the query is successful\n\t * @param {Object} [data] - The content of the query response\n\t */\n\t\n\t/**\n\t * This object is the result of a subscription request, allowing to manipulate the subscription itself.\n\t *\n\t * In Kuzzle, you don’t exactly subscribe to a room or a topic but, instead, you subscribe to documents.\n\t *\n\t * What it means is that, to subscribe, you provide to Kuzzle a set of matching filters.\n\t * Once you have subscribed, if a pub/sub message is published matching your filters, or if a matching stored\n\t * document change (because it is created, updated or deleted), then you’ll receive a notification about it.\n\t *\n\t * @param {object} kuzzleDataCollection - an instantiated and valid kuzzle object\n\t * @param {object} [options] - subscription optional configuration\n\t * @constructor\n\t */\n\tfunction KuzzleRoom(kuzzleDataCollection, options) {\n\t  // Define properties\n\t  Object.defineProperties(this, {\n\t    // private properties\n\t    callback: {\n\t      value: null,\n\t      writable: true\n\t    },\n\t    channel: {\n\t      value: null,\n\t      writable: true\n\t    },\n\t    id: {\n\t      value: uuid.v4()\n\t    },\n\t    lastRenewal: {\n\t      value: null,\n\t      writable: true\n\t    },\n\t    notifier: {\n\t      value: null,\n\t      writable: true\n\t    },\n\t    queue: {\n\t      value: [],\n\t      writable: true\n\t    },\n\t    // Delay before allowing a subscription renewal\n\t    renewalDelay: {\n\t      value: 500\n\t    },\n\t    scope: {\n\t      value: options && options.scope ? options.scope : 'all'\n\t    },\n\t    state: {\n\t      value: options && options.state ? options.state : 'done'\n\t    },\n\t    subscribing: {\n\t      value: false,\n\t      writable: true\n\t    },\n\t    users: {\n\t      value: options && options.users ? options.users : 'none'\n\t    },\n\t    // read-only properties\n\t    collection: {\n\t      value: kuzzleDataCollection,\n\t      enumerable: true\n\t    },\n\t    kuzzle: {\n\t      value: kuzzleDataCollection.kuzzle,\n\t      enumerable: true\n\t    },\n\t    // writable properties\n\t    filters: {\n\t      value: null,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    headers: {\n\t      value: JSON.parse(JSON.stringify(kuzzleDataCollection.headers)),\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    metadata: {\n\t      value: (options && options.metadata) ? options.metadata : {},\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    roomId: {\n\t      value: null,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    subscribeToSelf: {\n\t      value: options && typeof options.subscribeToSelf === 'boolean' ? options.subscribeToSelf : true,\n\t      enumerable: true,\n\t      writable: true\n\t    }\n\t  });\n\t\n\t  if (this.kuzzle.bluebird) {\n\t    return this.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var whitelist = ['count'];\n\t\n\t        return passes && whitelist.indexOf(name) !== -1;\n\t      }\n\t    });\n\t  }\n\t\n\t  return this;\n\t}\n\t\n\t/**\n\t * Returns the number of other subscriptions on that room.\n\t *\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzleRoom.prototype.count = function (cb) {\n\t  var data;\n\t\n\t  this.kuzzle.callbackRequired('KuzzleRoom.count', cb);\n\t\n\t  data = this.kuzzle.addHeaders({body: {roomId: this.roomId}}, this.headers);\n\t\n\t  if (!isReady.call(this)) {\n\t    this.queue.push({action: 'count', args: [cb]});\n\t    return;\n\t  }\n\t\n\t  if (!this.roomId) {\n\t    throw new Error('KuzzleRoom.count: cannot count subscriptions on an inactive room');\n\t  }\n\t\n\t  this.kuzzle.query(this.collection.buildQueryArgs('subscribe', 'count'), data, function (err, res) {\n\t    cb(err, res && res.result.count);\n\t  });\n\t};\n\t\n\t/**\n\t * Renew the subscription using new filters\n\t *\n\t * @param {object} [filters] - Filters in Kuzzle DSL format\n\t * @param {responseCallback} cb - called for each new notification\n\t */\n\tKuzzleRoom.prototype.renew = function (filters, cb) {\n\t  var\n\t    now = Date.now(),\n\t    subscribeQuery = {\n\t      scope: this.scope,\n\t      state: this.state,\n\t      users: this.users\n\t    },\n\t    self = this;\n\t\n\t  if (!cb && filters && typeof filters === 'function') {\n\t    cb = filters;\n\t    filters = null;\n\t  }\n\t\n\t  self.kuzzle.callbackRequired('KuzzleRoom.renew', cb);\n\t\n\t  /*\n\t    Skip subscription renewal if another one was performed a moment before\n\t   */\n\t  if (self.lastRenewal && (now - self.lastRenewal) <= self.renewalDelay) {\n\t    return;\n\t  }\n\t\n\t  if (filters) {\n\t    self.filters = filters;\n\t  }\n\t\n\t  /*\n\t   if not yet connected, register itself to the subscriptions list and wait for the\n\t   main Kuzzle object to renew once online\n\t    */\n\t  if (self.kuzzle.state !== 'connected') {\n\t    self.callback = cb;\n\t    self.kuzzle.subscriptions.pending[self.id] = self;\n\t    return;\n\t  }\n\t\n\t  if (self.subscribing) {\n\t    self.queue.push({action: 'renew', args: [filters, cb]});\n\t    return;\n\t  }\n\t\n\t  self.unsubscribe();\n\t  self.roomId = null;\n\t  self.subscribing = true;\n\t  self.callback = cb;\n\t  self.kuzzle.subscriptions.pending[self.id] = self;\n\t\n\t  subscribeQuery.body = self.filters;\n\t  subscribeQuery = self.kuzzle.addHeaders(subscribeQuery, this.headers);\n\t\n\t  self.kuzzle.query(self.collection.buildQueryArgs('subscribe', 'on'), subscribeQuery, {metadata: self.metadata}, function (error, response) {\n\t    delete self.kuzzle.subscriptions.pending[self.id];\n\t    self.subscribing = false;\n\t\n\t    if (error) {\n\t      self.queue = [];\n\t      throw new Error('Error during Kuzzle subscription: ' + error.message);\n\t    }\n\t\n\t    self.lastRenewal = now;\n\t    self.roomId = response.result.roomId;\n\t    self.channel = response.result.channel;\n\t\n\t    if (!self.kuzzle.subscriptions[self.roomId]) {\n\t      self.kuzzle.subscriptions[self.roomId] = {};\n\t    }\n\t\n\t    self.kuzzle.subscriptions[self.roomId][self.id] = self;\n\t\n\t    self.notifier = notificationCallback.bind(self);\n\t    self.kuzzle.network.on(self.channel, self.notifier);\n\t\n\t    dequeue.call(self);\n\t  });\n\t};\n\t\n\t/**\n\t * Unsubscribes from Kuzzle.\n\t *\n\t * Stop listening immediately. If there is no listener left on that room, sends an unsubscribe request to Kuzzle, once\n\t * pending subscriptions reaches 0, and only if there is still no listener on that room.\n\t * We wait for pending subscriptions to finish to avoid unsubscribing while another subscription on that room is\n\t *\n\t * @return {*} this\n\t */\n\tKuzzleRoom.prototype.unsubscribe = function () {\n\t  var\n\t    self = this,\n\t    room = self.roomId,\n\t    interval;\n\t\n\t  if (!isReady.call(this)) {\n\t    self.queue.push({action: 'unsubscribe', args: []});\n\t    return self;\n\t  }\n\t\n\t  if (room) {\n\t    self.kuzzle.network.off(self.channel, this.notifier);\n\t\n\t    if (Object.keys(self.kuzzle.subscriptions[room]).length === 1) {\n\t      delete self.kuzzle.subscriptions[room];\n\t\n\t      if (Object.keys(self.kuzzle.subscriptions.pending).length === 0) {\n\t        self.kuzzle.query(self.collection.buildQueryArgs('subscribe', 'off'), {body: {roomId: room}});\n\t      } else {\n\t        interval = setInterval(function () {\n\t          if (Object.keys(self.kuzzle.subscriptions.pending).length === 0) {\n\t            if (!self.kuzzle.subscriptions[room]) {\n\t              self.kuzzle.query(self.collection.buildQueryArgs('subscribe', 'off'), {body: {roomId: room}});\n\t            }\n\t            clearInterval(interval);\n\t          }\n\t        }, 100);\n\t      }\n\t    } else {\n\t      delete self.kuzzle.subscriptions[room][self.id];\n\t    }\n\t\n\t    self.roomId = null;\n\t  }\n\t\n\t  return self;\n\t};\n\t\n\t/**\n\t * Helper function allowing to set headers while chaining calls.\n\t *\n\t * If the replace argument is set to true, replace the current headers with the provided content.\n\t * Otherwise, it appends the content to the current headers, only replacing already existing values\n\t *\n\t * @param content - new headers content\n\t * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n\t */\n\tKuzzleRoom.prototype.setHeaders = function (content, replace) {\n\t  this.kuzzle.setHeaders.call(this, content, replace);\n\t  return this;\n\t};\n\t\n\t/**\n\t * Callback called by the network handler when a message is sent to the subscribed room ID\n\t * Calls the registered callback if the notification passes the subscription filters\n\t *\n\t * @param {object} data - data\n\t * @returns {*}\n\t */\n\tfunction notificationCallback (data) {\n\t  if (data.error) {\n\t    return this.callback(data.error);\n\t  }\n\t\n\t  if (data.action === 'jwtTokenExpired') {\n\t    this.kuzzle.jwtToken = undefined;\n\t    return this.kuzzle.emitEvent('jwtTokenExpired');\n\t  }\n\t\n\t  if (this.kuzzle.requestHistory[data.requestId]) {\n\t    if (this.subscribeToSelf) {\n\t      this.callback(null, data);\n\t    }\n\t    delete this.kuzzle.requestHistory[data.requestId];\n\t  } else {\n\t    this.callback(null, data);\n\t  }\n\t}\n\t\n\t\n\t/**\n\t * Dequeue actions performed while subscription was being renewed\n\t */\n\tfunction dequeue () {\n\t  var element;\n\t\n\t  while (this.queue.length > 0) {\n\t    element = this.queue.shift();\n\t\n\t    this[element.action].apply(this, element.args);\n\t  }\n\t}\n\t\n\tfunction isReady() {\n\t  return this.kuzzle.state === 'connected' && !this.subscribing;\n\t}\n\t\n\tmodule.exports = KuzzleRoom;\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t *\n\t * @param host\n\t * @param wsPort\n\t * @param ioPort\n\t * @returns {Object} tnstantiated WebSocket/Socket.IO object\n\t */\n\t\n\tfunction network(host, wsPort, ioPort, sslConnection) {\n\t  // Web browser / NodeJS websocket handling\n\t  if (typeof window !== 'undefined') {\n\t    // use native websockets if the browser supports it\n\t    if (typeof WebSocket !== 'undefined') {\n\t      return new (__webpack_require__(11))(host, wsPort, sslConnection);\n\t    }\n\t    // otherwise fallback to socket.io, if available\n\t    else if (window.io) {\n\t      return new (__webpack_require__(10))(host, ioPort, sslConnection);\n\t    }\n\t\n\t    throw new Error('Aborting: no websocket support detected and no socket.io library loaded either.');\n\t  }\n\t\n\t  return new (__webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"./wrappers/wsnode\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())))(host, wsPort, sslConnection);\n\t}\n\t\n\tmodule.exports = network;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\tfunction SocketIO(host, port, ssl) {\n\t  this.host = host;\n\t  this.port = port;\n\t  this.ssl = ssl;\n\t  this.socket = null;\n\t\n\t  /**\n\t   * Creates a new socket from the provided arguments\n\t   *\n\t   * @constructor\n\t   * @param {boolean} autoReconnect\n\t   * @param {int} reconnectionDelay\n\t   */\n\t  this.connect = function (autoReconnect, reconnectionDelay) {\n\t    this.socket = window.io((this.ssl ? 'https://' : 'http://') + this.host + ':' + this.port, {\n\t      reconnection: autoReconnect,\n\t      reconnectionDelay: reconnectionDelay,\n\t      forceNew: true\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Fires the provided callback whence a connection is established\n\t   *\n\t   * @param {function} callback\n\t   */\n\t  this.onConnect = function (callback) {\n\t    this.socket.on('connect', callback);\n\t  };\n\t\n\t  /**\n\t   * Fires the provided callback whenever a connection error is received\n\t   * @param {function} callback\n\t   */\n\t  this.onConnectError = function (callback) {\n\t    this.socket.on('connect_error', callback);\n\t  };\n\t\n\t  /**\n\t   * Fires the provided callback whenever a disconnection occurred\n\t   * @param {function} callback\n\t   */\n\t  this.onDisconnect = function (callback) {\n\t    this.socket.on('disconnect', callback);\n\t  };\n\t\n\t  /**\n\t   * Fires the provided callback whenever a connection has been reestablished\n\t   * @param {function} callback\n\t   */\n\t  this.onReconnect = function (callback) {\n\t    this.socket.on('reconnect', callback);\n\t  };\n\t\n\t  /**\n\t   * Registers a callback on a room. Once 1 message is received, fires the\n\t   * callback and unregister it afterward.\n\t   *\n\t   * @param {string} roomId\n\t   * @param {function} callback\n\t   */\n\t  this.once = function (roomId, callback) {\n\t    this.socket.once(roomId, callback);\n\t  };\n\t\n\t  /**\n\t   * Registers a callback on a room.\n\t   *\n\t   * @param {string} roomId\n\t   * @param {function} callback\n\t   */\n\t  this.on = function (roomId, callback) {\n\t    this.socket.on(roomId, callback);\n\t  };\n\t\n\t  /**\n\t   * Unregisters a callback from a room.\n\t   *\n\t   * @param {string} roomId\n\t   * @param {function} callback\n\t   */\n\t  this.off = function (roomId, callback) {\n\t    this.socket.off(roomId, callback);\n\t  };\n\t\n\t\n\t  /**\n\t   * Sends a payload to the connected server\n\t   *\n\t   * @param {Object} payload\n\t   */\n\t  this.send = function (payload) {\n\t    this.socket.emit('kuzzle', payload);\n\t  };\n\t\n\t  /**\n\t   * Closes the connection\n\t   */\n\t  this.close = function () {\n\t    this.socket.close();\n\t    this.socket = null;\n\t  };\n\t}\n\t\n\tmodule.exports = SocketIO;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\tfunction WSBrowsers(host, port, ssl) {\n\t  var self = this;\n\t  this.host = host;\n\t  this.port = port;\n\t  this.ssl = ssl;\n\t  this.client = null;\n\t  this.retrying = false;\n\t\n\t  /*\n\t     Listeners are stored using the following format:\n\t     roomId: {\n\t     fn: callback_function,\n\t     once: boolean\n\t     }\n\t   */\n\t  this.listeners = {\n\t    error: [],\n\t    connect: [],\n\t    disconnect: [],\n\t    reconnect: []\n\t  };\n\t\n\t  /**\n\t   * Creates a new socket from the provided arguments\n\t   *\n\t   * @constructor\n\t   * @param {boolean} autoReconnect\n\t   * @param {int} reconnectionDelay\n\t   * @returns {Object} Socket\n\t   */\n\t  this.connect = function (autoReconnect, reconnectionDelay) {\n\t    this.client = new WebSocket((this.ssl ? 'wss://' : 'ws://') + this.host + ':' + this.port);\n\t\n\t    this.client.onopen = function () {\n\t      if (self.retrying) {\n\t        poke(self.listeners, 'reconnect');\n\t      }\n\t      else {\n\t        poke(self.listeners, 'connect');\n\t      }\n\t    };\n\t\n\t    this.client.onclose = function (code, message) {\n\t      if (code === 1000) {\n\t        poke(self.listeners, 'disconnect');\n\t      }\n\t      else {\n\t        onClientError.call(self, autoReconnect, reconnectionDelay, message);\n\t      }\n\t    };\n\t\n\t    this.client.onerror = function (error) {\n\t      onClientError.call(self, autoReconnect, reconnectionDelay, error);\n\t    };\n\t\n\t    this.client.onmessage = function (payload) {\n\t      var data = JSON.parse(payload.data);\n\t\n\t      if (data.room && self.listeners[data.room]) {\n\t        poke(self.listeners, data.room, data);\n\t      }\n\t    };\n\t  };\n\t\n\t  /**\n\t   * Fires the provided callback whence a connection is established\n\t   *\n\t   * @param {function} callback\n\t   */\n\t  this.onConnect = function (callback) {\n\t    this.listeners.connect.push({\n\t      fn: callback,\n\t      keep: true\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Fires the provided callback whenever a connection error is received\n\t   * @param {function} callback\n\t   */\n\t  this.onConnectError = function (callback) {\n\t    this.listeners.error.push({\n\t      fn: callback,\n\t      keep: true\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Fires the provided callback whenever a disconnection occurred\n\t   * @param {function} callback\n\t   */\n\t  this.onDisconnect = function (callback) {\n\t    this.listeners.disconnect.push({\n\t      fn: callback,\n\t      keep: true\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Fires the provided callback whenever a connection has been reestablished\n\t   * @param {function} callback\n\t   */\n\t  this.onReconnect = function (callback) {\n\t    this.listeners.reconnect.push({\n\t      fn: callback,\n\t      keep: true\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Registers a callback on a room. Once 1 message is received, fires the\n\t   * callback and unregister it afterward.\n\t   *\n\t   * @param {string} roomId\n\t   * @param {function} callback\n\t   */\n\t  this.once = function (roomId, callback) {\n\t    if (!this.listeners[roomId]) {\n\t      this.listeners[roomId] = [];\n\t    }\n\t\n\t    this.listeners[roomId].push({\n\t      fn: callback,\n\t      keep: false\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Registers a callback on a room.\n\t   *\n\t   * @param {string} roomId\n\t   * @param {function} callback\n\t   */\n\t  this.on = function (roomId, callback) {\n\t    if (!this.listeners[roomId]) {\n\t      this.listeners[roomId] = [];\n\t    }\n\t\n\t    this.listeners[roomId].push({\n\t      fn: callback,\n\t      keep: true\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Unregisters a callback from a room.\n\t   *\n\t   * @param {string} roomId\n\t   * @param {function} callback\n\t   */\n\t  this.off = function (roomId, callback) {\n\t    var index;\n\t\n\t    if (this.listeners[roomId]) {\n\t      index = this.listeners[roomId].findIndex(function (listener) {\n\t        return listener.fn === callback;\n\t      });\n\t\n\t      if (index !== -1) {\n\t        if (this.listeners[roomId].length === 1 && ['error', 'connect', 'disconnect', 'reconnect'].indexOf(roomId) === -1) {\n\t          delete this.listeners[roomId];\n\t        }\n\t        else {\n\t          this.listeners[roomId].splice(index, 1);\n\t        }\n\t      }\n\t    }\n\t  };\n\t\n\t\n\t  /**\n\t   * Sends a payload to the connected server\n\t   *\n\t   * @param {Object} payload\n\t   */\n\t  this.send = function (payload) {\n\t    if (this.client && this.client.readyState === this.client.OPEN) {\n\t      this.client.send(JSON.stringify(payload));\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Closes the connection\n\t   */\n\t  this.close = function () {\n\t    this.listeners = {\n\t      error: [],\n\t      connect: [],\n\t      disconnect: [],\n\t      reconnect: []\n\t    };\n\t\n\t    this.retrying = false;\n\t    this.client.close();\n\t    this.client = null;\n\t  };\n\t}\n\t\n\t/**\n\t * Executes all registered listeners in the provided\n\t * \"listeners\" structure.\n\t *\n\t * Listeners are of the following format:\n\t * [\n\t *    { fn: callback, once: boolean },\n\t *    ...\n\t * ]\n\t *\n\t * @private\n\t * @param {Object} listeners\n\t * @param {string} roomId\n\t * @param {Object} [payload]\n\t */\n\tfunction poke (listeners, roomId, payload) {\n\t  var\n\t    i,\n\t    length = listeners[roomId].length;\n\t\n\t  for (i = 0; i < length; ++i) {\n\t    listeners[roomId][i].fn(payload);\n\t\n\t    if (!listeners[roomId][i].keep) {\n\t      if (listeners[roomId].length > 1) {\n\t        listeners[roomId].splice(i, 1);\n\t        --i;\n\t        --length;\n\t      }\n\t      else {\n\t        delete listeners[roomId];\n\t      }\n\t    }\n\t  }\n\t}\n\t\n\t/**\n\t * Called when the connection closes with an error state\n\t *\n\t * @param {boolean} autoReconnect\n\t * @param {number} reconnectionDelay\n\t * @param {string|Object} message\n\t */\n\tfunction onClientError(autoReconnect, reconnectionDelay, message) {\n\t  var self = this;\n\t\n\t  if (autoReconnect) {\n\t    self.retrying = true;\n\t    setTimeout(function () {\n\t      self.connect(autoReconnect, reconnectionDelay);\n\t    }, reconnectionDelay);\n\t  }\n\t\n\t  poke(self.listeners, 'error', message);\n\t}\n\t\n\t\n\tmodule.exports = WSBrowsers;\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar\n\t  KuzzleSecurityDocument = __webpack_require__(1);\n\t\n\tfunction KuzzleProfile(kuzzleSecurity, id, content) {\n\t\n\t  KuzzleSecurityDocument.call(this, kuzzleSecurity, id, content);\n\t\n\t  // Define properties\n\t  Object.defineProperties(this, {\n\t    // private properties\n\t    deleteActionName: {\n\t      value: 'deleteProfile'\n\t    },\n\t    updateActionName: {\n\t      value: 'updateProfile'\n\t    }\n\t  });\n\t\n\t  // promisifying\n\t  if (kuzzleSecurity.kuzzle.bluebird) {\n\t    return kuzzleSecurity.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var whitelist = ['hydrate', 'save'];\n\t\n\t        return passes && whitelist.indexOf(name) !== -1;\n\t      }\n\t    });\n\t  }\n\t\n\t}\n\t\n\tKuzzleProfile.prototype = Object.create(KuzzleSecurityDocument.prototype, {\n\t  constructor: {\n\t    value: KuzzleProfile\n\t  }\n\t});\n\t\n\t/**\n\t * Persist to the persistent layer the current profile\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {KuzzleProfile} this\n\t */\n\tKuzzleProfile.prototype.save = function (options, cb) {\n\t  var\n\t    data,\n\t    self = this;\n\t\n\t  if (!this.content.policies) {\n\t    throw new Error('Argument \"policies\" is mandatory in a profile. This argument contains an array of objects.');\n\t  }\n\t\n\t  if (options && cb === undefined && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data = this.serialize();\n\t\n\t  self.kuzzle.query(self.kuzzleSecurity.buildQueryArgs('createOrReplaceProfile'), data, options, cb && function (error) {\n\t    cb(error, error ? undefined : self);\n\t  });\n\t\n\t  return self;\n\t};\n\t\n\t\n\t/**\n\t * Add a policy in the policies list\n\t * @param {Object} policy - must be an object containing at least a \"roleId\" member which must be a string.\n\t *\n\t * @returns {KuzzleProfile} this\n\t */\n\tKuzzleProfile.prototype.addPolicy = function (policy) {\n\t\n\t  if (typeof policy !== 'object' || typeof policy.roleId !== 'string') {\n\t    throw new Error('Parameter \"policies\" must be an object containing at least a \"roleId\" member which must be a string.');\n\t  }\n\t\n\t  if (!this.content.policies) {\n\t    this.content.policies = [];\n\t  }\n\t\n\t  this.content.policies.push(policy);\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Set policies list\n\t * @param {Array} policies - must be an array of objects containing at least a \"roleId\" member which must be a string\n\t *\n\t * @returns {KuzzleProfile} this\n\t */\n\tKuzzleProfile.prototype.setPolicies = function (policies) {\n\t\n\t  if (!Array.isArray(policies)) {\n\t    throw new Error('Parameter \"policies\" must be an array of objects containing at least a \"roleId\" member which must be a string');\n\t  }\n\t\n\t  policies.map(function (policy) {\n\t    if (typeof policy !== 'object' || typeof policy.roleId !== 'string') {\n\t      throw new Error('Parameter \"policies\" must be an array of objects containing at least a \"roleId\" member which must be a string');\n\t    }\n\t  });\n\t\n\t  this.content.policies = policies;\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Serialize this object into a JSON object\n\t *\n\t * @return {object} JSON object representing this securityDocument\n\t */\n\tKuzzleProfile.prototype.serialize = function () {\n\t  var\n\t    data = {};\n\t\n\t  if (this.id) {\n\t    data._id = this.id;\n\t  }\n\t\n\t  data.body = this.content;\n\t\n\t  return data;\n\t};\n\t\n\t/**\n\t * Returns the list of policies associated to this profile.\n\t * Each policy element is an array of objects containing at least a \"roleId\" member which must be a string\n\t *\n\t * @return {object} an array of policies\n\t */\n\tKuzzleProfile.prototype.getPolicies = function () {\n\t  return this.content.policies;\n\t};\n\t\n\tmodule.exports = KuzzleProfile;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar KuzzleSecurityDocument = __webpack_require__(1);\n\t\n\tfunction KuzzleRole(kuzzleSecurity, id, content) {\n\t\n\t  KuzzleSecurityDocument.call(this, kuzzleSecurity, id, content);\n\t\n\t  // Define properties\n\t  Object.defineProperties(this, {\n\t    // private properties\n\t    deleteActionName: {\n\t      value: 'deleteRole'\n\t    },\n\t    updateActionName: {\n\t      value: 'updateRole'\n\t    }\n\t  });\n\t\n\t  // promisifying\n\t  if (kuzzleSecurity.kuzzle.bluebird) {\n\t    return kuzzleSecurity.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var whitelist = ['save'];\n\t\n\t        return passes && whitelist.indexOf(name) !== -1;\n\t      }\n\t    });\n\t  }\n\t\n\t}\n\t\n\tKuzzleRole.prototype = Object.create(KuzzleSecurityDocument.prototype, {\n\t  constructor: {\n\t    value: KuzzleRole\n\t  }\n\t});\n\t\n\t/**\n\t * Saves this role into Kuzzle.\n\t *\n\t * If this is a new role, this function will create it in Kuzzle.\n\t * Otherwise, this method will replace the latest version of this role in Kuzzle by the current content\n\t * of this object.\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {KuzzleRole} this object\n\t */\n\tKuzzleRole.prototype.save = function (options, cb) {\n\t  var\n\t    data = this.serialize(),\n\t    self = this;\n\t\n\t  if (options && cb === undefined && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.query(this.kuzzleSecurity.buildQueryArgs('createOrReplaceRole'), data, options, cb && function (error) {\n\t    cb(error, error ? undefined : self);\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\tmodule.exports = KuzzleRole;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar\n\t  KuzzleRole = __webpack_require__(13),\n\t  KuzzleProfile = __webpack_require__(12),\n\t  KuzzleUser = __webpack_require__(2);\n\t\n\t/**\n\t * Kuzzle security constructor\n\t *\n\t * @param kuzzle\n\t * @returns {KuzzleSecurity}\n\t * @constructor\n\t */\n\tfunction KuzzleSecurity(kuzzle) {\n\t\n\t  Object.defineProperty(this, 'kuzzle', {\n\t    value: kuzzle\n\t  });\n\t\n\t  Object.defineProperty(this, 'buildQueryArgs', {\n\t    value: function (action) {\n\t      return {\n\t        controller: 'security',\n\t        action: action\n\t      };\n\t    }\n\t  });\n\t\n\t  if (this.kuzzle.bluebird) {\n\t    return this.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var blacklist = ['roleFactory', 'profileFactory', 'userFactory', 'isActionAllowed'];\n\t\n\t        return passes && blacklist.indexOf(name) === -1;\n\t      }\n\t    });\n\t  }\n\t\n\t  return this;\n\t}\n\t\n\t\n\t/**\n\t * Retrieve a single Role using its unique role ID.\n\t *\n\t * @param {string} id\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - returns Kuzzle's response\n\t */\n\tKuzzleSecurity.prototype.getRole = function (id, options, cb) {\n\t  var\n\t    data,\n\t    self = this;\n\t\n\t  if (!id) {\n\t    throw new Error('Id parameter is mandatory for getRole function');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data = {_id: id};\n\t\n\t  self.kuzzle.callbackRequired('KuzzleSecurity.getRole', cb);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('getRole'), data, options, function (err, response) {\n\t    cb(err, err ? undefined : new KuzzleRole(self, response.result._id, response.result._source));\n\t  });\n\t};\n\t\n\t/**\n\t * Executes a search on roles according to a filter\n\t *\n\t * /!\\ There is a small delay between role creation and their existence in our persistent search layer,\n\t * usually a couple of seconds.\n\t * That means that a role that was just been created won’t be returned by this function.\n\t *\n\t * @param {Object} filters - this object can contains an array `indexes` with a list of index id, a integer `from` and a integer `size`\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - returns Kuzzle's response\n\t *\n\t */\n\tKuzzleSecurity.prototype.searchRoles = function (filters, options, cb) {\n\t  var\n\t    self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.callbackRequired('KuzzleSecurity.searchRoles', cb);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('searchRoles'), {body: filters}, options, function (error, result) {\n\t    var documents;\n\t\n\t    if (error) {\n\t      return cb(error);\n\t    }\n\t\n\t    documents = result.result.hits.map(function (doc) {\n\t      return new KuzzleRole(self, doc._id, doc._source);\n\t    });\n\t\n\t    cb(null, { total: result.result.total, roles: documents });\n\t  });\n\t};\n\t\n\t/**\n\t * Create a new role in Kuzzle.\n\t *\n\t * Takes an optional argument object with the following property:\n\t *    - replaceIfExist (boolean, default: false):\n\t *        If the same role already exists: throw an error if sets to false.\n\t *        Replace the existing role otherwise\n\t *\n\t * @param {string} id - role identifier\n\t * @param {object} content - a plain javascript object representing the role\n\t * @param {object} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - (optional) Handles the query response\n\t */\n\tKuzzleSecurity.prototype.createRole = function (id, content, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {},\n\t    action = 'createRole';\n\t\n\t  if (!id || typeof id !== 'string') {\n\t    throw new Error('KuzzleSecurity.createRole: cannot create a role without a role ID');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data._id = id;\n\t  data.body = content;\n\t\n\t  if (options) {\n\t    action = options.replaceIfExist ? 'createOrReplaceRole' : 'createRole';\n\t  }\n\t\n\t  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n\t    cb(err, err ? undefined : new KuzzleRole(self, res.result._id, res.result._source));\n\t  });\n\t};\n\t\n\t\n\t/**\n\t * Update a role in Kuzzle.\n\t *\n\t * @param {string} id - role identifier\n\t * @param {object} content - a plain javascript object representing the role's modification\n\t * @param {object} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - (optional) Handles the query response\n\t * @returns {KuzzleSecurity} this object\n\t */\n\tKuzzleSecurity.prototype.updateRole = function (id, content, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {_id: id, body: content},\n\t    action = 'updateRole';\n\t\n\t  if (!id || typeof id !== 'string') {\n\t    throw new Error('KuzzleSecurity.updateRole: cannot update a role without a role ID');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err) {\n\t    cb(err, err ? undefined : new KuzzleRole(self, id, content));\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Delete role.\n\t *\n\t * There is a small delay between role deletion and their deletion in our advanced search layer,\n\t * usually a couple of seconds.\n\t * That means that a role that was just been delete will be returned by this function\n\t *\n\t *\n\t * @param {string} id - Role id to delete\n\t * @param {object} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {KuzzleSecurity} this object\n\t */\n\tKuzzleSecurity.prototype.deleteRole = function (id, options, cb) {\n\t  var data = {_id: id};\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.kuzzle.query(this.buildQueryArgs('deleteRole'), data, options, cb && function (err, res) {\n\t    cb(err, err ? undefined : res.result._id);\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Instantiate a new KuzzleRole object. Workaround to the module.exports limitation, preventing multiple\n\t * constructors to be exposed without having to use a factory or a composed object.\n\t *\n\t * @param {string} id - role id\n\t * @param {object} content - role content\n\t * @constructor\n\t */\n\tKuzzleSecurity.prototype.roleFactory = function(id, content) {\n\t  return new KuzzleRole(this, id, content);\n\t};\n\t\n\t\n\t/**\n\t * Get a specific profile from kuzzle\n\t *\n\t *\n\t * @param {string} id\n\t * @param {object} [options] - (optional) arguments\n\t * @param {responseCallback} cb - returns Kuzzle's response\n\t */\n\tKuzzleSecurity.prototype.getProfile = function (id, options, cb) {\n\t  var\n\t    data,\n\t    self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  if (!id || typeof id !== 'string') {\n\t    throw new Error('Id parameter is mandatory for getProfile function');\n\t  }\n\t\n\t\n\t  data = {_id: id};\n\t\n\t  self.kuzzle.callbackRequired('KuzzleSecurity.getProfile', cb);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('getProfile'), data, options, function (error, response) {\n\t    cb(error, error ? undefined : new KuzzleProfile(self, response.result._id, response.result._source));\n\t  });\n\t};\n\t\n\t/**\n\t * Executes a search on profiles according to a filter\n\t *\n\t *\n\t * /!\\ There is a small delay between profile creation and their existence in our persistent search layer,\n\t * usually a couple of seconds.\n\t * That means that a profile that was just been created won’t be returned by this function.\n\t *\n\t * @param {Object} filters - this object can contains an array `roles` with a list of roles id, a integer `from` and a integer `size`\n\t * @param {object} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - returns Kuzzle's response\n\t */\n\tKuzzleSecurity.prototype.searchProfiles = function (filters, options, cb) {\n\t  var\n\t    self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.callbackRequired('KuzzleSecurity.searchProfiles', cb);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('searchProfiles'), {body: filters}, options, function (error, response) {\n\t    var documents;\n\t\n\t    if (error) {\n\t      return cb(error);\n\t    }\n\t\n\t    documents = response.result.hits.map(function (doc) {\n\t      return new KuzzleProfile(self, doc._id, doc._source);\n\t    });\n\t\n\t    cb(null, { total: response.result.total, profiles: documents });\n\t  });\n\t};\n\t\n\t/**\n\t * Create a new profile in Kuzzle.\n\t *\n\t * Takes an optional argument object with the following property:\n\t *    - replaceIfExist (boolean, default: false):\n\t *        If the same profile already exists: throw an error if sets to false.\n\t *        Replace the existing profile otherwise\n\t *\n\t * @param {string} id - profile identifier\n\t * @param {object} content - attribute `roles` in `content` must only contains an array of role id\n\t * @param {object} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - (optional) Handles the query response\n\t */\n\tKuzzleSecurity.prototype.createProfile = function (id, content, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {},\n\t    action = 'createProfile';\n\t\n\t  if (!id || typeof id !== 'string') {\n\t    throw new Error('KuzzleSecurity.createProfile: cannot create a profile without a profile ID');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data._id = id;\n\t  data.body = content;\n\t\n\t  if (options) {\n\t    action = options.replaceIfExist ? 'createOrReplaceProfile' : 'createProfile';\n\t  }\n\t\n\t  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n\t    cb(err, err ? undefined : new KuzzleProfile(self, res.result._id, res.result._source));\n\t  });\n\t};\n\t\n\t\n\t/**\n\t * Update a profile in Kuzzle.\n\t *\n\t * @param {string} id - profile identifier\n\t * @param {object} content - a plain javascript object representing the profile's modification\n\t * @param {object} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - (optional) Handles the query response\n\t * @returns {KuzzleSecurity} this object\n\t */\n\tKuzzleSecurity.prototype.updateProfile = function (id, content, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {},\n\t    action = 'updateProfile';\n\t\n\t  if (!id || typeof id !== 'string') {\n\t    throw new Error('KuzzleSecurity.updateProfile: cannot update a profile without a profile ID');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data._id = id;\n\t  data.body = content;\n\t\n\t  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n\t    var updatedContent = {};\n\t\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    Object.keys(res.result._source).forEach(function (property) {\n\t      updatedContent[property] = res.result._source[property];\n\t    });\n\t\n\t    cb(null, new KuzzleProfile(self, res.result._id, updatedContent));\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Delete profile.\n\t *\n\t * There is a small delay between profile deletion and their deletion in our advanced search layer,\n\t * usually a couple of seconds.\n\t * That means that a profile that was just been delete will be returned by this function\n\t *\n\t *\n\t * @param {string} id - Profile id to delete\n\t * @param {object} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {KuzzleSecurity} this object\n\t */\n\tKuzzleSecurity.prototype.deleteProfile = function (id, options, cb) {\n\t  var data = {_id: id};\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.kuzzle.query(this.buildQueryArgs('deleteProfile'), data, options, cb && function (err, res) {\n\t    cb(err, err ? undefined : res.result._id);\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Instantiate a new KuzzleProfile object. Workaround to the module.exports limitation, preventing multiple\n\t * constructors to be exposed without having to use a factory or a composed object.\n\t *\n\t * @param {string} id - profile id\n\t * @param {object} content - profile content\n\t * @constructor\n\t */\n\tKuzzleSecurity.prototype.profileFactory = function(id, content) {\n\t  return new KuzzleProfile(this, id, content);\n\t};\n\t\n\t/**\n\t * Get a specific user from kuzzle using its unique ID\n\t *\n\t * @param {string} id\n\t * @param {object} [options] - (optional) arguments\n\t * @param {responseCallback} cb - returns Kuzzle's response\n\t */\n\tKuzzleSecurity.prototype.getUser = function (id, options, cb) {\n\t  var\n\t    data = {_id: id},\n\t    self = this;\n\t\n\t  if (!id || typeof id !== 'string') {\n\t    throw new Error('Id parameter is mandatory for getUser function');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.callbackRequired('KuzzleSecurity.getUser', cb);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('getUser'), data, options, function (err, response) {\n\t    cb(err, err ? undefined : new KuzzleUser(self, response.result._id, response.result._source));\n\t  });\n\t};\n\t\n\t/**\n\t * Executes a search on user according to a filter\n\t *\n\t * /!\\ There is a small delay between user creation and their existence in our persistent search layer,\n\t * usually a couple of seconds.\n\t * That means that a user that was just been created won’t be returned by this function.\n\t *\n\t * @param {Object} filters - same filters as documents filters\n\t * @param {object} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - returns Kuzzle's response\n\t */\n\tKuzzleSecurity.prototype.searchUsers = function (filters, options, cb) {\n\t  var\n\t    self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.callbackRequired('KuzzleSecurity.searchUsers', cb);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('searchUsers'), {body: filters}, options, function (error, response) {\n\t    var documents;\n\t\n\t    if (error) {\n\t      return cb(error);\n\t    }\n\t\n\t    documents = response.result.hits.map(function (doc) {\n\t      return new KuzzleUser(self, doc._id, doc._source);\n\t    });\n\t\n\t    cb(null, { total: response.result.total, users: documents });\n\t  });\n\t};\n\t\n\t/**\n\t * Create a new user in Kuzzle.\n\t *\n\t * Takes an optional argument object with the following property:\n\t *    - replaceIfExist (boolean, default: false):\n\t *        If the same user already exists: throw an error if sets to false.\n\t *        Replace the existing user otherwise\n\t *\n\t * @param {string} id - user identifier\n\t * @param {object} content - attribute `profile` in `content` must only contains the profile id\n\t * @param {object} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - (optional) Handles the query response\n\t */\n\tKuzzleSecurity.prototype.createUser = function (id, content, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {_id: id, body: content},\n\t    action = 'createUser';\n\t\n\t  if (!id || typeof id !== 'string') {\n\t    throw new Error('KuzzleSecurity.createUser: cannot create a user without a user ID');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  if (options) {\n\t    action = options.replaceIfExist ? 'createOrReplaceUser' : 'createUser';\n\t  }\n\t\n\t  self.kuzzle.query(this.buildQueryArgs(action), data, null, cb && function (err, res) {\n\t    cb(err, err ? undefined : new KuzzleUser(self, res.result._id, res.result._source));\n\t  });\n\t};\n\t\n\t\n\t/**\n\t * Update an user in Kuzzle.\n\t *\n\t * @param {string} id - user identifier\n\t * @param {object} content - a plain javascript object representing the user's modification\n\t * @param {object} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - (optional) Handles the query response\n\t * @returns {KuzzleSecurity} this object\n\t */\n\tKuzzleSecurity.prototype.updateUser = function (id, content, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {},\n\t    action = 'updateUser';\n\t\n\t  if (!id || typeof id !== 'string') {\n\t    throw new Error('KuzzleSecurity.updateUser: cannot update an user without an user ID');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data._id = id;\n\t  data.body = content;\n\t\n\t  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n\t    cb(err, err ? undefined : new KuzzleUser(self, res.result._id, res.result._source));\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Delete user.\n\t *\n\t * There is a small delay between user deletion and their deletion in our advanced search layer,\n\t * usually a couple of seconds.\n\t * That means that a user that was just been delete will be returned by this function\n\t *\n\t *\n\t * @param {string} id - Profile id to delete\n\t * @param {object} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {KuzzleSecurity} this object\n\t */\n\tKuzzleSecurity.prototype.deleteUser = function (id, options, cb) {\n\t  var data = {_id: id};\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.kuzzle.query(this.buildQueryArgs('deleteUser'), data, options, cb && function (err, res) {\n\t    cb(err, err ? undefined : res.result._id);\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Instantiate a new KuzzleUser object. Workaround to the module.exports limitation, preventing multiple\n\t * constructors to be exposed without having to use a factory or a composed object.\n\t *\n\t * @param {string} id - user id\n\t * @param {object} content - user content\n\t * @constructor\n\t */\n\tKuzzleSecurity.prototype.userFactory = function(id, content) {\n\t  return new KuzzleUser(this, id, content);\n\t};\n\t\n\t/**\n\t * Tells whether an action is allowed, denied or conditional based on the rights\n\t * rights provided as the first argument. An action is defined as a couple of\n\t * action and controller (mandatory), plus an index and a collection(optional).\n\t *\n\t * @param {object} rights - The rights rights associated to a user\n\t *                            (see getMyrights and getUserrights).\n\t * @param {string} controller - The controller to check the action onto.\n\t * @param {string} action - The action to perform.\n\t * @param {string} index - (optional) The name of index to perform the action onto.\n\t * @param {string} collection - (optional) The name of the collection to perform the action onto.\n\t *\n\t * @returns {string} ['allowed', 'denied', 'conditional'] where conditional cases\n\t *                   correspond to rights containing closures.\n\t *                   See also http://kuzzle.io/guide/#roles-definition\n\t */\n\tKuzzleSecurity.prototype.isActionAllowed = function(rights, controller, action, index, collection) {\n\t  var filteredRights;\n\t\n\t  if (!rights || typeof rights !== 'object') {\n\t    throw new Error('rights parameter is mandatory for isActionAllowed function');\n\t  }\n\t  if (!controller || typeof controller !== 'string') {\n\t    throw new Error('controller parameter is mandatory for isActionAllowed function');\n\t  }\n\t  if (!action || typeof action !== 'string') {\n\t    throw new Error('action parameter is mandatory for isActionAllowed function');\n\t  }\n\t\n\t  // We filter in all the rights that match the request (including wildcards).\n\t  filteredRights = rights\n\t    .filter(function (right) {\n\t      return right.controller === controller || right.controller === '*';\n\t    })\n\t    .filter(function (right) {\n\t      return right.action === action || right.action === '*';\n\t    })\n\t    .filter(function (right) {\n\t      return right.index === index || right.index === '*';\n\t    })\n\t    .filter(function (right) {\n\t      return right.collection === collection || right.collection === '*';\n\t    });\n\t\n\t  // Then, if at least one right allows the action, we return 'allowed'\n\t  if (filteredRights.some(function (item) { return item.value === 'allowed'; })) {\n\t    return 'allowed';\n\t  }\n\t  // If no right allows the action, we check for conditionals.\n\t  if (filteredRights.some(function (item) { return item.value === 'conditional'; })) {\n\t    return 'conditional';\n\t  }\n\t  // Otherwise we return 'denied'.\n\t  return 'denied';\n\t};\n\t\n\t\n\t/**\n\t * Gets the rights array of a given user.\n\t *\n\t * @param {string} userId The id of the user.\n\t * @param {object} [options] - (optional) arguments\n\t * @param {function} cb   The callback containing the normalized array of rights.\n\t */\n\tKuzzleSecurity.prototype.getUserRights = function (userId, options, cb) {\n\t  var\n\t    data = {_id: userId},\n\t    self = this;\n\t\n\t  if (!userId || typeof userId !== 'string') {\n\t    throw new Error('userId parameter is mandatory for getUserRights function');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.callbackRequired('Kuzzle.getUserRights', cb);\n\t\n\t  this.kuzzle.query(this.buildQueryArgs('getUserRights'), data, options, cb && function (err, res) {\n\t    cb(err, err ? undefined : res.result.hits);\n\t  });\n\t};\n\t\n\tmodule.exports = KuzzleSecurity;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** kuzzle.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 659a17fc7bf3f3b37d4a\n **/","var\n  uuid = require('node-uuid'),\n  KuzzleDataCollection = require('./kuzzleDataCollection'),\n  KuzzleSecurity = require('./security/kuzzleSecurity'),\n  KuzzleMemoryStorage = require('./kuzzleMemoryStorage'),\n  KuzzleUser = require('./security/kuzzleUser'),\n  networkWrapper = require('./networkWrapper');\n\n/**\n * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n *\n * @callback responseCallback\n * @param {Object} err - Error object, NULL if the query is successful\n * @param {Object} [data] - The content of the query response\n */\n\n/**\n * Kuzzle object constructor.\n *\n * @constructor\n * @param host - Server name or IP Address to the Kuzzle instance\n * @param [options] - Connection options\n * @param {responseCallback} [cb] - Handles connection response\n * @constructor\n */\nmodule.exports = Kuzzle = function (host, options, cb) {\n  var self = this;\n\n  if (!(this instanceof Kuzzle)) {\n    return new Kuzzle(host, options, cb);\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (!host || host === '') {\n    throw new Error('host argument missing');\n  }\n\n  Object.defineProperties(this, {\n    // 'private' properties\n    collections: {\n      value: {},\n      writable: true\n    },\n    connectCB: {\n      value: cb\n    },\n    eventListeners: {\n      value: {\n        connected: {lastEmitted: null, listeners: []},\n        error: {lastEmitted: null, listeners: []},\n        disconnected: {lastEmitted: null, listeners: []},\n        reconnected: {lastEmitted: null, listeners: []},\n        jwtTokenExpired: {lastEmitted: null, listeners: []},\n        loginAttempt: {lastEmitted: null, listeners: []},\n        offlineQueuePush: {listeners: []},\n        offlineQueuePop: {listeners: []}\n      }\n    },\n    eventTimeout: {\n      value: 200\n    },\n    queuing: {\n      value: false,\n      writable: true\n    },\n    requestHistory: {\n      value: {},\n      writable: true\n    },\n    state: {\n      value: 'initializing',\n      writable: true\n    },\n    subscriptions: {\n      /*\n       Contains the centralized subscription list in the following format:\n          pending: <number of pending subscriptions>\n          'roomId': {\n            kuzzleRoomID_1: kuzzleRoomInstance_1,\n            kuzzleRoomID_2: kuzzleRoomInstance_2,\n            kuzzleRoomID_...: kuzzleRoomInstance_...\n          }\n\n       This was made to allow multiple subscriptions on the same set of filters, something that Kuzzle does not permit.\n       This structure also allows renewing subscriptions after a connection loss\n       */\n      value: {\n        pending: {}\n      },\n      writable: true\n    },\n    // read-only properties\n    autoReconnect: {\n      value: (options && typeof options.autoReconnect === 'boolean') ? options.autoReconnect : true,\n      enumerable: true\n    },\n    defaultIndex: {\n      value: (options && typeof options.defaultIndex === 'string') ? options.defaultIndex : undefined,\n      writable: true,\n      enumerable: true\n    },\n    reconnectionDelay: {\n      value: (options && typeof options.reconnectionDelay === 'number') ? options.reconnectionDelay : 1000,\n      enumerable: true\n    },\n    host: {\n      value: host,\n      enumerable: true\n    },\n    wsPort: {\n      value: (options && typeof options.wsPort === 'number') ? options.wsPort : 7513,\n      enumerable: true\n    },\n    ioPort: {\n      value: (options && typeof options.ioPort === 'number') ? options.ioPort : 7512,\n      enumerable: true\n    },\n    sslConnection: {\n      value: (options && typeof options.sslConnection === 'boolean') ? options.sslConnection : false,\n      enumerable: true\n    },\n    autoQueue: {\n      value: false,\n      enumerable: true,\n      writable: true\n    },\n    autoReplay: {\n      value: false,\n      enumerable: true,\n      writable: true\n    },\n    autoResubscribe: {\n      value: true,\n      enumerable: true,\n      writable: true\n    },\n    headers: {\n      value: {},\n      enumerable: true,\n      writable: true\n    },\n    metadata: {\n      value: {},\n      enumerable: true,\n      writable: true\n    },\n    /*\n      Offline queue use the following format:\n            [\n              {\n                ts: <query timestamp>,\n                query: 'query',\n                cb: callbackFunction\n              }\n            ]\n     */\n    offlineQueue: {\n      value: [],\n      enumerable: true,\n      writable: true\n    },\n    queueFilter: {\n      value: null,\n      enumerable: true,\n      writable: true\n    },\n    queueMaxSize: {\n      value: 500,\n      enumerable: true,\n      writable: true\n    },\n    queueTTL: {\n      value: 120000,\n      enumerable: true,\n      writable: true\n    },\n    replayInterval: {\n      value: 10,\n      enumerable: true,\n      writable: true\n    },\n    jwtToken: {\n      value: undefined,\n      enumerable: true,\n      writable: true\n    },\n    offlineQueueLoader: {\n      value: null,\n      enumerable: true,\n      writable: true\n    }\n  });\n\n  if (options) {\n    Object.keys(options).forEach(function (opt) {\n      if (self.hasOwnProperty(opt) && Object.getOwnPropertyDescriptor(self, opt).writable) {\n        self[opt] = options[opt];\n      }\n    });\n\n    if (options.offlineMode === 'auto' && this.autoReconnect) {\n      this.autoQueue = this.autoReplay = this.autoResubscribe = true;\n    }\n  }\n\n  // Helper function ensuring that this Kuzzle object is still valid before performing a query\n  Object.defineProperty(this, 'isValid', {\n    value: function () {\n      if (self.state === 'disconnected') {\n        throw new Error('This Kuzzle object has been invalidated. Did you try to access it after a disconnect call?');\n      }\n    }\n  });\n\n  // Helper function copying headers to the query data\n  Object.defineProperty(this, 'addHeaders', {\n    value: function (query, headers) {\n      Object.keys(headers).forEach(function (header) {\n        if (!query[header]) {\n          query[header] = headers[header];\n        }\n      });\n\n      return query;\n    }\n  });\n\n  /**\n   * Some methods (mainly read queries) require a callback function. This function exists to avoid repetition of code,\n   * and is called by these methods\n   */\n  Object.defineProperty(this, 'callbackRequired', {\n    value: function (errorMessagePrefix, callback) {\n      if (!callback || typeof callback !== 'function') {\n        throw new Error(errorMessagePrefix + ': a callback argument is required for read queries');\n      }\n    }\n  });\n\n  /**\n   * Create an attribute security that embed all methods to manage Role, Profile and User\n   */\n  Object.defineProperty(this, 'security', {\n    value: new KuzzleSecurity(this),\n    enumerable: true\n  });\n\n  /**\n   * Emit an event to all registered listeners\n   * An event cannot be emitted multiple times before a timeout has been reached.\n   */\n  Object.defineProperty(this, 'emitEvent', {\n    value: function emitEvent(event) {\n      var\n        now = Date.now(),\n        args = Array.prototype.slice.call(arguments, 1),\n        eventProperties = this.eventListeners[event];\n\n      if (eventProperties.lastEmitted && eventProperties.lastEmitted >= now - this.eventTimeout) {\n        return false;\n      }\n\n      eventProperties.listeners.forEach(function (listener) {\n        process.nextTick(function () {\n          listener.fn.apply(undefined, args);\n        });\n      });\n\n      // Events without the 'lastEmitted' property can be emitted without minimum time between emissions\n      if (eventProperties.lastEmitted !== undefined) {\n        eventProperties.lastEmitted = now;\n      }\n    }\n  });\n\n  Object.defineProperty(this, 'memoryStorage', {\n    value: new KuzzleMemoryStorage(this),\n    enumerable: true\n  });\n\n\n  if (!options || !options.connect || options.connect === 'auto') {\n    this.connect();\n  } else {\n    this.state = 'ready';\n  }\n\n  cleanHistory(this.requestHistory);\n\n  if (this.bluebird) {\n    return this.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var whitelist = ['getAllStatistics', 'getServerInfo', 'getStatistics',\n          'listCollections', 'listIndexes', 'login', 'logout', 'now', 'query',\n          'checkToken', 'whoAmI', 'updateSelf', 'getMyRights',\n          'refreshIndex', 'getAutoRefresh', 'setAutoRefresh'\n        ];\n\n        return passes && whitelist.indexOf(name) !== -1;\n      }\n    });\n  }\n};\n\n/**\n * Connects to a Kuzzle instance using the provided host name.\n * @returns {Object} this\n */\nKuzzle.prototype.connect = function () {\n  var self = this;\n\n  if (!self.network) {\n    self.network = networkWrapper(self.host, self.wsPort, self.ioPort, self.sslConnection);\n  }\n\n  if (['initializing', 'ready', 'disconnected', 'error', 'offline'].indexOf(this.state) === -1) {\n    if (self.connectCB) {\n      self.connectCB(null, self);\n    }\n    return self;\n  }\n\n  self.state = 'connecting';\n  self.network.connect(self.autoReconnect, self.reconnectionDelay);\n\n  self.network.onConnect(function () {\n    self.state = 'connected';\n    renewAllSubscriptions.call(self);\n    dequeue.call(self);\n    self.emitEvent('connected');\n\n    if (self.connectCB) {\n      self.connectCB(null, self);\n    }\n  });\n\n  self.network.onConnectError(function (error) {\n    var connectionError = new Error('Unable to connect to kuzzle proxy server at \"' + self.host + '\"');\n\n    connectionError.internal = error;\n    self.state = 'error';\n    self.emitEvent('error', connectionError);\n\n    if (self.connectCB) {\n      self.connectCB(connectionError);\n    }\n  });\n\n  self.network.onDisconnect(function () {\n    self.state = 'offline';\n\n    if (!self.autoReconnect) {\n      self.disconnect();\n    }\n\n    if (self.autoQueue) {\n      self.queuing = true;\n    }\n\n    self.emitEvent('disconnected');\n  });\n\n  self.network.onReconnect(function () {\n    var reconnect = function () {\n      // renew subscriptions\n      if (self.autoResubscribe) {\n        renewAllSubscriptions.call(self);\n      }\n\n      // replay queued requests\n      if (self.autoReplay) {\n        cleanQueue.call(self);\n        dequeue.call(self);\n      }\n\n      // alert listeners\n      self.emitEvent('reconnected');\n    };\n\n    self.state = 'connected';\n\n    if (self.jwtToken) {\n      self.checkToken(self.jwtToken, function (err, res) {\n        // shouldn't obtain an error but let's invalidate the token anyway\n        if (err || !res.valid) {\n          self.jwtToken = undefined;\n          self.emitEvent('jwtTokenExpired');\n        }\n\n        reconnect();\n      });\n    } else {\n      reconnect();\n    }\n  });\n\n  return this;\n};\n\n/**\n * Set the jwtToken used to query kuzzle\n * @param token\n * @returns {Kuzzle}\n */\nKuzzle.prototype.setJwtToken = function(token) {\n  if (typeof token === 'string') {\n    this.jwtToken = token;\n  } else if (typeof token === 'object') {\n    if (token.result && token.result.jwt && typeof token.result.jwt === 'string') {\n      this.jwtToken = token.result.jwt;\n    } else {\n      this.emitEvent('loginAttempt', {\n        success: false,\n        error: 'Cannot find a valid JWT token in the following object: ' + JSON.stringify(token)\n      });\n\n      return this;\n    }\n  } else {\n    this.emitEvent('loginAttempt', {success: false, error: 'Invalid token argument: ' + token});\n    return this;\n  }\n\n  renewAllSubscriptions.call(this);\n  this.emitEvent('loginAttempt', {success: true});\n  return this;\n};\n\n/**\n * Get the jwtToken used by kuzzle\n * @returns {Kuzzle}\n */\nKuzzle.prototype.getJwtToken = function() {\n  return this.jwtToken;\n};\n\n/**\n * Send login request to kuzzle with credentials\n * If login success, store the jwtToken into kuzzle object\n *\n * @param strategy\n * @param credentials\n * @param expiresIn\n * @param cb\n */\nKuzzle.prototype.login = function (strategy) {\n  var\n    self = this,\n    request = {\n      strategy: strategy\n    },\n    credentials,\n    cb = null;\n\n  // Handle arguments (credentials, expiresIn, cb)\n  if (arguments[1]) {\n    if (typeof arguments[1] === 'object') {\n      credentials = arguments[1];\n    } else if (typeof arguments[1] === 'number' || typeof arguments[1] === 'string') {\n      request.expiresIn = arguments[1];\n    } else if (typeof arguments[1] === 'function') {\n      cb = arguments[1];\n    }\n  }\n  if (arguments[2]) {\n    if (typeof arguments[2] === 'number' || typeof arguments[2] === 'string') {\n      request.expiresIn = arguments[2];\n    } else if (typeof arguments[2] === 'function') {\n      cb = arguments[2];\n    }\n  }\n  if (arguments[3] && typeof arguments[3] === 'function') {\n    cb = arguments[3];\n  }\n\n  if (typeof credentials === 'object') {\n    Object.keys(credentials).forEach(function (key) {\n      request[key] = credentials[key];\n    });\n  }\n\n  this.query({controller: 'auth', action: 'login'}, {body: request}, {queuable: false}, function(error, response) {\n    if (!error) {\n      if (response.result.jwt) {\n        self.setJwtToken(response.result.jwt);\n      }\n\n      cb && cb(null, response.result);\n    }\n    else {\n      cb && cb(error);\n      self.emitEvent('loginAttempt', {success: false, error: error.message});\n    }\n  });\n};\n\n/**\n * Send logout request to kuzzle with jwtToken.\n *\n * @param cb\n * @returns {Kuzzle}\n */\nKuzzle.prototype.logout = function (cb) {\n  var\n    self = this,\n    request = {\n      action: 'logout',\n      controller: 'auth',\n      requestId: uuid.v4(),\n      body: {}\n    };\n\n  this.query({controller: 'auth', action: 'logout'}, request, {queuable: false}, typeof cb !== 'function' ? null : function(error) {\n    if (error === null) {\n      self.jwtToken = undefined;\n      cb(null, self);\n    }\n    else {\n      cb(error);\n    }\n  });\n\n  return self;\n};\n\n/**\n * Checks whether a given jwt token still represents a valid session in Kuzzle.\n *\n * @param  {string}   token     The jwt token to check\n * @param  {function} callback  The callback to be called when the response is\n *                              available. The signature is `function(error, response)`.\n */\nKuzzle.prototype.checkToken = function (token, callback) {\n  var\n    request = {\n      body: {\n        token: token\n      }\n    };\n\n  this.callbackRequired('Kuzzle.checkToken', callback);\n\n  this.query({controller: 'auth', action: 'checkToken'}, request, {queuable: false}, function (err, response) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, response.result);\n  });\n};\n\n/**\n * Fetches the current user.\n *\n * @param  {function} callback  The callback to be called when the response is\n *                              available. The signature is `function(error, response)`.\n */\nKuzzle.prototype.whoAmI = function (callback) {\n  var self = this;\n\n  self.callbackRequired('Kuzzle.whoAmI', callback);\n\n  self.query({controller: 'auth', action: 'getCurrentUser'}, {}, {}, function (err, response) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, new KuzzleUser(self.security, response.result._id, response.result._source));\n  });\n};\n\n/**\n * Gets the rights array of the currently logged user.\n *\n * @param {object} [options] - Optional parameters\n * @param  {function} cb The callback containing the normalized array of rights.\n */\nKuzzle.prototype.getMyRights = function (options, cb) {\n  var self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.callbackRequired('Kuzzle.getMyRights', cb);\n\n  self.query({controller: 'auth', action:'getMyRights'}, {}, options, function (err, res) {\n    if (err) {\n      return cb(err);\n    }\n\n    cb(null, res.result.hits);\n  });\n};\n\n/**\n * Update current user in Kuzzle.\n *\n * @param {object} content - a plain javascript object representing the user's modification\n * @param {object} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n * @returns {Kuzzle} this object\n */\nKuzzle.prototype.updateSelf = function (content, options, cb) {\n  var\n    self = this,\n    data = {},\n    queryArgs = {controller: 'auth', action: 'updateSelf'};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data.body = content;\n\n  self.query(queryArgs, data, options, cb && function (err, res) {\n    cb(err, err ? undefined : res.result);\n  });\n\n  return this;\n};\n\n/**\n * Clean up the queue, ensuring the queryTTL and queryMaxSize properties are respected\n */\nfunction cleanQueue () {\n  var\n    self = this,\n    now = Date.now(),\n    lastDocumentIndex = -1;\n\n  if (self.queueTTL > 0) {\n    self.offlineQueue.forEach(function (query, index) {\n      if (query.ts < now - self.queueTTL) {\n        lastDocumentIndex = index;\n      }\n    });\n\n    if (lastDocumentIndex !== -1) {\n      self.offlineQueue\n        .splice(0, lastDocumentIndex + 1)\n        .forEach(function (droppedRequest) {\n          self.emitEvent('offlineQueuePop', droppedRequest.query);\n        });\n    }\n  }\n\n  if (self.queueMaxSize > 0 && self.offlineQueue.length > self.queueMaxSize) {\n    self.offlineQueue\n      .splice(0, self.offlineQueue.length - self.queueMaxSize)\n      .forEach(function (droppedRequest) {\n        self.emitEvent('offlineQueuePop', droppedRequest.query);\n      });\n  }\n}\n\n\n/**\n * Clean history from requests made more than 10s ago\n */\nfunction cleanHistory (requestHistory) {\n  var\n    now = Date.now();\n\n  Object.keys(requestHistory).forEach(function (key) {\n    if (requestHistory[key] < now - 10000) {\n      delete requestHistory[key];\n    }\n  });\n\n  setTimeout(function () {\n    cleanHistory(requestHistory);\n  }, 1000);\n}\n\n/**\n * Emit a request to Kuzzle\n *\n * @param {object} request\n * @param {responseCallback} [cb]\n */\nfunction emitRequest (request, cb) {\n  var\n    self = this;\n\n  if (self.jwtToken !== undefined || cb) {\n    self.network.once(request.requestId, function (response) {\n      var error = null;\n\n      if (request.action !== 'logout' && response.error && response.error.message === 'Token expired') {\n        self.jwtToken = undefined;\n        self.emitEvent('jwtTokenExpired', request, cb);\n      }\n\n      if (cb) {\n        if (response.error) {\n          error = new Error(response.error.message);\n          Object.assign(error, response.error);\n          error.status = response.status;\n        }\n        \n        cb(error, response);\n      }\n    });\n  }\n\n  this.network.send(request);\n\n  // Track requests made to allow KuzzleRoom.subscribeToSelf to work\n  self.requestHistory[request.requestId] = Date.now();\n}\n\n/**\n * Play all queued requests, in order.\n */\nfunction dequeue () {\n  var\n    self = this,\n    additionalQueue,\n    uniqueQueue = {},\n    dequeuingProcess = function () {\n      if (self.offlineQueue.length > 0) {\n        emitRequest.call(self, self.offlineQueue[0].query, self.offlineQueue[0].cb);\n        self.emitEvent('offlineQueuePop', self.offlineQueue.shift());\n\n        setTimeout(function () {\n          dequeuingProcess();\n        }, Math.max(0, self.replayInterval));\n      } else {\n        self.queuing = false;\n      }\n    };\n\n  if (self.offlineQueueLoader) {\n    if (typeof self.offlineQueueLoader !== 'function') {\n      throw new Error('Invalid value for offlineQueueLoader property. Expected: function. Got: ' + typeof self.offlineQueueLoader);\n    }\n\n    additionalQueue = self.offlineQueueLoader();\n    if (Array.isArray(additionalQueue)) {\n      self.offlineQueue = additionalQueue\n        .concat(self.offlineQueue)\n        .filter(function (request) {\n          // throws if the query object does not contain required attributes\n          if (!request.query || request.query.requestId === undefined || !request.query.action || !request.query.controller) {\n            throw new Error('Invalid offline queue request. One or more missing properties: requestId, action, controller.');\n          }\n\n          return uniqueQueue.hasOwnProperty(request.query.requestId) ? false : (uniqueQueue[request.query.requestId] = true);\n        });\n    } else {\n      throw new Error('Invalid value returned by the offlineQueueLoader function. Expected: array. Got: ' + typeof additionalQueue);\n    }\n  }\n\n  dequeuingProcess();\n}\n\n/**\n * Renew all registered subscriptions. Triggered either by a successful connection/reconnection or by a\n * successful login attempt\n */\nfunction renewAllSubscriptions() {\n  var self = this;\n\n  Object.keys(self.subscriptions).forEach(function (roomId) {\n    Object.keys(self.subscriptions[roomId]).forEach(function (subscriptionId) {\n      var subscription = self.subscriptions[roomId][subscriptionId];\n      subscription.renew(subscription.callback);\n    });\n  });\n}\n\n/**\n * Adds a listener to a Kuzzle global event. When an event is fired, listeners are called in the order of their\n * insertion.\n *\n * The ID returned by this function is required to remove this listener at a later time.\n *\n * @param {string} event - name of the global event to subscribe to (see the 'eventListeners' object property)\n * @param {function} listener - callback to invoke each time an event is fired\n * @returns {string} Unique listener ID\n */\nKuzzle.prototype.addListener = function(event, listener) {\n  var\n    knownEvents = Object.keys(this.eventListeners),\n    listenerType = typeof listener,\n    listenerId;\n\n  this.isValid();\n\n  if (knownEvents.indexOf(event) === -1) {\n    throw new Error('[' + event + '] is not a known event. Known events: ' + knownEvents.toString());\n  }\n\n  if (listenerType !== 'function') {\n    throw new Error('Invalid listener type: expected a function, got a ' + listenerType);\n  }\n\n  listenerId = uuid.v4();\n  this.eventListeners[event].listeners.push({id: listenerId, fn: listener});\n  return listenerId;\n};\n\n\n/**\n * Kuzzle monitors active connections, and ongoing/completed/failed requests.\n * This method returns all available statistics from Kuzzle.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzle.prototype.getAllStatistics = function (options, cb) {\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.callbackRequired('Kuzzle.getAllStatistics', cb);\n\n  this.query({controller:'admin', action: 'getAllStats'}, {}, options, function (err, res) {\n    if (err) {\n      return cb(err);\n    }\n\n    cb(null, res.result.hits);\n  });\n};\n\n/**\n * Kuzzle monitors active connections, and ongoing/completed/failed requests.\n * This method allows getting either the last statistics frame, or a set of frames starting from a provided timestamp.\n *\n * @param {number} timestamp -  Epoch time. Starting time from which the frames are to be retrieved\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzle.prototype.getStatistics = function (timestamp, options, cb) {\n  var\n    queryCB,\n    body;\n\n  if (!cb) {\n    if (arguments.length === 1) {\n      cb = arguments[0];\n      options = null;\n      timestamp = null;\n    } else {\n      cb = arguments[1];\n      if (typeof arguments[0] === 'object') {\n        options = arguments[0];\n        timestamp = null;\n      } else {\n        timestamp = arguments[0];\n        options = null;\n      }\n    }\n  }\n\n  queryCB = function (err, res) {\n    if (err) {\n      return cb(err);\n    }\n\n    cb(null, timestamp ? res.result.hits : [res.result]);\n  };\n\n  this.callbackRequired('Kuzzle.getStatistics', cb);\n\n  body = timestamp ? {body: {startTime: timestamp}} : {};\n  this.query({controller: 'admin', action: timestamp ? 'getStats' : 'getLastStats'}, body, options, queryCB);\n};\n\n/**\n * Create a new instance of a KuzzleDataCollection object.\n * If no index is specified, takes the default index.\n *\n * @param {string} collection - The name of the data collection you want to manipulate\n * @param {string} [index] - The name of the data index containing the data collection\n * @returns {object} A KuzzleDataCollection instance\n */\nKuzzle.prototype.dataCollectionFactory = function(collection, index) {\n  this.isValid();\n\n  if (!index) {\n    if (!this.defaultIndex) {\n      throw new Error('Unable to create a new data collection object: no index specified');\n    }\n\n    index = this.defaultIndex;\n  }\n\n  if (typeof index !== 'string' || typeof collection !== 'string') {\n    throw new Error('Invalid index or collection argument: string expected');\n  }\n\n  if (!this.collections[index]) {\n    this.collections[index] = {};\n  }\n\n  if (!this.collections[index][collection]) {\n    this.collections[index][collection] = new KuzzleDataCollection(this, collection, index);\n  }\n\n  return this.collections[index][collection];\n};\n\n/**\n * Empties the offline queue without replaying it.\n *\n * @returns {Kuzzle}\n */\nKuzzle.prototype.flushQueue = function () {\n  this.offlineQueue = [];\n  return this;\n};\n\n/**\n * Returns the list of known persisted data collections.\n *\n * @param {string} [index] - Index containing collections to be listed\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzle.prototype.listCollections = function () {\n  var\n    collectionType = 'all',\n    index,\n    options,\n    cb,\n    args = Array.prototype.slice.call(arguments);\n\n  args.forEach(function(arg) {\n    switch (typeof arg) {\n      case 'string':\n        index = arg;\n        break;\n      case 'object':\n        options = arg;\n        break;\n      case 'function':\n        cb = arg;\n        break;\n    }\n  });\n\n  if (!index) {\n    if (!this.defaultIndex) {\n      throw new Error('Kuzzle.listCollections: index required');\n    }\n\n    index = this.defaultIndex;\n  }\n\n  this.callbackRequired('Kuzzle.listCollections', cb);\n\n  if (options && options.type) {\n    collectionType = options.type;\n  }\n\n  this.query({index: index, controller: 'read', action: 'listCollections'}, {body: {type: collectionType}}, options, function (err, res) {\n    if (err) {\n      return cb(err);\n    }\n\n    cb(null, res.result.collections);\n  });\n};\n\n/**\n * Returns the list of existing indexes in Kuzzle\n *\n * @param {object} [options] - Optional arguments\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzle.prototype.listIndexes = function (options, cb) {\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.callbackRequired('Kuzzle.listIndexes', cb);\n\n  this.query({controller: 'read', action: 'listIndexes'}, {}, options, function (err, res) {\n    cb(err, err ? undefined : res.result.indexes);\n  });\n};\n\n/**\n * Disconnects from Kuzzle and invalidate this instance.\n */\nKuzzle.prototype.disconnect = function () {\n  var collection;\n\n  this.logout();\n\n  this.state = 'disconnected';\n  this.network.close();\n\n  for (collection in this.collections) {\n    if (this.collections.hasOwnProperty(collection)) {\n      delete this.collections[collection];\n    }\n  }\n};\n\n/**\n * Returns the server informations\n *\n * @param {object} [options] - Optional arguments\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzle.prototype.getServerInfo = function (options, cb) {\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.callbackRequired('Kuzzle.getServerInfo', cb);\n\n  this.query({controller: 'read', action: 'serverInfo'}, {}, options, function (err, res) {\n    if (err) {\n      return cb(err);\n    }\n\n    cb(null, res.result.serverInfo);\n  });\n};\n\n/**\n * Forces an index refresh\n *\n * @param {string} index - The index to refresh. Defaults to Kuzzle.defaultIndex\n * @param {object} options - Optional arguments\n * @param {responseCallback} cb - Handles the query response\n * @returns {Kuzzle}\n */\nKuzzle.prototype.refreshIndex = function () {\n  var\n    index,\n    options,\n    cb;\n\n  Array.prototype.slice.call(arguments).forEach(function(arg) {\n    switch (typeof arg) {\n      case 'string':\n        index = arg;\n        break;\n      case 'object':\n        options = arg;\n        break;\n      case 'function':\n        cb = arg;\n        break;\n    }\n  });\n\n  if (!index) {\n    if (!this.defaultIndex) {\n      throw new Error('Kuzzle.refreshIndex: index required');\n    }\n    index = this.defaultIndex;\n  }\n\n  this.query({ index: index, controller: 'admin', action: 'refreshIndex'}, {}, options, cb);\n\n  return this;\n};\n\n/**\n * Returns de current autoRefresh status for the given index\n *\n * @param {string} index - The index to get the status from. Defaults to Kuzzle.defaultIndex\n * @param {object} options - Optinal arguments\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzle.prototype.getAutoRefresh = function () {\n  var\n    index,\n    options,\n    cb;\n\n  Array.prototype.slice.call(arguments).forEach(function (arg) {\n    switch (typeof arg) {\n      case 'string':\n        index = arg;\n        break;\n      case 'object':\n        options = arg;\n        break;\n      case 'function':\n        cb = arg;\n        break;\n    }\n  });\n\n  if (!index) {\n    if (!this.defaultIndex) {\n      throw new Error('Kuzzle.getAutoRefresh: index required');\n    }\n    index = this.defaultIndex;\n  }\n\n  this.callbackRequired('Kuzzle.getAutoRefresh', cb);\n  this.query({ index: index, controller: 'admin', action: 'getAutoRefresh'}, {}, options, cb);\n};\n\n/**\n * (Un)Sets the autoRefresh flag on the given index\n *\n * @param {string} index - the index to modify. Defaults to Kuzzle.defaultIndex\n * @param {boolean} autoRefresh - The autoRefresh value to set\n * @param {object} options - Optional arguments\n * @param {responseCallback} cb - Handles the query result\n * @returns {object} this\n */\nKuzzle.prototype.setAutoRefresh = function () {\n  var\n    index,\n    autoRefresh,\n    options,\n    cb;\n\n  Array.prototype.slice.call(arguments).forEach(function (arg) {\n    switch (typeof arg) {\n      case 'string':\n        index = arg;\n        break;\n      case 'boolean':\n        autoRefresh = arg;\n        break;\n      case 'object':\n        options = arg;\n        break;\n      case 'function':\n        cb = arg;\n        break;\n    }\n  });\n\n  if (!index) {\n    if (!this.defaultIndex) {\n      throw new Error('Kuzzle.setAutoRefresh: index required');\n    }\n    index = this.defaultIndex;\n  }\n\n  if (autoRefresh === undefined) {\n    throw new Error('Kuzzle.setAutoRefresh: autoRefresh value is required');\n  }\n\n  this.query({ index: index, controller: 'admin', action: 'setAutoRefresh'}, { body: { autoRefresh: autoRefresh }}, options, cb);\n\n  return this;\n};\n\n/**\n * Return the current Kuzzle's UTC Epoch time, in milliseconds\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzle.prototype.now = function (options, cb) {\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.callbackRequired('Kuzzle.now', cb);\n\n  this.query({controller: 'read', action: 'now'}, {}, options, function (err, res) {\n    cb(err, res && res.result.now);\n  });\n};\n\n/**\n * This is a low-level method, exposed to allow advanced SDK users to bypass high-level methods.\n * Base method used to send read queries to Kuzzle\n *\n * Takes an optional argument object with the following properties:\n *    - metadata (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {object} queryArgs - Query configuration\n * @param {object} query - The query data\n * @param {object} [options] - Optional arguments\n * @param {responseCallback} [cb] - Handles the query response\n */\nKuzzle.prototype.query = function (queryArgs, query, options, cb) {\n  var\n    attr,\n    object = {\n      action: queryArgs.action,\n      controller: queryArgs.controller,\n      metadata: this.metadata\n    },\n    self = this;\n\n  this.isValid();\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (options) {\n    if (options.metadata) {\n      Object.keys(options.metadata).forEach(function (meta) {\n        object.metadata[meta] = options.metadata[meta];\n      });\n    }\n\n    if (options.queuable === false && self.state === 'offline') {\n      return self;\n    }\n  }\n\n  if (!query || typeof query !== 'object' || Array.isArray(query)) {\n    throw new Error('Invalid query parameter: ' + query);\n  }\n\n  if (query.metadata) {\n    Object.keys(query.metadata).forEach(function (meta) {\n      object.metadata[meta] = query.metadata[meta];\n    });\n  }\n\n  for (attr in query) {\n    if (attr !== 'metadata' && query.hasOwnProperty(attr)) {\n      object[attr] = query[attr];\n    }\n  }\n\n  object = self.addHeaders(object, this.headers);\n\n  /*\n   * Do not add the token for the checkToken route, to avoid getting a token error when\n   * a developer simply wish to verify his token\n   */\n  if (self.jwtToken !== undefined && !(object.controller === 'auth' && object.action === 'checkToken')) {\n    object.headers = object.headers || {};\n    object.headers.authorization = 'Bearer ' + self.jwtToken;\n  }\n\n  if (queryArgs.collection) {\n    object.collection = queryArgs.collection;\n  }\n\n  if (queryArgs.index) {\n    object.index = queryArgs.index;\n  }\n\n  if (!object.requestId) {\n    object.requestId = uuid.v4();\n  }\n\n  if (self.state === 'connected' || (options && options.queuable === false)) {\n    if (self.state === 'connected') {\n      emitRequest.call(this, object, cb);\n    } else if (cb) {\n      cb(new Error('Unable to execute request: not connected to a Kuzzle server.\\nDiscarded request: ' + JSON.stringify(object)));\n    }\n  } else if (self.queuing || ['initializing', 'connecting'].indexOf(self.state) !== -1) {\n    cleanQueue.call(this, object, cb);\n\n    if (!self.queueFilter || self.queueFilter(object)) {\n      self.offlineQueue.push({ts: Date.now(), query: object, cb: cb});\n      self.emitEvent('offlineQueuePush', {query: object, cb: cb});\n    }\n  }\n\n  return self;\n};\n\n/**\n * Removes all listeners, either from a specific event or from all events\n *\n * @param {string} event - One of the event described in the Event Handling section of this documentation\n * @returns {Kuzzle} this object\n */\nKuzzle.prototype.removeAllListeners = function (event) {\n  var\n    knownEvents = Object.keys(this.eventListeners),\n    self = this;\n\n  if (event) {\n    if (knownEvents.indexOf(event) === -1) {\n      throw new Error('[' + event + '] is not a known event. Known events: ' + knownEvents.toString());\n    }\n\n    this.eventListeners[event].listeners = [];\n  } else {\n    knownEvents.forEach(function (eventName) {\n      self.eventListeners[eventName].listeners = [];\n    });\n  }\n\n  return this;\n};\n\n/**\n * Removes a listener from an event.\n *\n * @param {string} event - One of the event described in the Event Handling section of this documentation\n * @param {string} listenerId - The ID returned by addListener\n * @returns {Kuzzle} this object\n */\nKuzzle.prototype.removeListener = function (event, listenerId) {\n  var\n    knownEvents = Object.keys(this.eventListeners),\n    self = this;\n\n  if (knownEvents.indexOf(event) === -1) {\n    throw new Error('[' + event + '] is not a known event. Known events: ' + knownEvents.toString());\n  }\n\n  this.eventListeners[event].listeners.forEach(function (listener, index) {\n    if (listener.id === listenerId) {\n      self.eventListeners[event].listeners.splice(index, 1);\n    }\n  });\n\n  return this;\n};\n\n/**\n * Replays the requests queued during offline mode.\n * Works only if the SDK is not in a disconnected state, and if the autoReplay option is set to false.\n */\nKuzzle.prototype.replayQueue = function () {\n  if (this.state !== 'offline' && !this.autoReplay) {\n    cleanQueue.call(this);\n    dequeue.call(this);\n  }\n\n  return this;\n};\n\n/**\n * Sets the default Kuzzle index\n *\n * @param index\n * @returns this\n */\nKuzzle.prototype.setDefaultIndex = function (index) {\n  if (typeof index !== 'string') {\n    throw new Error('Invalid default index: [' + index + '] (an index name is expected)');\n  }\n\n  if (index.length === 0) {\n    throw new Error('Cannot set an empty index as the default index');\n  }\n\n  this.defaultIndex = index;\n\n  return this;\n};\n\n/**\n * Helper function allowing to set headers while chaining calls.\n *\n * If the replace argument is set to true, replace the current headers with the provided content.\n * Otherwise, it appends the content to the current headers, only replacing already existing values\n *\n * @param content - new headers content\n * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n */\nKuzzle.prototype.setHeaders = function (content, replace) {\n  var self = this;\n\n  if (typeof content !== 'object' || Array.isArray(content)) {\n    throw new Error('Expected a content object, received a ' + typeof content);\n  }\n\n  if (replace) {\n    self.headers = content;\n  } else {\n    Object.keys(content).forEach(function (key) {\n      self.headers[key] = content[key];\n    });\n  }\n\n  return self;\n};\n\n/**\n * Starts the requests queuing. Works only during offline mode, and if the autoQueue option is set to false.\n */\nKuzzle.prototype.startQueuing = function () {\n  if (this.state === 'offline' && !this.autoQueue) {\n    this.queuing = true;\n  }\n  return this;\n};\n\n/**\n * Stops the requests queuing. Works only during offline mode, and if the autoQueue option is set to false.\n */\nKuzzle.prototype.stopQueuing = function () {\n  if (this.state === 'offline' && !this.autoQueue) {\n    this.queuing = false;\n  }\n\n  return this;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/kuzzle.js\n ** module id = 0\n ** module chunks = 0\n **/","function KuzzleSecurityDocument(kuzzleSecurity, id, content) {\n\n  if (!id) {\n    throw new Error('A security document must have an id');\n  }\n\n  // Define properties\n  Object.defineProperties(this, {\n    // private properties\n    kuzzle: {\n      value: kuzzleSecurity.kuzzle\n    },\n    kuzzleSecurity: {\n      value: kuzzleSecurity\n    },\n    // read-only properties\n    // writable properties\n    id: {\n      value: id,\n      enumerable: true\n    },\n    content: {\n      value: {},\n      writable: true,\n      enumerable: true\n    }\n  });\n\n  if (content) {\n    this.setContent(content, true);\n  }\n\n  // promisifying\n  if (kuzzleSecurity.kuzzle.bluebird) {\n    return kuzzleSecurity.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var whitelist = ['delete', 'update'];\n\n        return passes && whitelist.indexOf(name) !== -1;\n      }\n    });\n  }\n}\n\n/**\n * Replaces the current content with new data.\n * Changes made by this function won’t be applied until the save method is called.\n *\n * @param {Object} data - New securityDocument content\n * @return {KuzzleSecurityDocument} this\n */\nKuzzleSecurityDocument.prototype.setContent = function (data) {\n  this.content = data;\n  return this;\n};\n\n/**\n * Serialize this object into a pojo\n *\n * @return {object} pojo representing this securityDocument\n */\nKuzzleSecurityDocument.prototype.serialize = function () {\n  var\n    data = {};\n\n  if (this.id) {\n    data._id = this.id;\n  }\n\n  data.body = this.content;\n\n  return data;\n};\n\n/**\n * Delete the current KuzzleSecurityDocument into Kuzzle.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n */\nKuzzleSecurityDocument.prototype.delete = function (options, cb) {\n  var\n    self = this;\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.kuzzleSecurity.buildQueryArgs(this.deleteActionName), {_id: this.id}, options, function (error, res) {\n    if (error) {\n      return cb ? cb(error) : false;\n    }\n\n    if (cb) {\n      cb(null, res.result._id);\n    }\n  });\n};\n\n/**\n * Update the current KuzzleSecurityDocument into Kuzzle.\n *\n * @param {object} content - Content to add to KuzzleSecurityDocument\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {KuzzleSecurityDocument} this\n */\nKuzzleSecurityDocument.prototype.update = function (content, options, cb) {\n  var\n    data = {},\n    self = this;\n\n  if (typeof content !== 'object') {\n    throw new Error('Parameter \"content\" must be a object');\n  }\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data._id = self.id;\n  data.body = content;\n\n  self.kuzzle.query(this.kuzzleSecurity.buildQueryArgs(this.updateActionName), data, options, function (error, response) {\n    if (error) {\n      return cb ? cb(error) : false;\n    }\n\n    self.setContent(response.result._source);\n\n    if (cb) {\n      cb(null, self);\n    }\n  });\n\n  return this;\n};\n\nmodule.exports = KuzzleSecurityDocument;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/security/kuzzleSecurityDocument.js\n ** module id = 1\n ** module chunks = 0\n **/","var\n  KuzzleSecurityDocument = require('./kuzzleSecurityDocument');\n\nfunction KuzzleUser(kuzzleSecurity, id, content) {\n\n  KuzzleSecurityDocument.call(this, kuzzleSecurity, id, content);\n\n  // Define properties\n  Object.defineProperties(this, {\n    // private properties\n    deleteActionName: {\n      value: 'deleteUser'\n    },\n    updateActionName: {\n      value: 'updateUser'\n    }\n  });\n\n  // promisifying\n  if (kuzzleSecurity.kuzzle.bluebird) {\n    return kuzzleSecurity.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var whitelist = ['save'];\n\n        return passes && whitelist.indexOf(name) !== -1;\n      }\n    });\n  }\n}\n\nKuzzleUser.prototype = Object.create(KuzzleSecurityDocument.prototype, {\n  constructor: {\n    value: KuzzleUser\n  }\n});\n\n/**\n * Set profiles in content\n * @param {array} profile - an array of profiles ids string\n *\n * @returns {KuzzleUser} this\n */\nKuzzleUser.prototype.setProfiles = function (profileIds) {\n  if (!Array.isArray(profileIds) || typeof profileIds[0] !== 'string') {\n    throw new Error('Parameter \"profileIds\" must be an array of strings');\n  }\n\n  this.content.profileIds = profileIds;\n\n  return this;\n};\n\n/**\n * Add a profile\n * @param {string} profile - a profile ids string\n *\n * @returns {KuzzleUser} this\n */\nKuzzleUser.prototype.addProfile = function (profileId) {\n  if (typeof profileId !== 'string') {\n    throw new Error('Parameter \"profileId\" must be a string');\n  }\n\n  if (!this.content.profileIds) {\n    this.content.profileIds = [];\n  }\n\n  if (this.content.profileIds.indexOf(profileId) === -1) {\n    this.content.profileIds.push(profileId);\n  }\n\n  return this;\n};\n\n/**\n * Saves this user into Kuzzle.\n *\n * If this is a new user, this function will create it in Kuzzle.\n * Otherwise, this method will replace the latest version of this user in Kuzzle by the current content\n * of this object.\n *\n * @param {responseCallback} [cb] - Handles the query response\n * @param {object} [options] - Optional parameters\n * @returns {KuzzleUser} this\n */\nKuzzleUser.prototype.save = function (options, cb) {\n  var\n    data = this.serialize(),\n    self = this;\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.kuzzleSecurity.buildQueryArgs('createOrReplaceUser'), data, options, cb && function (error) {\n    cb(error, error ? undefined : self);\n  });\n\n  return self;\n};\n\n/**\n * Serialize this object into a JSON object\n *\n * @return {object} JSON object representing this User\n */\nKuzzleUser.prototype.serialize = function () {\n  return {_id: this.id, body: this.content};\n};\n\n/**\n * Return the associated profiles IDs\n *\n * @return {array} the associated profiles IDs\n */\nKuzzleUser.prototype.getProfiles = function () {\n  return this.content.profileIds;\n};\n\nmodule.exports = KuzzleUser;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/security/kuzzleUser.js\n ** module id = 2\n ** module chunks = 0\n **/","//     uuid.js\n//\n//     Copyright (c) 2010-2012 Robert Kieffer\n//     MIT License - http://opensource.org/licenses/mit-license.php\n\n/*global window, require, define */\n(function(_window) {\n  'use strict';\n\n  // Unique ID creation requires a high quality random # generator.  We feature\n  // detect to determine the best RNG source, normalizing to a function that\n  // returns 128-bits of randomness, since that's what's usually required\n  var _rng, _mathRNG, _nodeRNG, _whatwgRNG, _previousRoot;\n\n  function setupBrowser() {\n    // Allow for MSIE11 msCrypto\n    var _crypto = _window.crypto || _window.msCrypto;\n\n    if (!_rng && _crypto && _crypto.getRandomValues) {\n      // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto\n      //\n      // Moderately fast, high quality\n      try {\n        var _rnds8 = new Uint8Array(16);\n        _whatwgRNG = _rng = function whatwgRNG() {\n          _crypto.getRandomValues(_rnds8);\n          return _rnds8;\n        };\n        _rng();\n      } catch(e) {}\n    }\n\n    if (!_rng) {\n      // Math.random()-based (RNG)\n      //\n      // If all else fails, use Math.random().  It's fast, but is of unspecified\n      // quality.\n      var  _rnds = new Array(16);\n      _mathRNG = _rng = function() {\n        for (var i = 0, r; i < 16; i++) {\n          if ((i & 0x03) === 0) { r = Math.random() * 0x100000000; }\n          _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n        }\n\n        return _rnds;\n      };\n      if ('undefined' !== typeof console && console.warn) {\n        console.warn(\"[SECURITY] node-uuid: crypto not usable, falling back to insecure Math.random()\");\n      }\n    }\n  }\n\n  function setupNode() {\n    // Node.js crypto-based RNG - http://nodejs.org/docs/v0.6.2/api/crypto.html\n    //\n    // Moderately fast, high quality\n    if ('function' === typeof require) {\n      try {\n        var _rb = require('crypto').randomBytes;\n        _nodeRNG = _rng = _rb && function() {return _rb(16);};\n        _rng();\n      } catch(e) {}\n    }\n  }\n\n  if (_window) {\n    setupBrowser();\n  } else {\n    setupNode();\n  }\n\n  // Buffer class to use\n  var BufferClass = ('function' === typeof Buffer) ? Buffer : Array;\n\n  // Maps for number <-> hex string conversion\n  var _byteToHex = [];\n  var _hexToByte = {};\n  for (var i = 0; i < 256; i++) {\n    _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n    _hexToByte[_byteToHex[i]] = i;\n  }\n\n  // **`parse()` - Parse a UUID into it's component bytes**\n  function parse(s, buf, offset) {\n    var i = (buf && offset) || 0, ii = 0;\n\n    buf = buf || [];\n    s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {\n      if (ii < 16) { // Don't overflow!\n        buf[i + ii++] = _hexToByte[oct];\n      }\n    });\n\n    // Zero out remaining bytes if string was short\n    while (ii < 16) {\n      buf[i + ii++] = 0;\n    }\n\n    return buf;\n  }\n\n  // **`unparse()` - Convert UUID byte array (ala parse()) into a string**\n  function unparse(buf, offset) {\n    var i = offset || 0, bth = _byteToHex;\n    return  bth[buf[i++]] + bth[buf[i++]] +\n            bth[buf[i++]] + bth[buf[i++]] + '-' +\n            bth[buf[i++]] + bth[buf[i++]] + '-' +\n            bth[buf[i++]] + bth[buf[i++]] + '-' +\n            bth[buf[i++]] + bth[buf[i++]] + '-' +\n            bth[buf[i++]] + bth[buf[i++]] +\n            bth[buf[i++]] + bth[buf[i++]] +\n            bth[buf[i++]] + bth[buf[i++]];\n  }\n\n  // **`v1()` - Generate time-based UUID**\n  //\n  // Inspired by https://github.com/LiosK/UUID.js\n  // and http://docs.python.org/library/uuid.html\n\n  // random #'s we need to init node and clockseq\n  var _seedBytes = _rng();\n\n  // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n  var _nodeId = [\n    _seedBytes[0] | 0x01,\n    _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]\n  ];\n\n  // Per 4.2.2, randomize (14 bit) clockseq\n  var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;\n\n  // Previous uuid creation time\n  var _lastMSecs = 0, _lastNSecs = 0;\n\n  // See https://github.com/broofa/node-uuid for API details\n  function v1(options, buf, offset) {\n    var i = buf && offset || 0;\n    var b = buf || [];\n\n    options = options || {};\n\n    var clockseq = (options.clockseq != null) ? options.clockseq : _clockseq;\n\n    // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n    var msecs = (options.msecs != null) ? options.msecs : new Date().getTime();\n\n    // Per 4.2.1.2, use count of uuid's generated during the current clock\n    // cycle to simulate higher resolution clock\n    var nsecs = (options.nsecs != null) ? options.nsecs : _lastNSecs + 1;\n\n    // Time since last uuid creation (in msecs)\n    var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n    // Per 4.2.1.2, Bump clockseq on clock regression\n    if (dt < 0 && options.clockseq == null) {\n      clockseq = clockseq + 1 & 0x3fff;\n    }\n\n    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n    // time interval\n    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs == null) {\n      nsecs = 0;\n    }\n\n    // Per 4.2.1.2 Throw error if too many uuids are requested\n    if (nsecs >= 10000) {\n      throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n    }\n\n    _lastMSecs = msecs;\n    _lastNSecs = nsecs;\n    _clockseq = clockseq;\n\n    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n    msecs += 12219292800000;\n\n    // `time_low`\n    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n    b[i++] = tl >>> 24 & 0xff;\n    b[i++] = tl >>> 16 & 0xff;\n    b[i++] = tl >>> 8 & 0xff;\n    b[i++] = tl & 0xff;\n\n    // `time_mid`\n    var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n    b[i++] = tmh >>> 8 & 0xff;\n    b[i++] = tmh & 0xff;\n\n    // `time_high_and_version`\n    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n    b[i++] = tmh >>> 16 & 0xff;\n\n    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n    b[i++] = clockseq >>> 8 | 0x80;\n\n    // `clock_seq_low`\n    b[i++] = clockseq & 0xff;\n\n    // `node`\n    var node = options.node || _nodeId;\n    for (var n = 0; n < 6; n++) {\n      b[i + n] = node[n];\n    }\n\n    return buf ? buf : unparse(b);\n  }\n\n  // **`v4()` - Generate random UUID**\n\n  // See https://github.com/broofa/node-uuid for API details\n  function v4(options, buf, offset) {\n    // Deprecated - 'format' argument, as supported in v1.2\n    var i = buf && offset || 0;\n\n    if (typeof(options) === 'string') {\n      buf = (options === 'binary') ? new BufferClass(16) : null;\n      options = null;\n    }\n    options = options || {};\n\n    var rnds = options.random || (options.rng || _rng)();\n\n    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n    // Copy bytes to buffer, if provided\n    if (buf) {\n      for (var ii = 0; ii < 16; ii++) {\n        buf[i + ii] = rnds[ii];\n      }\n    }\n\n    return buf || unparse(rnds);\n  }\n\n  // Export public API\n  var uuid = v4;\n  uuid.v1 = v1;\n  uuid.v4 = v4;\n  uuid.parse = parse;\n  uuid.unparse = unparse;\n  uuid.BufferClass = BufferClass;\n  uuid._rng = _rng;\n  uuid._mathRNG = _mathRNG;\n  uuid._nodeRNG = _nodeRNG;\n  uuid._whatwgRNG = _whatwgRNG;\n\n  if (('undefined' !== typeof module) && module.exports) {\n    // Publish as node.js module\n    module.exports = uuid;\n  } else if (typeof define === 'function' && define.amd) {\n    // Publish as AMD module\n    define(function() {return uuid;});\n\n\n  } else {\n    // Publish as global (in browsers)\n    _previousRoot = _window.uuid;\n\n    // **`noConflict()` - (browser only) to reset global 'uuid' var**\n    uuid.noConflict = function() {\n      _window.uuid = _previousRoot;\n      return uuid;\n    };\n\n    _window.uuid = uuid;\n  }\n})('undefined' !== typeof window ? window : null);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/node-uuid/uuid.js\n ** module id = 3\n ** module chunks = 0\n **/","var\n  KuzzleDocument = require('./kuzzleDocument'),\n  KuzzleDataMapping = require('./kuzzleDataMapping'),\n  KuzzleRoom = require('./kuzzleRoom');\n\n/**\n * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n *\n * @callback responseCallback\n * @param {Object} err - Error object, NULL if the query is successful\n * @param {Object} [data] - The content of the query response\n */\n\n/**\n * A data collection is a set of data managed by Kuzzle. It acts like a data table for persistent documents,\n * or like a room for pub/sub messages.\n * @param {object} kuzzle - Kuzzle instance to inherit from\n * @param {string} collection - name of the data collection to handle\n * @param {string} index - Index containing the data collection\n * @constructor\n */\nfunction KuzzleDataCollection(kuzzle, collection, index) {\n  if (!index || !collection) {\n    throw new Error('The KuzzleDataCollection object constructor needs an index and a collection arguments');\n  }\n\n  Object.defineProperties(this, {\n    // read-only properties\n    collection: {\n      value: collection,\n      enumerable: true\n    },\n    index: {\n      value: index,\n      enumerable: true\n    },\n    kuzzle: {\n      value: kuzzle,\n      enumerable: true\n    },\n    // writable properties\n    headers: {\n      value: JSON.parse(JSON.stringify(kuzzle.headers)),\n      enumerable: true,\n      writable: true\n    }\n  });\n\n  Object.defineProperty(this, 'buildQueryArgs', {\n    value: function (controller, action) {\n      return {\n        controller: controller,\n        action: action,\n        collection: this.collection,\n        index: this.index\n      };\n    }\n  });\n\n  if (this.kuzzle.bluebird) {\n    return this.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var blacklist = ['publishMessage', 'setHeaders', 'subscribe'];\n\n        return passes && blacklist.indexOf(name) === -1;\n      }\n    });\n  }\n\n  return this;\n}\n\n/**\n * Executes an advanced search on the data collection.\n *\n * /!\\ There is a small delay between documents creation and their existence in our advanced search layer,\n * usually a couple of seconds.\n * That means that a document that was just been created won’t be returned by this function.\n *\n * @param {object} filters - Filters in Elasticsearch Query DSL format\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzleDataCollection.prototype.advancedSearch = function (filters, options, cb) {\n  var\n    query,\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('KuzzleDataCollection.advancedSearch', cb);\n\n  query = self.kuzzle.addHeaders({body: filters}, this.headers);\n\n  self.kuzzle.query(this.buildQueryArgs('read', 'search'), query, options, function (error, result) {\n    var documents = [];\n\n    if (error) {\n      return cb(error);\n    }\n\n    result.result.hits.forEach(function (doc) {\n      var newDocument = new KuzzleDocument(self, doc._id, doc._source);\n\n      newDocument.version = doc._version;\n\n      documents.push(newDocument);\n    });\n\n    cb(null, { total: result.result.total, documents: documents });\n  });\n};\n\n/**\n * Returns the number of documents matching the provided set of filters.\n *\n * There is a small delay between documents creation and their existence in our advanced search layer,\n * usually a couple of seconds.\n * That means that a document that was just been created won’t be returned by this function\n *\n * @param {object} filters - Filters in Elasticsearch Query DSL format\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzleDataCollection.prototype.count = function (filters, options, cb) {\n  var\n    query;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.callbackRequired('KuzzleDataCollection.count', cb);\n\n  query = this.kuzzle.addHeaders({body: filters}, this.headers);\n\n  this.kuzzle.query(this.buildQueryArgs('read', 'count'), query, options, function (error, result) {\n    cb(error, result && result.result.count);\n  });\n};\n\n/**\n * Create a new empty data collection, with no associated mapping.\n * Kuzzle automatically creates data collections when storing documents, but there are cases where we\n * want to create and prepare data collections before storing documents in it.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - returns Kuzzle's response\n * @returns {*} this\n */\nKuzzleDataCollection.prototype.create = function (options, cb) {\n  var data = {};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data = this.kuzzle.addHeaders(data, this.headers);\n  this.kuzzle.query(this.buildQueryArgs('write', 'createCollection'), data, options, cb);\n\n  return this;\n};\n\n/**\n * Create a new document in Kuzzle.\n *\n * Takes an optional argument object with the following properties:\n *    - metadata (object, default: null):\n *        Additional information passed to notifications to other users\n *    - updateIfExist (boolean, default: false):\n *        If the same document already exists: throw an error if sets to false.\n *        Update the existing document otherwise\n *\n * @param {string} [id] - (optional) document identifier\n * @param {object} document - either an instance of a KuzzleDocument object, or a document\n * @param {object} [options] - optional arguments\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {Object} this\n */\nKuzzleDataCollection.prototype.createDocument = function (id, document, options, cb) {\n  var\n    self = this,\n    data = {},\n    action = 'create';\n\n  if (id && typeof id !== 'string') {\n    cb = options;\n    options = document;\n    document = id;\n    id = null;\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (document instanceof KuzzleDocument) {\n    data = document.serialize();\n  } else {\n    data.body = document;\n  }\n\n  if (options) {\n    action = options.updateIfExist ? 'createOrReplace' : 'create';\n  }\n\n  if (id) {\n    data._id = id;\n  }\n\n  data = self.kuzzle.addHeaders(data, self.headers);\n\n  self.kuzzle.query(this.buildQueryArgs('write', action), data, options, cb && function (err, res) {\n    var doc;\n\n    if (err) {\n      return cb(err);\n    }\n\n    doc = new KuzzleDocument(self, res.result._id, res.result._source);\n    doc.version = res.result._version;\n    cb(null, doc);\n  });\n\n  return this;\n};\n\n/**\n * Delete persistent documents.\n *\n * There is a small delay between documents creation and their existence in our advanced search layer,\n * usually a couple of seconds.\n * That means that a document that was just been created won’t be returned by this function\n *\n * Takes an optional argument object with the following properties:\n *    - metadata (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {string|object} arg - Either a document ID (will delete only this particular document), or a set of filters\n * @param {object} [options] - optional arguments\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {KuzzleDataCollection} this\n */\nKuzzleDataCollection.prototype.deleteDocument = function (arg, options, cb) {\n  var\n    action,\n    data = {};\n\n  if (typeof arg === 'string') {\n    data._id = arg;\n    action = 'delete';\n  } else {\n    data.body = arg;\n    action = 'deleteByQuery';\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data = this.kuzzle.addHeaders(data, this.headers);\n\n  this.kuzzle.query(this.buildQueryArgs('write', action), data, options, cb && function (err, res) {\n    if (err) {\n      cb(err);\n    }\n    else {\n      cb(null, (action === 'delete' ? [res.result._id] : res.result.ids));\n    }\n  });\n\n  return this;\n};\n\n/**\n * Retrieve a single stored document using its unique document ID.\n *\n * @param {string} documentId - Unique document identifier\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzleDataCollection.prototype.fetchDocument = function (documentId, options, cb) {\n  var\n    data = {_id: documentId},\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('KuzzleDataCollection.fetch', cb);\n  data = self.kuzzle.addHeaders(data, this.headers);\n\n  self.kuzzle.query(this.buildQueryArgs('read', 'get'), data, options, function (err, res) {\n    var document;\n\n    if (err) {\n      return cb(err);\n    }\n\n    document = new KuzzleDocument(self, res.result._id, res.result._source);\n    document.version = res.result._version;\n    cb(null, document);\n  });\n};\n\n/**\n * Retrieves all documents stored in this data collection\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzleDataCollection.prototype.fetchAllDocuments = function (options, cb) {\n  var filters = {};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  // copying pagination options to the search filter\n  if (options) {\n    if (options.from) {\n      filters.from = options.from;\n    }\n\n    if (options.size) {\n      filters.size = options.size;\n    }\n  }\n\n  this.kuzzle.callbackRequired('KuzzleDataCollection.fetchAll', cb);\n\n  this.advancedSearch(filters, options, cb);\n};\n\n\n/**\n * Instantiates a KuzzleDataMapping object containing the current mapping of this collection.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Returns an instantiated KuzzleDataMapping object\n */\nKuzzleDataCollection.prototype.getMapping = function (options, cb) {\n  var kuzzleMapping;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.callbackRequired('KuzzleDataCollection.getMapping', cb);\n\n  kuzzleMapping = new KuzzleDataMapping(this);\n  kuzzleMapping.refresh(options, cb);\n};\n\n/**\n * Publish a realtime message\n *\n * Takes an optional argument object with the following properties:\n *    - metadata (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {object} document - either a KuzzleDocument instance or a JSON object\n * @param {object} [options] - optional arguments\n * @param {responseCallback} [cb] - Returns a raw Kuzzle response\n * @returns {*} this\n */\nKuzzleDataCollection.prototype.publishMessage = function (document, options, cb) {\n  var data = {};\n\n  if (document instanceof KuzzleDocument) {\n    data = document.serialize();\n  } else {\n    data.body = document;\n  }\n\n  data = this.kuzzle.addHeaders(data, this.headers);\n  this.kuzzle.query(this.buildQueryArgs('write', 'publish'), data, options, cb);\n\n  return this;\n};\n\n/**\n * Replace an existing document with a new one.\n *\n * Takes an optional argument object with the following properties:\n *    - metadata (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {string} documentId - Unique document identifier of the document to replace\n * @param {object} content - JSON object representing the new document version\n * @param {object} [options] - additional arguments\n * @param {responseCallback} [cb] - Returns an instantiated KuzzleDocument object\n * @return {object} this\n */\nKuzzleDataCollection.prototype.replaceDocument = function (documentId, content, options, cb) {\n  var\n    self = this,\n    data = {\n      _id: documentId,\n      body: content\n    };\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data = self.kuzzle.addHeaders(data, this.headers);\n\n  self.kuzzle.query(this.buildQueryArgs('write', 'createOrReplace'), data, options, cb && function (err, res) {\n    var document;\n\n    if (err) {\n      return cb(err);\n    }\n\n    document = new KuzzleDocument(self, res.result._id, res.result._source);\n    document.version = res.result._version;\n    cb(null, document);\n  });\n\n  return this;\n};\n\n/**\n * Subscribes to this data collection with a set of filters.\n * To subscribe to the entire data collection, simply provide an empty filter.\n *\n * @param {object} filters - Filters in Kuzzle DSL format\n * @param {object} [options] - subscriptions options\n * @param {responseCallback} cb - called for each new notification\n * @returns {*} KuzzleRoom object\n */\nKuzzleDataCollection.prototype.subscribe = function (filters, options, cb) {\n  var room;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.callbackRequired('KuzzleDataCollection.subscribe', cb);\n\n  room = new KuzzleRoom(this, options);\n  room.renew(filters, cb);\n\n  return room;\n};\n\n/**\n * Truncate the data collection, removing all stored documents but keeping all associated mappings.\n * This method is a lot faster than removing all documents using a query.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - returns Kuzzle's response\n * @returns {*} this\n */\nKuzzleDataCollection.prototype.truncate = function (options, cb) {\n  var data = {};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data = this.kuzzle.addHeaders(data, this.headers);\n  this.kuzzle.query(this.buildQueryArgs('admin', 'truncateCollection'), data, options, cb);\n\n  return this;\n};\n\n\n/**\n * Update parts of a document\n *\n * Takes an optional argument object with the following properties:\n *    - metadata (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {string} documentId - Unique document identifier of the document to update\n * @param {object} content - JSON object containing changes to perform on the document\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Returns an instantiated KuzzleDocument object\n * @return {object} this\n */\nKuzzleDataCollection.prototype.updateDocument = function (documentId, content, options, cb) {\n  var\n    data = {\n      _id: documentId,\n      body: content\n    },\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data = self.kuzzle.addHeaders(data, this.headers);\n\n  self.kuzzle.query(this.buildQueryArgs('write', 'update'), data, options, cb && function (err, res) {\n    if (err) {\n      return cb(err);\n    }\n\n    (new KuzzleDocument(self, res.result._id)).refresh(cb);\n  });\n\n  return self;\n};\n\n\n/**\n * Instantiate a new KuzzleDocument object. Workaround to the module.exports limitation, preventing multiple\n * constructors to be exposed without having to use a factory or a composed object.\n *\n * @param {string} id - document id\n * @param {object} content - document content\n * @constructor\n */\nKuzzleDataCollection.prototype.documentFactory = function (id, content) {\n  return new KuzzleDocument(this, id, content);\n};\n\n/**\n * Instantiate a new KuzzleRoom object. Workaround to the module.exports limitation, preventing multiple\n * constructors to be exposed without having to use a factory or a composed object.\n *\n * @param {object} [options] - subscription configuration\n * @constructor\n */\nKuzzleDataCollection.prototype.roomFactory = function (options) {\n  return new KuzzleRoom(this, options);\n};\n\n/**\n * Instantiate a new KuzzleDataMapping object. Workaround to the module.exports limitation, preventing multiple\n * constructors to be exposed without having to use a factory or a composed object.\n *\n * @param {object} [mapping] - mapping to instantiate the KuzzleDataMapping object with\n * @constructor\n */\nKuzzleDataCollection.prototype.dataMappingFactory = function (mapping) {\n  return new KuzzleDataMapping(this, mapping);\n};\n\n/**\n * Helper function allowing to set headers while chaining calls.\n *\n * If the replace argument is set to true, replace the current headers with the provided content.\n * Otherwise, it appends the content to the current headers, only replacing already existing values\n *\n * @param content - new headers content\n * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n */\nKuzzleDataCollection.prototype.setHeaders = function (content, replace) {\n  this.kuzzle.setHeaders.call(this, content, replace);\n  return this;\n};\n\nmodule.exports = KuzzleDataCollection;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/kuzzleDataCollection.js\n ** module id = 4\n ** module chunks = 0\n **/","/**\n * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n *\n * @callback responseCallback\n * @param {Object} err - Error object, NULL if the query is successful\n * @param {Object} [data] - The content of the query response\n */\n\n\n/**\n *  When creating a new data collection in the persistent data storage layer, Kuzzle uses a default mapping.\n *  It means that, by default, you won’t be able to exploit the full capabilities of our persistent data storage layer\n *  (currently handled by ElasticSearch), and your searches may suffer from below-average performances, depending on\n *  the amount of data you stored in a collection and the complexity of your database.\n *\n *  The KuzzleDataMapping object allow to get the current mapping of a data collection and to modify it if needed.\n *\n * @param {object} kuzzleDataCollection - Instance of the inherited KuzzleDataCollection object\n * @param {object} mapping - mappings\n * @constructor\n */\nfunction KuzzleDataMapping(kuzzleDataCollection, mapping) {\n  Object.defineProperties(this, {\n    //read-only properties\n    collection: {\n      value: kuzzleDataCollection,\n      enumerable: true\n    },\n    kuzzle: {\n      value: kuzzleDataCollection.kuzzle,\n      enumerable: true\n    },\n    // writable properties\n    headers: {\n      value: JSON.parse(JSON.stringify(kuzzleDataCollection.headers)),\n      enumerable: true,\n      writable: true\n    },\n    mapping: {\n      value: mapping || {},\n      enumerable: true,\n      writable: true\n    }\n  });\n\n  if (this.kuzzle.bluebird) {\n    return this.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var blacklist = ['set', 'setHeaders'];\n\n        return passes && blacklist.indexOf(name) === -1;\n      }\n    });\n  }\n\n  return this;\n}\n\n/**\n * Applies the new mapping to the data collection.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n */\nKuzzleDataMapping.prototype.apply = function (options, cb) {\n  var\n    self = this,\n    data = this.kuzzle.addHeaders({body: {properties: this.mapping}}, this.headers);\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.collection.buildQueryArgs('admin', 'updateMapping'), data, options, function (err) {\n    if (err) {\n      return cb && cb(err);\n    }\n\n    self.refresh(options, cb);\n  });\n\n  return this;\n};\n\n/**\n * Replaces the current content with the mapping stored in Kuzzle\n *\n * Calling this function will discard any uncommited changes. You can commit changes by calling the “apply” function\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {*} this\n */\nKuzzleDataMapping.prototype.refresh = function (options, cb) {\n  var\n    self = this,\n    data = this.kuzzle.addHeaders({}, this.headers);\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query(this.collection.buildQueryArgs('admin', 'getMapping'), data, options, function (err, res) {\n    if (err) {\n      return cb ? cb(err) : false;\n    }\n\n    if (res.result[self.collection.index]) {\n      if (res.result[self.collection.index].mappings[self.collection.collection]) {\n        self.mapping = res.result[self.collection.index].mappings[self.collection.collection].properties;\n\n        // Mappings can be empty. The mapping property should never be \"undefined\"\n        if (self.mapping === undefined) {\n          self.mapping = {};\n        }\n      } else {\n        return cb && cb(new Error('No mapping found for collection ' + self.collection.collection));\n      }\n    } else {\n      return cb && cb(new Error('No mapping found for index ' + self.collection.index));\n    }\n\n    if (cb) {\n      cb(null, self);\n    }\n  });\n\n  return this;\n};\n\n\n/**\n * Adds or updates a field mapping.\n *\n * Changes made by this function won’t be applied until you call the apply method\n *\n * @param {string} field - Name of the field from which the mapping is to be added or updated\n * @param {object} mapping - corresponding field mapping\n * @returns {KuzzleDataMapping}\n */\nKuzzleDataMapping.prototype.set = function (field, mapping) {\n  this.mapping[field] = mapping;\n\n  return this;\n};\n\n/**\n * Helper function allowing to set headers while chaining calls.\n *\n * If the replace argument is set to true, replace the current headers with the provided content.\n * Otherwise, it appends the content to the current headers, only replacing already existing values\n *\n * @param content - new headers content\n * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n */\nKuzzleDataMapping.prototype.setHeaders = function (content, replace) {\n  this.kuzzle.setHeaders.call(this, content, replace);\n  return this;\n};\n\nmodule.exports = KuzzleDataMapping;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/kuzzleDataMapping.js\n ** module id = 5\n ** module chunks = 0\n **/","/**\n * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n *\n * @callback responseCallback\n * @param {Object} err - Error object, NULL if the query is successful\n * @param {Object} [data] - The content of the query response\n */\n\n/**\n * Kuzzle handles documents either as realtime messages or as stored documents.\n * KuzzleDocument is the object representation of one of these documents.\n *\n * Notes:\n *   - this constructor may be called either with a documentId, a content, neither or both.\n *   - providing a documentID to the constructor will automatically call refresh, unless a content is also provided\n *\n *\n * @param {object} kuzzleDataCollection - an instanciated KuzzleDataCollection object\n * @param {string} [documentId] - ID of an existing document\n * @param {object} [content] - Initializes this document with the provided content\n * @constructor\n */\nfunction KuzzleDocument(kuzzleDataCollection, documentId, content) {\n  Object.defineProperties(this, {\n    // read-only properties\n    collection: {\n      value: kuzzleDataCollection.collection,\n      enumerable: true\n    },\n    dataCollection: {\n      value: kuzzleDataCollection,\n      enumerable: true\n    },\n    kuzzle: {\n      value: kuzzleDataCollection.kuzzle,\n      enumerable: true\n    },\n    // writable properties\n    id: {\n      value: undefined,\n      enumerable: true,\n      writable: true\n    },\n    content: {\n      value: {},\n      writable: true,\n      enumerable: true\n    },\n    headers: {\n      value: JSON.parse(JSON.stringify(kuzzleDataCollection.headers)),\n      enumerable: true,\n      writable: true\n    },\n    version: {\n      value: undefined,\n      enumerable: true,\n      writable: true\n    }\n  });\n\n  // handling provided arguments\n  if (!content && documentId && typeof documentId === 'object') {\n    content = documentId;\n    documentId = null;\n  }\n\n  if (content) {\n    if (content._version) {\n      this.version = content._version;\n      delete content._version;\n    }\n    this.setContent(content, true);\n  }\n\n  if (documentId) {\n    Object.defineProperty(this, 'id', {\n      value: documentId,\n      enumerable: true\n    });\n  }\n\n  // promisifying\n  if (this.kuzzle.bluebird) {\n    return this.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var whitelist = ['delete', 'refresh', 'save'];\n\n        return passes && whitelist.indexOf(name) !== -1;\n      }\n    });\n  }\n\n  return this;\n}\n\n/**\n * Serialize this object into a JSON object\n *\n * @return {object} JSON object representing this document\n */\nKuzzleDocument.prototype.serialize = function () {\n  var\n    data = {};\n\n  if (this.id) {\n    data._id = this.id;\n  }\n\n  data.body = this.content;\n  data._version = this.version;\n  data = this.kuzzle.addHeaders(data, this.headers);\n\n  return data;\n};\n\n/**\n * Overrides the toString() method in order to return a serialized version of the document\n *\n * @return {string} serialized version of this object\n */\nKuzzleDocument.prototype.toString = function () {\n  return JSON.stringify(this.serialize());\n};\n\n/**\n * Deletes this document in Kuzzle.\n *\n * Takes an optional argument object with the following properties:\n *    - metadata (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {*} this\n */\nKuzzleDocument.prototype.delete = function (options, cb) {\n  var self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (!self.id) {\n    throw new Error('KuzzleDocument.delete: cannot delete a document without a document ID');\n  }\n\n  this.kuzzle.query(this.dataCollection.buildQueryArgs('write', 'delete'), this.serialize(), options, cb && function (err) {\n    cb(err, err ? undefined : self.id);\n  });\n};\n\n/**\n * Replaces the current content with the last version of this document stored in Kuzzle.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {*} this\n */\nKuzzleDocument.prototype.refresh = function (options, cb) {\n  var self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (!self.id) {\n    throw new Error('KuzzleDocument.refresh: cannot retrieve a document if no ID has been provided');\n  }\n\n  this.kuzzle.callbackRequired('KuzzleDocument.refresh', cb);\n\n  self.kuzzle.query(self.dataCollection.buildQueryArgs('read', 'get'), {_id: self.id}, options, function (error, res) {\n    var newDocument;\n\n    if (error) {\n      return cb(error);\n    }\n\n    newDocument = new KuzzleDocument(self.dataCollection, self.id, res.result._source);\n    newDocument.version = res.result._version;\n\n    cb(null, newDocument);\n  });\n};\n\n/**\n * Saves this document into Kuzzle.\n *\n * If this is a new document, this function will create it in Kuzzle and the id property will be made available.\n * Otherwise, this method will replace the latest version of this document in Kuzzle by the current content\n * of this object.\n *\n * Takes an optional argument object with the following properties:\n *    - metadata (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {*} this\n */\nKuzzleDocument.prototype.save = function (options, cb) {\n  var\n    data = this.serialize(),\n    self = this;\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.dataCollection.buildQueryArgs('write', 'createOrReplace'), data, options, function (error, res) {\n    if (error) {\n      return cb && cb(error);\n    }\n\n    self.id = res.result._id;\n    self.version = res.result._version;\n\n    if (cb) {\n      cb(null, self);\n    }\n  });\n\n  return self;\n};\n\n/**\n * Sends the content of this document as a realtime message.\n *\n * Takes an optional argument object with the following properties:\n *    - metadata (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {object} [options] - Optional parameters\n * @returns {*} this\n */\nKuzzleDocument.prototype.publish = function (options) {\n  var data = this.serialize();\n\n  this.kuzzle.query(this.dataCollection.buildQueryArgs('write', 'publish'), data, options);\n\n  return this;\n};\n\n/**\n * Replaces the current content with new data.\n * Changes made by this function won’t be applied until the save method is called.\n *\n * @param {object} data - New content\n * @param {boolean} replace - if true: replace this document content with the provided data\n */\nKuzzleDocument.prototype.setContent = function (data, replace) {\n  var self = this;\n\n  if (replace) {\n    this.content = data;\n  }\n  else {\n    Object.keys(data).forEach(function (key) {\n      self.content[key] = data[key];\n    });\n  }\n\n  return this;\n};\n\n/**\n * Listens to events concerning this document. Has no effect if the document does not have an ID\n * (i.e. if the document has not yet been created as a persisted document).\n *\n * @param {object} [options] - subscription options\n * @param {responseCallback} cb - callback that will be called each time a change has been detected on this document\n */\nKuzzleDocument.prototype.subscribe = function (options, cb) {\n  var filters;\n\n  if (options && !cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.callbackRequired('KuzzleDocument.subscribe', cb);\n\n  if (!this.id) {\n    throw new Error('KuzzleDocument.subscribe: cannot subscribe to a document if no ID has been provided');\n  }\n\n  filters = { ids: { values: [this.id] } };\n\n  return this.dataCollection.subscribe(filters, options, cb);\n};\n\n/**\n * Helper function allowing to set headers while chaining calls.\n *\n * If the replace argument is set to true, replace the current headers with the provided content.\n * Otherwise, it appends the content to the current headers, only replacing already existing values\n *\n * @param content - new headers content\n * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n */\nKuzzleDocument.prototype.setHeaders = function (content, replace) {\n  this.kuzzle.setHeaders.call(this, content, replace);\n  return this;\n};\n\n\nmodule.exports = KuzzleDocument;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/kuzzleDocument.js\n ** module id = 6\n ** module chunks = 0\n **/","/**\n * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n *\n * @callback responseCallback\n * @param {Object} err - Error object, NULL if the query is successful\n * @param {Object} [data] - The content of the query response\n */\n\n\n/**\n * Kuzzle's memory storage is a separate data store from the database layer.\n * It is internaly based on Redis. You can access most of Redis functions (all\n * lowercased), excepting:\n *   * all cluster based functions\n *   * all script based functions\n *   * all cursors functions\n *\n * For instance:\n *     kuzzle.memoryStorage\n *      .set('myKey', 'myValue')\n *      .get('myKey', function (err, response) {\n *        console.log(response.result);\n *\n *        // { _id: 'foo', body: { value: 'myValue' }}\n *      });\n *\n *\n * @param {object} kuzzle - Kuzzle instance to inherit from\n * @constructor\n */\nfunction KuzzleMemoryStorage(kuzzle) {\n  Object.defineProperties(this, {\n    // read-only properties\n    kuzzle: {\n      value: kuzzle,\n      enumerable: true\n    },\n    // writable properties\n    headers: {\n      value: JSON.parse(JSON.stringify(kuzzle.headers)),\n      enumerable: true,\n      writable: true\n    }\n  });\n\n  this.setHeaders = kuzzle.setHeaders.bind(this);\n\n  if (this.kuzzle.bluebird) {\n    return this.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var blacklist = ['setHeaders'];\n\n        return passes && blacklist.indexOf(name) === -1;\n      }\n    });\n  }\n\n  return this;\n}\n\n\n/**\n * constructs the memoryStorage functions.\n */\n(function() {\n\n  var\n    keyVal = ['id', 'value'],\n    idOrKeys = ['id', 'keys'],\n    commands = {\n      append: keyVal,\n      bgrewriteaof: [],\n      bgsave: [],\n      bitcount: ['id', 'start', 'end'],\n      bitop: ['operation', 'destkey', idOrKeys],\n      bitpos: ['id', 'bit', { __opts__: ['start', 'end']}],\n      blpop: [idOrKeys, 'timeout'],\n      brpoplpush: ['source', 'destination'],\n      dbsize: [],\n      decrby: keyVal,\n      del: [idOrKeys],\n      discard: [],\n      exec: [],\n      exists: [idOrKeys],\n      expire: ['id', 'seconds'],\n      expireat: ['id', 'timestamp'],\n      flushdb: [],\n      // @todo: implement geolocation methods once available in Redis stable release\n      getbit: ['id', 'offset'],\n      getrange: ['id', 'start', 'end'],\n      hdel: ['id', ['field', 'fields']],\n      hexists: ['id', 'field'],\n      hincrby: ['id', 'field', 'value'],\n      hmset: ['id', 'values'],\n      hset: ['id', 'field', 'value'],\n      info: ['section'],\n      keys: [ 'pattern' ],\n      lastsave: [],\n      lindex: ['id', 'idx'],\n      linsert: ['id', 'position', 'pivot', 'value'],\n      lpush: ['id', ['value', 'values']],\n      lrange: ['id', 'start', 'stop'],\n      lrem: ['id', 'count', 'value'],\n      lset: ['id', 'idx', 'value'],\n      ltrim: ['id', 'start', 'stop'],\n      mset: ['values'],\n      multi: [],\n      object: ['subcommand', 'args'],\n      pexpire: ['id', 'milliseconds'],\n      pexpireat: ['id', 'timestamp'],\n      pfadd: ['id', ['element', 'elements']],\n      pfmerge: ['destkey', ['sourcekey', 'sourcekeys']],\n      ping: [],\n      psetex: ['id', 'milliseconds', 'value'],\n      publish: ['channel', 'message'],\n      randomkey: [],\n      rename: ['id', 'newkey'],\n      renamenx: ['id', 'newkey'],\n      restore: ['id', 'ttl', 'content'],\n      rpoplpush: ['source', 'destination'],\n      sadd: ['id', ['member', 'members']],\n      save: [],\n      set: ['id', 'value', {__opts__:['ex', 'px', 'nx', 'xx']}],\n      sdiffstore: ['destination', idOrKeys],\n      setbit: ['id', 'offset', 'value'],\n      setex: ['id', 'seconds', 'value'],\n      setrange: ['id', 'offset', 'value'],\n      sinterstore: ['destination', idOrKeys],\n      sismember: ['id', 'member'],\n      smove: ['id', 'destination', 'member'],\n      sort: ['id', {__opts__:['by', 'offset', 'count', 'get', 'direction', 'alpha', 'store']}],\n      spop: ['id', 'count'],\n      srem: ['id', ['member', 'members']],\n      sunionstore: ['destination', idOrKeys],\n      unwatch: [],\n      wait: ['numslaves', 'timeout'],\n      zadd: ['id', {__opts__: ['nx', 'xx', 'ch', 'incr', 'score', 'member', 'members']}],\n      zcount: ['id', 'min', 'max'],\n      zincrby: ['id', 'value', 'member'],\n      zinterstore: ['destination', idOrKeys, {__opts__: ['weight', 'weights', 'aggregate']}],\n      zlexcount: ['id', 'min', 'max'],\n      zrange: ['id', 'start', 'stop', {__opts__: ['withscores']}],\n      zrangebylex: ['id', 'min', 'max', {__opts__: ['offset', 'count']}],\n      zrangebyscore: ['id', 'min', 'max', {__opts__: ['withscores', 'offset', 'count']}],\n      zrem: ['id', 'member'],\n      zremrangebylex: ['id', 'min', 'max'],\n      zremrangebyscore: ['id', 'min', 'max'],\n      zrevrangebylex: ['id', 'max', 'min', {__opts__: ['offset', 'count']}],\n      zrevrangebyscore: ['id', 'max', 'min', {__opts__: ['withscores', 'offset', 'count']}],\n      zrevrank: ['id', 'member']\n    };\n\n  // unique argument key\n  commands.decr = commands.get = commands.dump = commands.hgetall = commands.hkeys = commands.hlen = commands.hstrlen = commands.hvals = commands.incr = commands.llen = commands.lpop = commands.persist = commands.pttl = commands.rpop = commands.scard = commands.smembers = commands.strlen = commands.ttl = commands.type = commands.zcard = ['id'];\n\n  // key value\n  commands.getset = commands.lpushx = keyVal;\n\n  // key key...\n  commands.del = commands.exists = commands.mget = commands.pfcount = commands.sdiff = commands.sinter = commands.sunion = commands.watch = [idOrKeys];\n\n  commands.incrby = commands.incrbyfloat = commands.decrby;\n  commands.brpop = commands.blpop;\n  commands.hget = commands.hexists;\n  commands.hmget = commands.hdel;\n  commands.hsetnx = commands.hset;\n  commands.msetnx = commands.mset;\n  commands.rpush = commands.lpush;\n  commands.hincrbyfloat = commands.hincrby;\n  commands.srandmember = commands.spop;\n  commands.zrevrange = commands.zrange;\n  commands.zscore = commands.zrevrank;\n\n  Object.keys(commands).forEach(function (command) {\n    KuzzleMemoryStorage.prototype[command] = function () {\n      var\n        args = Array.prototype.slice.call(arguments),\n        options = null,\n        cb,\n        query = {\n          controller: 'ms',\n          action: command\n        },\n        data = {};\n\n      if (typeof args[args.length - 1] === 'function') {\n        cb = args.pop();\n      }\n\n      if (args.length && typeof args[args.length - 1] === 'object' && Object.keys(args[args.length - 1]).length === 1 && args[args.length - 1].queuable !== undefined) {\n        options = args.pop();\n      }\n\n      commands[command].forEach(function (v, i) {\n        if (args[i] === undefined) {\n          return;\n        }\n\n        if (Array.isArray(v)) {\n          v = Array.isArray(args[i]) ? v[1] : v[0];\n        }\n\n        if (v === 'id') {\n          data._id = args[i];\n        }\n        else {\n          if (!data.body) {\n            data.body = {};\n          }\n\n          if (typeof v === 'object' && v.__opts__ !== undefined) {\n            v.__opts__.forEach(function (arg) {\n              if (args[i][arg] !== undefined) {\n                data.body[arg] = args[i][arg];\n              }\n            });\n          }\n          else {\n            data.body[v] = args[i];\n          }\n        }\n      });\n\n      this.kuzzle.query(query, data, options, cb);\n\n      return this;\n\n    };\n  });\n\n})();\n\nmodule.exports = KuzzleMemoryStorage;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/kuzzleMemoryStorage.js\n ** module id = 7\n ** module chunks = 0\n **/","var\n  uuid = require('node-uuid');\n\n/**\n * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n *\n * @callback responseCallback\n * @param {Object} err - Error object, NULL if the query is successful\n * @param {Object} [data] - The content of the query response\n */\n\n/**\n * This object is the result of a subscription request, allowing to manipulate the subscription itself.\n *\n * In Kuzzle, you don’t exactly subscribe to a room or a topic but, instead, you subscribe to documents.\n *\n * What it means is that, to subscribe, you provide to Kuzzle a set of matching filters.\n * Once you have subscribed, if a pub/sub message is published matching your filters, or if a matching stored\n * document change (because it is created, updated or deleted), then you’ll receive a notification about it.\n *\n * @param {object} kuzzleDataCollection - an instantiated and valid kuzzle object\n * @param {object} [options] - subscription optional configuration\n * @constructor\n */\nfunction KuzzleRoom(kuzzleDataCollection, options) {\n  // Define properties\n  Object.defineProperties(this, {\n    // private properties\n    callback: {\n      value: null,\n      writable: true\n    },\n    channel: {\n      value: null,\n      writable: true\n    },\n    id: {\n      value: uuid.v4()\n    },\n    lastRenewal: {\n      value: null,\n      writable: true\n    },\n    notifier: {\n      value: null,\n      writable: true\n    },\n    queue: {\n      value: [],\n      writable: true\n    },\n    // Delay before allowing a subscription renewal\n    renewalDelay: {\n      value: 500\n    },\n    scope: {\n      value: options && options.scope ? options.scope : 'all'\n    },\n    state: {\n      value: options && options.state ? options.state : 'done'\n    },\n    subscribing: {\n      value: false,\n      writable: true\n    },\n    users: {\n      value: options && options.users ? options.users : 'none'\n    },\n    // read-only properties\n    collection: {\n      value: kuzzleDataCollection,\n      enumerable: true\n    },\n    kuzzle: {\n      value: kuzzleDataCollection.kuzzle,\n      enumerable: true\n    },\n    // writable properties\n    filters: {\n      value: null,\n      enumerable: true,\n      writable: true\n    },\n    headers: {\n      value: JSON.parse(JSON.stringify(kuzzleDataCollection.headers)),\n      enumerable: true,\n      writable: true\n    },\n    metadata: {\n      value: (options && options.metadata) ? options.metadata : {},\n      enumerable: true,\n      writable: true\n    },\n    roomId: {\n      value: null,\n      enumerable: true,\n      writable: true\n    },\n    subscribeToSelf: {\n      value: options && typeof options.subscribeToSelf === 'boolean' ? options.subscribeToSelf : true,\n      enumerable: true,\n      writable: true\n    }\n  });\n\n  if (this.kuzzle.bluebird) {\n    return this.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var whitelist = ['count'];\n\n        return passes && whitelist.indexOf(name) !== -1;\n      }\n    });\n  }\n\n  return this;\n}\n\n/**\n * Returns the number of other subscriptions on that room.\n *\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzleRoom.prototype.count = function (cb) {\n  var data;\n\n  this.kuzzle.callbackRequired('KuzzleRoom.count', cb);\n\n  data = this.kuzzle.addHeaders({body: {roomId: this.roomId}}, this.headers);\n\n  if (!isReady.call(this)) {\n    this.queue.push({action: 'count', args: [cb]});\n    return;\n  }\n\n  if (!this.roomId) {\n    throw new Error('KuzzleRoom.count: cannot count subscriptions on an inactive room');\n  }\n\n  this.kuzzle.query(this.collection.buildQueryArgs('subscribe', 'count'), data, function (err, res) {\n    cb(err, res && res.result.count);\n  });\n};\n\n/**\n * Renew the subscription using new filters\n *\n * @param {object} [filters] - Filters in Kuzzle DSL format\n * @param {responseCallback} cb - called for each new notification\n */\nKuzzleRoom.prototype.renew = function (filters, cb) {\n  var\n    now = Date.now(),\n    subscribeQuery = {\n      scope: this.scope,\n      state: this.state,\n      users: this.users\n    },\n    self = this;\n\n  if (!cb && filters && typeof filters === 'function') {\n    cb = filters;\n    filters = null;\n  }\n\n  self.kuzzle.callbackRequired('KuzzleRoom.renew', cb);\n\n  /*\n    Skip subscription renewal if another one was performed a moment before\n   */\n  if (self.lastRenewal && (now - self.lastRenewal) <= self.renewalDelay) {\n    return;\n  }\n\n  if (filters) {\n    self.filters = filters;\n  }\n\n  /*\n   if not yet connected, register itself to the subscriptions list and wait for the\n   main Kuzzle object to renew once online\n    */\n  if (self.kuzzle.state !== 'connected') {\n    self.callback = cb;\n    self.kuzzle.subscriptions.pending[self.id] = self;\n    return;\n  }\n\n  if (self.subscribing) {\n    self.queue.push({action: 'renew', args: [filters, cb]});\n    return;\n  }\n\n  self.unsubscribe();\n  self.roomId = null;\n  self.subscribing = true;\n  self.callback = cb;\n  self.kuzzle.subscriptions.pending[self.id] = self;\n\n  subscribeQuery.body = self.filters;\n  subscribeQuery = self.kuzzle.addHeaders(subscribeQuery, this.headers);\n\n  self.kuzzle.query(self.collection.buildQueryArgs('subscribe', 'on'), subscribeQuery, {metadata: self.metadata}, function (error, response) {\n    delete self.kuzzle.subscriptions.pending[self.id];\n    self.subscribing = false;\n\n    if (error) {\n      self.queue = [];\n      throw new Error('Error during Kuzzle subscription: ' + error.message);\n    }\n\n    self.lastRenewal = now;\n    self.roomId = response.result.roomId;\n    self.channel = response.result.channel;\n\n    if (!self.kuzzle.subscriptions[self.roomId]) {\n      self.kuzzle.subscriptions[self.roomId] = {};\n    }\n\n    self.kuzzle.subscriptions[self.roomId][self.id] = self;\n\n    self.notifier = notificationCallback.bind(self);\n    self.kuzzle.network.on(self.channel, self.notifier);\n\n    dequeue.call(self);\n  });\n};\n\n/**\n * Unsubscribes from Kuzzle.\n *\n * Stop listening immediately. If there is no listener left on that room, sends an unsubscribe request to Kuzzle, once\n * pending subscriptions reaches 0, and only if there is still no listener on that room.\n * We wait for pending subscriptions to finish to avoid unsubscribing while another subscription on that room is\n *\n * @return {*} this\n */\nKuzzleRoom.prototype.unsubscribe = function () {\n  var\n    self = this,\n    room = self.roomId,\n    interval;\n\n  if (!isReady.call(this)) {\n    self.queue.push({action: 'unsubscribe', args: []});\n    return self;\n  }\n\n  if (room) {\n    self.kuzzle.network.off(self.channel, this.notifier);\n\n    if (Object.keys(self.kuzzle.subscriptions[room]).length === 1) {\n      delete self.kuzzle.subscriptions[room];\n\n      if (Object.keys(self.kuzzle.subscriptions.pending).length === 0) {\n        self.kuzzle.query(self.collection.buildQueryArgs('subscribe', 'off'), {body: {roomId: room}});\n      } else {\n        interval = setInterval(function () {\n          if (Object.keys(self.kuzzle.subscriptions.pending).length === 0) {\n            if (!self.kuzzle.subscriptions[room]) {\n              self.kuzzle.query(self.collection.buildQueryArgs('subscribe', 'off'), {body: {roomId: room}});\n            }\n            clearInterval(interval);\n          }\n        }, 100);\n      }\n    } else {\n      delete self.kuzzle.subscriptions[room][self.id];\n    }\n\n    self.roomId = null;\n  }\n\n  return self;\n};\n\n/**\n * Helper function allowing to set headers while chaining calls.\n *\n * If the replace argument is set to true, replace the current headers with the provided content.\n * Otherwise, it appends the content to the current headers, only replacing already existing values\n *\n * @param content - new headers content\n * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n */\nKuzzleRoom.prototype.setHeaders = function (content, replace) {\n  this.kuzzle.setHeaders.call(this, content, replace);\n  return this;\n};\n\n/**\n * Callback called by the network handler when a message is sent to the subscribed room ID\n * Calls the registered callback if the notification passes the subscription filters\n *\n * @param {object} data - data\n * @returns {*}\n */\nfunction notificationCallback (data) {\n  if (data.error) {\n    return this.callback(data.error);\n  }\n\n  if (data.action === 'jwtTokenExpired') {\n    this.kuzzle.jwtToken = undefined;\n    return this.kuzzle.emitEvent('jwtTokenExpired');\n  }\n\n  if (this.kuzzle.requestHistory[data.requestId]) {\n    if (this.subscribeToSelf) {\n      this.callback(null, data);\n    }\n    delete this.kuzzle.requestHistory[data.requestId];\n  } else {\n    this.callback(null, data);\n  }\n}\n\n\n/**\n * Dequeue actions performed while subscription was being renewed\n */\nfunction dequeue () {\n  var element;\n\n  while (this.queue.length > 0) {\n    element = this.queue.shift();\n\n    this[element.action].apply(this, element.args);\n  }\n}\n\nfunction isReady() {\n  return this.kuzzle.state === 'connected' && !this.subscribing;\n}\n\nmodule.exports = KuzzleRoom;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/kuzzleRoom.js\n ** module id = 8\n ** module chunks = 0\n **/","/**\n *\n * @param host\n * @param wsPort\n * @param ioPort\n * @returns {Object} tnstantiated WebSocket/Socket.IO object\n */\n\nfunction network(host, wsPort, ioPort, sslConnection) {\n  // Web browser / NodeJS websocket handling\n  if (typeof window !== 'undefined') {\n    // use native websockets if the browser supports it\n    if (typeof WebSocket !== 'undefined') {\n      return new (require('./wrappers/wsbrowsers'))(host, wsPort, sslConnection);\n    }\n    // otherwise fallback to socket.io, if available\n    else if (window.io) {\n      return new (require('./wrappers/socketio'))(host, ioPort, sslConnection);\n    }\n\n    throw new Error('Aborting: no websocket support detected and no socket.io library loaded either.');\n  }\n\n  return new (require('./wrappers/wsnode'))(host, wsPort, sslConnection);\n}\n\nmodule.exports = network;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/networkWrapper/index.js\n ** module id = 9\n ** module chunks = 0\n **/","function SocketIO(host, port, ssl) {\n  this.host = host;\n  this.port = port;\n  this.ssl = ssl;\n  this.socket = null;\n\n  /**\n   * Creates a new socket from the provided arguments\n   *\n   * @constructor\n   * @param {boolean} autoReconnect\n   * @param {int} reconnectionDelay\n   */\n  this.connect = function (autoReconnect, reconnectionDelay) {\n    this.socket = window.io((this.ssl ? 'https://' : 'http://') + this.host + ':' + this.port, {\n      reconnection: autoReconnect,\n      reconnectionDelay: reconnectionDelay,\n      forceNew: true\n    });\n  };\n\n  /**\n   * Fires the provided callback whence a connection is established\n   *\n   * @param {function} callback\n   */\n  this.onConnect = function (callback) {\n    this.socket.on('connect', callback);\n  };\n\n  /**\n   * Fires the provided callback whenever a connection error is received\n   * @param {function} callback\n   */\n  this.onConnectError = function (callback) {\n    this.socket.on('connect_error', callback);\n  };\n\n  /**\n   * Fires the provided callback whenever a disconnection occurred\n   * @param {function} callback\n   */\n  this.onDisconnect = function (callback) {\n    this.socket.on('disconnect', callback);\n  };\n\n  /**\n   * Fires the provided callback whenever a connection has been reestablished\n   * @param {function} callback\n   */\n  this.onReconnect = function (callback) {\n    this.socket.on('reconnect', callback);\n  };\n\n  /**\n   * Registers a callback on a room. Once 1 message is received, fires the\n   * callback and unregister it afterward.\n   *\n   * @param {string} roomId\n   * @param {function} callback\n   */\n  this.once = function (roomId, callback) {\n    this.socket.once(roomId, callback);\n  };\n\n  /**\n   * Registers a callback on a room.\n   *\n   * @param {string} roomId\n   * @param {function} callback\n   */\n  this.on = function (roomId, callback) {\n    this.socket.on(roomId, callback);\n  };\n\n  /**\n   * Unregisters a callback from a room.\n   *\n   * @param {string} roomId\n   * @param {function} callback\n   */\n  this.off = function (roomId, callback) {\n    this.socket.off(roomId, callback);\n  };\n\n\n  /**\n   * Sends a payload to the connected server\n   *\n   * @param {Object} payload\n   */\n  this.send = function (payload) {\n    this.socket.emit('kuzzle', payload);\n  };\n\n  /**\n   * Closes the connection\n   */\n  this.close = function () {\n    this.socket.close();\n    this.socket = null;\n  };\n}\n\nmodule.exports = SocketIO;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/networkWrapper/wrappers/socketio.js\n ** module id = 10\n ** module chunks = 0\n **/","function WSBrowsers(host, port, ssl) {\n  var self = this;\n  this.host = host;\n  this.port = port;\n  this.ssl = ssl;\n  this.client = null;\n  this.retrying = false;\n\n  /*\n     Listeners are stored using the following format:\n     roomId: {\n     fn: callback_function,\n     once: boolean\n     }\n   */\n  this.listeners = {\n    error: [],\n    connect: [],\n    disconnect: [],\n    reconnect: []\n  };\n\n  /**\n   * Creates a new socket from the provided arguments\n   *\n   * @constructor\n   * @param {boolean} autoReconnect\n   * @param {int} reconnectionDelay\n   * @returns {Object} Socket\n   */\n  this.connect = function (autoReconnect, reconnectionDelay) {\n    this.client = new WebSocket((this.ssl ? 'wss://' : 'ws://') + this.host + ':' + this.port);\n\n    this.client.onopen = function () {\n      if (self.retrying) {\n        poke(self.listeners, 'reconnect');\n      }\n      else {\n        poke(self.listeners, 'connect');\n      }\n    };\n\n    this.client.onclose = function (code, message) {\n      if (code === 1000) {\n        poke(self.listeners, 'disconnect');\n      }\n      else {\n        onClientError.call(self, autoReconnect, reconnectionDelay, message);\n      }\n    };\n\n    this.client.onerror = function (error) {\n      onClientError.call(self, autoReconnect, reconnectionDelay, error);\n    };\n\n    this.client.onmessage = function (payload) {\n      var data = JSON.parse(payload.data);\n\n      if (data.room && self.listeners[data.room]) {\n        poke(self.listeners, data.room, data);\n      }\n    };\n  };\n\n  /**\n   * Fires the provided callback whence a connection is established\n   *\n   * @param {function} callback\n   */\n  this.onConnect = function (callback) {\n    this.listeners.connect.push({\n      fn: callback,\n      keep: true\n    });\n  };\n\n  /**\n   * Fires the provided callback whenever a connection error is received\n   * @param {function} callback\n   */\n  this.onConnectError = function (callback) {\n    this.listeners.error.push({\n      fn: callback,\n      keep: true\n    });\n  };\n\n  /**\n   * Fires the provided callback whenever a disconnection occurred\n   * @param {function} callback\n   */\n  this.onDisconnect = function (callback) {\n    this.listeners.disconnect.push({\n      fn: callback,\n      keep: true\n    });\n  };\n\n  /**\n   * Fires the provided callback whenever a connection has been reestablished\n   * @param {function} callback\n   */\n  this.onReconnect = function (callback) {\n    this.listeners.reconnect.push({\n      fn: callback,\n      keep: true\n    });\n  };\n\n  /**\n   * Registers a callback on a room. Once 1 message is received, fires the\n   * callback and unregister it afterward.\n   *\n   * @param {string} roomId\n   * @param {function} callback\n   */\n  this.once = function (roomId, callback) {\n    if (!this.listeners[roomId]) {\n      this.listeners[roomId] = [];\n    }\n\n    this.listeners[roomId].push({\n      fn: callback,\n      keep: false\n    });\n  };\n\n  /**\n   * Registers a callback on a room.\n   *\n   * @param {string} roomId\n   * @param {function} callback\n   */\n  this.on = function (roomId, callback) {\n    if (!this.listeners[roomId]) {\n      this.listeners[roomId] = [];\n    }\n\n    this.listeners[roomId].push({\n      fn: callback,\n      keep: true\n    });\n  };\n\n  /**\n   * Unregisters a callback from a room.\n   *\n   * @param {string} roomId\n   * @param {function} callback\n   */\n  this.off = function (roomId, callback) {\n    var index;\n\n    if (this.listeners[roomId]) {\n      index = this.listeners[roomId].findIndex(function (listener) {\n        return listener.fn === callback;\n      });\n\n      if (index !== -1) {\n        if (this.listeners[roomId].length === 1 && ['error', 'connect', 'disconnect', 'reconnect'].indexOf(roomId) === -1) {\n          delete this.listeners[roomId];\n        }\n        else {\n          this.listeners[roomId].splice(index, 1);\n        }\n      }\n    }\n  };\n\n\n  /**\n   * Sends a payload to the connected server\n   *\n   * @param {Object} payload\n   */\n  this.send = function (payload) {\n    if (this.client && this.client.readyState === this.client.OPEN) {\n      this.client.send(JSON.stringify(payload));\n    }\n  };\n\n  /**\n   * Closes the connection\n   */\n  this.close = function () {\n    this.listeners = {\n      error: [],\n      connect: [],\n      disconnect: [],\n      reconnect: []\n    };\n\n    this.retrying = false;\n    this.client.close();\n    this.client = null;\n  };\n}\n\n/**\n * Executes all registered listeners in the provided\n * \"listeners\" structure.\n *\n * Listeners are of the following format:\n * [\n *    { fn: callback, once: boolean },\n *    ...\n * ]\n *\n * @private\n * @param {Object} listeners\n * @param {string} roomId\n * @param {Object} [payload]\n */\nfunction poke (listeners, roomId, payload) {\n  var\n    i,\n    length = listeners[roomId].length;\n\n  for (i = 0; i < length; ++i) {\n    listeners[roomId][i].fn(payload);\n\n    if (!listeners[roomId][i].keep) {\n      if (listeners[roomId].length > 1) {\n        listeners[roomId].splice(i, 1);\n        --i;\n        --length;\n      }\n      else {\n        delete listeners[roomId];\n      }\n    }\n  }\n}\n\n/**\n * Called when the connection closes with an error state\n *\n * @param {boolean} autoReconnect\n * @param {number} reconnectionDelay\n * @param {string|Object} message\n */\nfunction onClientError(autoReconnect, reconnectionDelay, message) {\n  var self = this;\n\n  if (autoReconnect) {\n    self.retrying = true;\n    setTimeout(function () {\n      self.connect(autoReconnect, reconnectionDelay);\n    }, reconnectionDelay);\n  }\n\n  poke(self.listeners, 'error', message);\n}\n\n\nmodule.exports = WSBrowsers;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/networkWrapper/wrappers/wsbrowsers.js\n ** module id = 11\n ** module chunks = 0\n **/","var\n  KuzzleSecurityDocument = require('./kuzzleSecurityDocument');\n\nfunction KuzzleProfile(kuzzleSecurity, id, content) {\n\n  KuzzleSecurityDocument.call(this, kuzzleSecurity, id, content);\n\n  // Define properties\n  Object.defineProperties(this, {\n    // private properties\n    deleteActionName: {\n      value: 'deleteProfile'\n    },\n    updateActionName: {\n      value: 'updateProfile'\n    }\n  });\n\n  // promisifying\n  if (kuzzleSecurity.kuzzle.bluebird) {\n    return kuzzleSecurity.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var whitelist = ['hydrate', 'save'];\n\n        return passes && whitelist.indexOf(name) !== -1;\n      }\n    });\n  }\n\n}\n\nKuzzleProfile.prototype = Object.create(KuzzleSecurityDocument.prototype, {\n  constructor: {\n    value: KuzzleProfile\n  }\n});\n\n/**\n * Persist to the persistent layer the current profile\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {KuzzleProfile} this\n */\nKuzzleProfile.prototype.save = function (options, cb) {\n  var\n    data,\n    self = this;\n\n  if (!this.content.policies) {\n    throw new Error('Argument \"policies\" is mandatory in a profile. This argument contains an array of objects.');\n  }\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data = this.serialize();\n\n  self.kuzzle.query(self.kuzzleSecurity.buildQueryArgs('createOrReplaceProfile'), data, options, cb && function (error) {\n    cb(error, error ? undefined : self);\n  });\n\n  return self;\n};\n\n\n/**\n * Add a policy in the policies list\n * @param {Object} policy - must be an object containing at least a \"roleId\" member which must be a string.\n *\n * @returns {KuzzleProfile} this\n */\nKuzzleProfile.prototype.addPolicy = function (policy) {\n\n  if (typeof policy !== 'object' || typeof policy.roleId !== 'string') {\n    throw new Error('Parameter \"policies\" must be an object containing at least a \"roleId\" member which must be a string.');\n  }\n\n  if (!this.content.policies) {\n    this.content.policies = [];\n  }\n\n  this.content.policies.push(policy);\n\n  return this;\n};\n\n/**\n * Set policies list\n * @param {Array} policies - must be an array of objects containing at least a \"roleId\" member which must be a string\n *\n * @returns {KuzzleProfile} this\n */\nKuzzleProfile.prototype.setPolicies = function (policies) {\n\n  if (!Array.isArray(policies)) {\n    throw new Error('Parameter \"policies\" must be an array of objects containing at least a \"roleId\" member which must be a string');\n  }\n\n  policies.map(function (policy) {\n    if (typeof policy !== 'object' || typeof policy.roleId !== 'string') {\n      throw new Error('Parameter \"policies\" must be an array of objects containing at least a \"roleId\" member which must be a string');\n    }\n  });\n\n  this.content.policies = policies;\n\n  return this;\n};\n\n/**\n * Serialize this object into a JSON object\n *\n * @return {object} JSON object representing this securityDocument\n */\nKuzzleProfile.prototype.serialize = function () {\n  var\n    data = {};\n\n  if (this.id) {\n    data._id = this.id;\n  }\n\n  data.body = this.content;\n\n  return data;\n};\n\n/**\n * Returns the list of policies associated to this profile.\n * Each policy element is an array of objects containing at least a \"roleId\" member which must be a string\n *\n * @return {object} an array of policies\n */\nKuzzleProfile.prototype.getPolicies = function () {\n  return this.content.policies;\n};\n\nmodule.exports = KuzzleProfile;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/security/kuzzleProfile.js\n ** module id = 12\n ** module chunks = 0\n **/","var KuzzleSecurityDocument = require('./kuzzleSecurityDocument');\n\nfunction KuzzleRole(kuzzleSecurity, id, content) {\n\n  KuzzleSecurityDocument.call(this, kuzzleSecurity, id, content);\n\n  // Define properties\n  Object.defineProperties(this, {\n    // private properties\n    deleteActionName: {\n      value: 'deleteRole'\n    },\n    updateActionName: {\n      value: 'updateRole'\n    }\n  });\n\n  // promisifying\n  if (kuzzleSecurity.kuzzle.bluebird) {\n    return kuzzleSecurity.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var whitelist = ['save'];\n\n        return passes && whitelist.indexOf(name) !== -1;\n      }\n    });\n  }\n\n}\n\nKuzzleRole.prototype = Object.create(KuzzleSecurityDocument.prototype, {\n  constructor: {\n    value: KuzzleRole\n  }\n});\n\n/**\n * Saves this role into Kuzzle.\n *\n * If this is a new role, this function will create it in Kuzzle.\n * Otherwise, this method will replace the latest version of this role in Kuzzle by the current content\n * of this object.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {KuzzleRole} this object\n */\nKuzzleRole.prototype.save = function (options, cb) {\n  var\n    data = this.serialize(),\n    self = this;\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.kuzzleSecurity.buildQueryArgs('createOrReplaceRole'), data, options, cb && function (error) {\n    cb(error, error ? undefined : self);\n  });\n\n  return this;\n};\n\nmodule.exports = KuzzleRole;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/security/kuzzleRole.js\n ** module id = 13\n ** module chunks = 0\n **/","var\n  KuzzleRole = require('./kuzzleRole'),\n  KuzzleProfile = require('./kuzzleProfile'),\n  KuzzleUser = require('./kuzzleUser');\n\n/**\n * Kuzzle security constructor\n *\n * @param kuzzle\n * @returns {KuzzleSecurity}\n * @constructor\n */\nfunction KuzzleSecurity(kuzzle) {\n\n  Object.defineProperty(this, 'kuzzle', {\n    value: kuzzle\n  });\n\n  Object.defineProperty(this, 'buildQueryArgs', {\n    value: function (action) {\n      return {\n        controller: 'security',\n        action: action\n      };\n    }\n  });\n\n  if (this.kuzzle.bluebird) {\n    return this.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var blacklist = ['roleFactory', 'profileFactory', 'userFactory', 'isActionAllowed'];\n\n        return passes && blacklist.indexOf(name) === -1;\n      }\n    });\n  }\n\n  return this;\n}\n\n\n/**\n * Retrieve a single Role using its unique role ID.\n *\n * @param {string} id\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - returns Kuzzle's response\n */\nKuzzleSecurity.prototype.getRole = function (id, options, cb) {\n  var\n    data,\n    self = this;\n\n  if (!id) {\n    throw new Error('Id parameter is mandatory for getRole function');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data = {_id: id};\n\n  self.kuzzle.callbackRequired('KuzzleSecurity.getRole', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('getRole'), data, options, function (err, response) {\n    cb(err, err ? undefined : new KuzzleRole(self, response.result._id, response.result._source));\n  });\n};\n\n/**\n * Executes a search on roles according to a filter\n *\n * /!\\ There is a small delay between role creation and their existence in our persistent search layer,\n * usually a couple of seconds.\n * That means that a role that was just been created won’t be returned by this function.\n *\n * @param {Object} filters - this object can contains an array `indexes` with a list of index id, a integer `from` and a integer `size`\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - returns Kuzzle's response\n *\n */\nKuzzleSecurity.prototype.searchRoles = function (filters, options, cb) {\n  var\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('KuzzleSecurity.searchRoles', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('searchRoles'), {body: filters}, options, function (error, result) {\n    var documents;\n\n    if (error) {\n      return cb(error);\n    }\n\n    documents = result.result.hits.map(function (doc) {\n      return new KuzzleRole(self, doc._id, doc._source);\n    });\n\n    cb(null, { total: result.result.total, roles: documents });\n  });\n};\n\n/**\n * Create a new role in Kuzzle.\n *\n * Takes an optional argument object with the following property:\n *    - replaceIfExist (boolean, default: false):\n *        If the same role already exists: throw an error if sets to false.\n *        Replace the existing role otherwise\n *\n * @param {string} id - role identifier\n * @param {object} content - a plain javascript object representing the role\n * @param {object} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n */\nKuzzleSecurity.prototype.createRole = function (id, content, options, cb) {\n  var\n    self = this,\n    data = {},\n    action = 'createRole';\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('KuzzleSecurity.createRole: cannot create a role without a role ID');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data._id = id;\n  data.body = content;\n\n  if (options) {\n    action = options.replaceIfExist ? 'createOrReplaceRole' : 'createRole';\n  }\n\n  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : new KuzzleRole(self, res.result._id, res.result._source));\n  });\n};\n\n\n/**\n * Update a role in Kuzzle.\n *\n * @param {string} id - role identifier\n * @param {object} content - a plain javascript object representing the role's modification\n * @param {object} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n * @returns {KuzzleSecurity} this object\n */\nKuzzleSecurity.prototype.updateRole = function (id, content, options, cb) {\n  var\n    self = this,\n    data = {_id: id, body: content},\n    action = 'updateRole';\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('KuzzleSecurity.updateRole: cannot update a role without a role ID');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err) {\n    cb(err, err ? undefined : new KuzzleRole(self, id, content));\n  });\n\n  return this;\n};\n\n/**\n * Delete role.\n *\n * There is a small delay between role deletion and their deletion in our advanced search layer,\n * usually a couple of seconds.\n * That means that a role that was just been delete will be returned by this function\n *\n *\n * @param {string} id - Role id to delete\n * @param {object} [options] - (optional) arguments\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {KuzzleSecurity} this object\n */\nKuzzleSecurity.prototype.deleteRole = function (id, options, cb) {\n  var data = {_id: id};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query(this.buildQueryArgs('deleteRole'), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : res.result._id);\n  });\n\n  return this;\n};\n\n/**\n * Instantiate a new KuzzleRole object. Workaround to the module.exports limitation, preventing multiple\n * constructors to be exposed without having to use a factory or a composed object.\n *\n * @param {string} id - role id\n * @param {object} content - role content\n * @constructor\n */\nKuzzleSecurity.prototype.roleFactory = function(id, content) {\n  return new KuzzleRole(this, id, content);\n};\n\n\n/**\n * Get a specific profile from kuzzle\n *\n *\n * @param {string} id\n * @param {object} [options] - (optional) arguments\n * @param {responseCallback} cb - returns Kuzzle's response\n */\nKuzzleSecurity.prototype.getProfile = function (id, options, cb) {\n  var\n    data,\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('Id parameter is mandatory for getProfile function');\n  }\n\n\n  data = {_id: id};\n\n  self.kuzzle.callbackRequired('KuzzleSecurity.getProfile', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('getProfile'), data, options, function (error, response) {\n    cb(error, error ? undefined : new KuzzleProfile(self, response.result._id, response.result._source));\n  });\n};\n\n/**\n * Executes a search on profiles according to a filter\n *\n *\n * /!\\ There is a small delay between profile creation and their existence in our persistent search layer,\n * usually a couple of seconds.\n * That means that a profile that was just been created won’t be returned by this function.\n *\n * @param {Object} filters - this object can contains an array `roles` with a list of roles id, a integer `from` and a integer `size`\n * @param {object} [options] - (optional) arguments\n * @param {responseCallback} [cb] - returns Kuzzle's response\n */\nKuzzleSecurity.prototype.searchProfiles = function (filters, options, cb) {\n  var\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('KuzzleSecurity.searchProfiles', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('searchProfiles'), {body: filters}, options, function (error, response) {\n    var documents;\n\n    if (error) {\n      return cb(error);\n    }\n\n    documents = response.result.hits.map(function (doc) {\n      return new KuzzleProfile(self, doc._id, doc._source);\n    });\n\n    cb(null, { total: response.result.total, profiles: documents });\n  });\n};\n\n/**\n * Create a new profile in Kuzzle.\n *\n * Takes an optional argument object with the following property:\n *    - replaceIfExist (boolean, default: false):\n *        If the same profile already exists: throw an error if sets to false.\n *        Replace the existing profile otherwise\n *\n * @param {string} id - profile identifier\n * @param {object} content - attribute `roles` in `content` must only contains an array of role id\n * @param {object} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n */\nKuzzleSecurity.prototype.createProfile = function (id, content, options, cb) {\n  var\n    self = this,\n    data = {},\n    action = 'createProfile';\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('KuzzleSecurity.createProfile: cannot create a profile without a profile ID');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data._id = id;\n  data.body = content;\n\n  if (options) {\n    action = options.replaceIfExist ? 'createOrReplaceProfile' : 'createProfile';\n  }\n\n  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : new KuzzleProfile(self, res.result._id, res.result._source));\n  });\n};\n\n\n/**\n * Update a profile in Kuzzle.\n *\n * @param {string} id - profile identifier\n * @param {object} content - a plain javascript object representing the profile's modification\n * @param {object} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n * @returns {KuzzleSecurity} this object\n */\nKuzzleSecurity.prototype.updateProfile = function (id, content, options, cb) {\n  var\n    self = this,\n    data = {},\n    action = 'updateProfile';\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('KuzzleSecurity.updateProfile: cannot update a profile without a profile ID');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data._id = id;\n  data.body = content;\n\n  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n    var updatedContent = {};\n\n    if (err) {\n      return cb(err);\n    }\n\n    Object.keys(res.result._source).forEach(function (property) {\n      updatedContent[property] = res.result._source[property];\n    });\n\n    cb(null, new KuzzleProfile(self, res.result._id, updatedContent));\n  });\n\n  return this;\n};\n\n/**\n * Delete profile.\n *\n * There is a small delay between profile deletion and their deletion in our advanced search layer,\n * usually a couple of seconds.\n * That means that a profile that was just been delete will be returned by this function\n *\n *\n * @param {string} id - Profile id to delete\n * @param {object} [options] - (optional) arguments\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {KuzzleSecurity} this object\n */\nKuzzleSecurity.prototype.deleteProfile = function (id, options, cb) {\n  var data = {_id: id};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query(this.buildQueryArgs('deleteProfile'), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : res.result._id);\n  });\n\n  return this;\n};\n\n/**\n * Instantiate a new KuzzleProfile object. Workaround to the module.exports limitation, preventing multiple\n * constructors to be exposed without having to use a factory or a composed object.\n *\n * @param {string} id - profile id\n * @param {object} content - profile content\n * @constructor\n */\nKuzzleSecurity.prototype.profileFactory = function(id, content) {\n  return new KuzzleProfile(this, id, content);\n};\n\n/**\n * Get a specific user from kuzzle using its unique ID\n *\n * @param {string} id\n * @param {object} [options] - (optional) arguments\n * @param {responseCallback} cb - returns Kuzzle's response\n */\nKuzzleSecurity.prototype.getUser = function (id, options, cb) {\n  var\n    data = {_id: id},\n    self = this;\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('Id parameter is mandatory for getUser function');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('KuzzleSecurity.getUser', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('getUser'), data, options, function (err, response) {\n    cb(err, err ? undefined : new KuzzleUser(self, response.result._id, response.result._source));\n  });\n};\n\n/**\n * Executes a search on user according to a filter\n *\n * /!\\ There is a small delay between user creation and their existence in our persistent search layer,\n * usually a couple of seconds.\n * That means that a user that was just been created won’t be returned by this function.\n *\n * @param {Object} filters - same filters as documents filters\n * @param {object} [options] - (optional) arguments\n * @param {responseCallback} [cb] - returns Kuzzle's response\n */\nKuzzleSecurity.prototype.searchUsers = function (filters, options, cb) {\n  var\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('KuzzleSecurity.searchUsers', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('searchUsers'), {body: filters}, options, function (error, response) {\n    var documents;\n\n    if (error) {\n      return cb(error);\n    }\n\n    documents = response.result.hits.map(function (doc) {\n      return new KuzzleUser(self, doc._id, doc._source);\n    });\n\n    cb(null, { total: response.result.total, users: documents });\n  });\n};\n\n/**\n * Create a new user in Kuzzle.\n *\n * Takes an optional argument object with the following property:\n *    - replaceIfExist (boolean, default: false):\n *        If the same user already exists: throw an error if sets to false.\n *        Replace the existing user otherwise\n *\n * @param {string} id - user identifier\n * @param {object} content - attribute `profile` in `content` must only contains the profile id\n * @param {object} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n */\nKuzzleSecurity.prototype.createUser = function (id, content, options, cb) {\n  var\n    self = this,\n    data = {_id: id, body: content},\n    action = 'createUser';\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('KuzzleSecurity.createUser: cannot create a user without a user ID');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (options) {\n    action = options.replaceIfExist ? 'createOrReplaceUser' : 'createUser';\n  }\n\n  self.kuzzle.query(this.buildQueryArgs(action), data, null, cb && function (err, res) {\n    cb(err, err ? undefined : new KuzzleUser(self, res.result._id, res.result._source));\n  });\n};\n\n\n/**\n * Update an user in Kuzzle.\n *\n * @param {string} id - user identifier\n * @param {object} content - a plain javascript object representing the user's modification\n * @param {object} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n * @returns {KuzzleSecurity} this object\n */\nKuzzleSecurity.prototype.updateUser = function (id, content, options, cb) {\n  var\n    self = this,\n    data = {},\n    action = 'updateUser';\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('KuzzleSecurity.updateUser: cannot update an user without an user ID');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data._id = id;\n  data.body = content;\n\n  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : new KuzzleUser(self, res.result._id, res.result._source));\n  });\n\n  return this;\n};\n\n/**\n * Delete user.\n *\n * There is a small delay between user deletion and their deletion in our advanced search layer,\n * usually a couple of seconds.\n * That means that a user that was just been delete will be returned by this function\n *\n *\n * @param {string} id - Profile id to delete\n * @param {object} [options] - (optional) arguments\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {KuzzleSecurity} this object\n */\nKuzzleSecurity.prototype.deleteUser = function (id, options, cb) {\n  var data = {_id: id};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query(this.buildQueryArgs('deleteUser'), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : res.result._id);\n  });\n\n  return this;\n};\n\n/**\n * Instantiate a new KuzzleUser object. Workaround to the module.exports limitation, preventing multiple\n * constructors to be exposed without having to use a factory or a composed object.\n *\n * @param {string} id - user id\n * @param {object} content - user content\n * @constructor\n */\nKuzzleSecurity.prototype.userFactory = function(id, content) {\n  return new KuzzleUser(this, id, content);\n};\n\n/**\n * Tells whether an action is allowed, denied or conditional based on the rights\n * rights provided as the first argument. An action is defined as a couple of\n * action and controller (mandatory), plus an index and a collection(optional).\n *\n * @param {object} rights - The rights rights associated to a user\n *                            (see getMyrights and getUserrights).\n * @param {string} controller - The controller to check the action onto.\n * @param {string} action - The action to perform.\n * @param {string} index - (optional) The name of index to perform the action onto.\n * @param {string} collection - (optional) The name of the collection to perform the action onto.\n *\n * @returns {string} ['allowed', 'denied', 'conditional'] where conditional cases\n *                   correspond to rights containing closures.\n *                   See also http://kuzzle.io/guide/#roles-definition\n */\nKuzzleSecurity.prototype.isActionAllowed = function(rights, controller, action, index, collection) {\n  var filteredRights;\n\n  if (!rights || typeof rights !== 'object') {\n    throw new Error('rights parameter is mandatory for isActionAllowed function');\n  }\n  if (!controller || typeof controller !== 'string') {\n    throw new Error('controller parameter is mandatory for isActionAllowed function');\n  }\n  if (!action || typeof action !== 'string') {\n    throw new Error('action parameter is mandatory for isActionAllowed function');\n  }\n\n  // We filter in all the rights that match the request (including wildcards).\n  filteredRights = rights\n    .filter(function (right) {\n      return right.controller === controller || right.controller === '*';\n    })\n    .filter(function (right) {\n      return right.action === action || right.action === '*';\n    })\n    .filter(function (right) {\n      return right.index === index || right.index === '*';\n    })\n    .filter(function (right) {\n      return right.collection === collection || right.collection === '*';\n    });\n\n  // Then, if at least one right allows the action, we return 'allowed'\n  if (filteredRights.some(function (item) { return item.value === 'allowed'; })) {\n    return 'allowed';\n  }\n  // If no right allows the action, we check for conditionals.\n  if (filteredRights.some(function (item) { return item.value === 'conditional'; })) {\n    return 'conditional';\n  }\n  // Otherwise we return 'denied'.\n  return 'denied';\n};\n\n\n/**\n * Gets the rights array of a given user.\n *\n * @param {string} userId The id of the user.\n * @param {object} [options] - (optional) arguments\n * @param {function} cb   The callback containing the normalized array of rights.\n */\nKuzzleSecurity.prototype.getUserRights = function (userId, options, cb) {\n  var\n    data = {_id: userId},\n    self = this;\n\n  if (!userId || typeof userId !== 'string') {\n    throw new Error('userId parameter is mandatory for getUserRights function');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('Kuzzle.getUserRights', cb);\n\n  this.kuzzle.query(this.buildQueryArgs('getUserRights'), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : res.result.hits);\n  });\n};\n\nmodule.exports = KuzzleSecurity;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/security/kuzzleSecurity.js\n ** module id = 14\n ** module chunks = 0\n **/"],"sourceRoot":""}